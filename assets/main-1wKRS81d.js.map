{"version":3,"file":"main-1wKRS81d.js","sources":["../../src/utils/usePageVisibility.js","../../src/components/background-service.jsx","../../src/components/compose-button.jsx","../../src/components/keyboard-shortcuts-help.jsx","../../src/pages/accounts.jsx","../../src/assets/logo.svg","../../src/utils/push-notifications.js","../../src/pages/settings.jsx","../../src/utils/focus-deck.jsx","../../src/utils/useLocationChange.js","../../src/utils/lists.js","../../src/components/list-add-edit.jsx","../../src/components/account-info.jsx","../../src/components/account-sheet.jsx","../../src/components/drafts.jsx","../../src/components/embed-modal.jsx","../../src/components/generic-accounts.jsx","../../src/components/media-alt-modal.jsx","../../src/utils/color-utils.js","../../src/components/media-modal.jsx","../../src/components/report-modal.jsx","../../src/assets/floating-button.svg","../../src/assets/multi-column.svg","../../src/assets/tab-menu-bar.svg","../../src/utils/followed-tags.js","../../src/components/AsyncText.jsx","../../src/components/shortcuts-settings.jsx","../../src/components/modals.jsx","../../src/components/follow-request-buttons.jsx","../../src/components/notification.jsx","../../src/components/notification-service.jsx","../../src/components/search-form.jsx","../../src/components/search-command.jsx","../../src/components/shortcuts.jsx","../../src/utils/timeline-utils.jsx","../../src/utils/useScroll.js","../../src/utils/useScrollFn.js","../../src/components/media-post.jsx","../../src/components/nav-menu.jsx","../../src/components/timeline.jsx","../../src/pages/account-statuses.jsx","../../src/pages/bookmarks.jsx","../../src/assets/features/catch-up.png","../../src/pages/catchup.jsx","../../src/pages/favourites.jsx","../../src/pages/filters.jsx","../../src/pages/followed-hashtags.jsx","../../src/pages/following.jsx","../../src/pages/hashtag.jsx","../../src/pages/list.jsx","../../src/utils/group-notifications.jsx","../../src/pages/mentions.jsx","../../src/pages/notifications.jsx","../../src/pages/public.jsx","../../src/pages/search.jsx","../../src/pages/trending.jsx","../../src/components/columns.jsx","../../src/pages/home.jsx","../../src/utils/get-instance-status-url.js","../../src/pages/http-route.jsx","../../src/pages/lists.jsx","../../src/data/instances.json?url","../../src/utils/auth.js","../../src/pages/login.jsx","../../src/pages/status.jsx","../../src/pages/status-route.jsx","../../src/assets/features/boosts-carousel.jpg","../../src/assets/features/grouped-notifications.jpg","../../src/assets/features/multi-column.jpg","../../src/assets/features/multi-hashtag-timeline.jpg","../../src/assets/features/nested-comments-thread.jpg","../../src/assets/logo-text.svg","../../src/pages/welcome.jsx","../../src/utils/toast-alert.js","../../src/app.jsx","../../src/main.jsx"],"sourcesContent":["import { useEffect, useRef } from 'preact/hooks';\n\nexport default function usePageVisibility(fn = () => {}, deps = []) {\n  const savedCallback = useRef(fn);\n  useEffect(() => {\n    savedCallback.current = fn;\n  }, [deps]);\n\n  useEffect(() => {\n    const handleVisibilityChange = () => {\n      const hidden = document.hidden || document.visibilityState === 'hidden';\n      console.log('👀 Page visibility changed', hidden ? 'hidden' : 'visible');\n      savedCallback.current(!hidden);\n    };\n\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    return () =>\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n  }, []);\n}\n","import { memo } from 'preact/compat';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\n\nimport { api } from '../utils/api';\nimport showToast from '../utils/show-toast';\nimport states, { saveStatus } from '../utils/states';\nimport useInterval from '../utils/useInterval';\nimport usePageVisibility from '../utils/usePageVisibility';\n\nconst STREAMING_TIMEOUT = 1000 * 3; // 3 seconds\nconst POLL_INTERVAL = 15_000; // 15 seconds\n\nexport default memo(function BackgroundService({ isLoggedIn }) {\n  // Notifications service\n  // - WebSocket to receive notifications when page is visible\n  const [visible, setVisible] = useState(true);\n  usePageVisibility(setVisible);\n  const checkLatestNotification = async (masto, instance, skipCheckMarkers) => {\n    if (states.notificationsLast) {\n      const notificationsIterator = masto.v1.notifications.list({\n        limit: 1,\n        sinceId: states.notificationsLast.id,\n      });\n      const { value: notifications } = await notificationsIterator.next();\n      if (notifications?.length) {\n        if (skipCheckMarkers) {\n          states.notificationsShowNew = true;\n        } else {\n          let lastReadId;\n          try {\n            const markers = await masto.v1.markers.fetch({\n              timeline: 'notifications',\n            });\n            lastReadId = markers?.notifications?.lastReadId;\n          } catch (e) {}\n          if (lastReadId) {\n            states.notificationsShowNew = notifications[0].id !== lastReadId;\n          } else {\n            states.notificationsShowNew = true;\n          }\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    let sub;\n    let pollNotifications;\n    if (isLoggedIn && visible) {\n      const { masto, streaming, instance } = api();\n      (async () => {\n        // 1. Get the latest notification\n        await checkLatestNotification(masto, instance);\n\n        let hasStreaming = false;\n        // 2. Start streaming\n        if (streaming) {\n          pollNotifications = setTimeout(() => {\n            (async () => {\n              try {\n                hasStreaming = true;\n                sub = streaming.user.notification.subscribe();\n                console.log('🎏 Streaming notification', sub);\n                for await (const entry of sub) {\n                  if (!sub) break;\n                  if (!visible) break;\n                  console.log('🔔🔔 Notification entry', entry);\n                  if (entry.event === 'notification') {\n                    console.log('🔔🔔 Notification', entry);\n                    saveStatus(entry.payload, instance, {\n                      skipThreading: true,\n                    });\n                  }\n                  states.notificationsShowNew = true;\n                }\n                console.log('💥 Streaming notification loop STOPPED');\n              } catch (e) {\n                hasStreaming = false;\n                console.error(e);\n              }\n\n              if (!hasStreaming) {\n                console.log('🎏 Streaming failed, fallback to polling');\n                pollNotifications = setInterval(() => {\n                  checkLatestNotification(masto, instance, true);\n                }, POLL_INTERVAL);\n              }\n            })();\n          }, STREAMING_TIMEOUT);\n        }\n      })();\n    }\n    return () => {\n      sub?.unsubscribe?.();\n      sub = null;\n      clearTimeout(pollNotifications);\n      clearInterval(pollNotifications);\n    };\n  }, [visible, isLoggedIn]);\n\n  // Check for updates service\n  const lastCheckDate = useRef();\n  const checkForUpdates = () => {\n    lastCheckDate.current = Date.now();\n    console.log('✨ Check app update');\n    fetch('./version.json')\n      .then((r) => r.json())\n      .then((info) => {\n        if (info) states.appVersion = info;\n      })\n      .catch((e) => {\n        console.error(e);\n      });\n  };\n  useInterval(checkForUpdates, visible && 1000 * 60 * 30); // 30 minutes\n  usePageVisibility((visible) => {\n    if (visible) {\n      if (!lastCheckDate.current) {\n        checkForUpdates();\n      } else {\n        const diff = Date.now() - lastCheckDate.current;\n        if (diff > 1000 * 60 * 60) {\n          // 1 hour\n          checkForUpdates();\n        }\n      }\n    }\n  });\n\n  // Global keyboard shortcuts \"service\"\n  useHotkeys('shift+alt+k', () => {\n    const currentCloakMode = states.settings.cloakMode;\n    states.settings.cloakMode = !currentCloakMode;\n    showToast({\n      text: `Cloak mode ${currentCloakMode ? 'disabled' : 'enabled'}`,\n    });\n  });\n\n  return null;\n});\n","import { useHotkeys } from 'react-hotkeys-hook';\nimport { useSnapshot } from 'valtio';\n\nimport openCompose from '../utils/open-compose';\nimport openOSK from '../utils/open-osk';\nimport states from '../utils/states';\n\nimport Icon from './icon';\n\nexport default function ComposeButton() {\n  const snapStates = useSnapshot(states);\n\n  function handleButton(e) {\n    if (snapStates.composerState.minimized) {\n      states.composerState.minimized = false;\n      openOSK();\n      return;\n    }\n\n    if (e.shiftKey) {\n      const newWin = openCompose();\n\n      if (!newWin) {\n        states.showCompose = true;\n      }\n    } else {\n      openOSK();\n      states.showCompose = true;\n    }\n  }\n\n  useHotkeys('c, shift+c', handleButton, {\n    ignoreEventWhen: (e) => {\n      const hasModal = !!document.querySelector('#modal-container > *');\n      return hasModal;\n    },\n  });\n\n  return (\n    <button\n      type=\"button\"\n      id=\"compose-button\"\n      onClick={handleButton}\n      class={`${snapStates.composerState.minimized ? 'min' : ''} ${\n        snapStates.composerState.publishing ? 'loading' : ''\n      } ${snapStates.composerState.publishingError ? 'error' : ''}`}\n    >\n      <Icon icon=\"quill\" size=\"xl\" alt=\"Compose\" />\n    </button>\n  );\n}\n","import './keyboard-shortcuts-help.css';\n\nimport { memo } from 'preact/compat';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { useSnapshot } from 'valtio';\n\nimport states from '../utils/states';\n\nimport Icon from './icon';\nimport Modal from './modal';\n\nexport default memo(function KeyboardShortcutsHelp() {\n  const snapStates = useSnapshot(states);\n\n  function onClose() {\n    states.showKeyboardShortcutsHelp = false;\n  }\n\n  useHotkeys(\n    '?, shift+?, shift+slash',\n    (e) => {\n      console.log('help');\n      states.showKeyboardShortcutsHelp = true;\n    },\n    {\n      ignoreEventWhen: (e) => {\n        const hasModal = !!document.querySelector('#modal-container > *');\n        return hasModal;\n      },\n    },\n  );\n\n  return (\n    !!snapStates.showKeyboardShortcutsHelp && (\n      <Modal onClose={onClose}>\n        <div id=\"keyboard-shortcuts-help-container\" class=\"sheet\" tabindex=\"-1\">\n          <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n            <Icon icon=\"x\" />\n          </button>\n          <header>\n            <h2>Keyboard shortcuts</h2>\n          </header>\n          <main>\n            <table>\n              {[\n                {\n                  action: 'Keyboard shortcuts help',\n                  keys: <kbd>?</kbd>,\n                },\n                {\n                  action: 'Next post',\n                  keys: <kbd>j</kbd>,\n                },\n                {\n                  action: 'Previous post',\n                  keys: <kbd>k</kbd>,\n                },\n                {\n                  action: 'Skip carousel to next post',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>j</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Skip carousel to previous post',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>k</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Load new posts',\n                  keys: <kbd>.</kbd>,\n                },\n                {\n                  action: 'Open post details',\n                  keys: (\n                    <>\n                      <kbd>Enter</kbd> or <kbd>o</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: (\n                    <>\n                      Expand content warning or\n                      <br />\n                      toggle expanded/collapsed thread\n                    </>\n                  ),\n                  keys: <kbd>x</kbd>,\n                },\n                {\n                  action: 'Close post or dialogs',\n                  keys: (\n                    <>\n                      <kbd>Esc</kbd> or <kbd>Backspace</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Focus column in multi-column mode',\n                  keys: (\n                    <>\n                      <kbd>1</kbd> to <kbd>9</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Compose new post',\n                  keys: <kbd>c</kbd>,\n                },\n                {\n                  action: 'Compose new post (new window)',\n                  className: 'insignificant',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>c</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Send post',\n                  keys: (\n                    <>\n                      <kbd>Ctrl</kbd> + <kbd>Enter</kbd> or <kbd>⌘</kbd> +{' '}\n                      <kbd>Enter</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Search',\n                  keys: <kbd>/</kbd>,\n                },\n                {\n                  action: 'Reply',\n                  keys: <kbd>r</kbd>,\n                },\n                {\n                  action: 'Reply (new window)',\n                  className: 'insignificant',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>r</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Like (favourite)',\n                  keys: (\n                    <>\n                      <kbd>l</kbd> or <kbd>f</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Boost',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>b</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Bookmark',\n                  keys: <kbd>d</kbd>,\n                },\n                {\n                  action: 'Toggle Cloak mode',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>Alt</kbd> + <kbd>k</kbd>\n                    </>\n                  ),\n                },\n              ].map(({ action, className, keys }) => (\n                <tr key={action}>\n                  <th class={className}>{action}</th>\n                  <td>{keys}</td>\n                </tr>\n              ))}\n            </table>\n          </main>\n        </div>\n      </Modal>\n    )\n  );\n});\n","import './accounts.css';\n\nimport { useAutoAnimate } from '@formkit/auto-animate/preact';\nimport { Menu, MenuDivider, MenuItem } from '@szhsin/react-menu';\nimport { useReducer } from 'preact/hooks';\n\nimport Avatar from '../components/avatar';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Menu2 from '../components/menu2';\nimport MenuConfirm from '../components/menu-confirm';\nimport NameText from '../components/name-text';\nimport { api } from '../utils/api';\nimport states from '../utils/states';\nimport store from '../utils/store';\nimport { getCurrentAccountID, setCurrentAccountID } from '../utils/store-utils';\n\nfunction Accounts({ onClose }) {\n  const { masto } = api();\n  // Accounts\n  const accounts = store.local.getJSON('accounts');\n  const currentAccount = getCurrentAccountID();\n  const moreThanOneAccount = accounts.length > 1;\n\n  const [_, reload] = useReducer((x) => x + 1, 0);\n  const [accountsListParent] = useAutoAnimate();\n\n  return (\n    <div id=\"accounts-container\" class=\"sheet\" tabIndex=\"-1\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header class=\"header-grid\">\n        <h2>Accounts</h2>\n      </header>\n      <main>\n        <section>\n          <ul class=\"accounts-list\" ref={accountsListParent}>\n            {accounts.map((account, i) => {\n              const isCurrent = account.info.id === currentAccount;\n              const isDefault = i === 0; // first account is always default\n              return (\n                <li key={account.info.id}>\n                  <div>\n                    {moreThanOneAccount && (\n                      <span class={`current ${isCurrent ? 'is-current' : ''}`}>\n                        <Icon icon=\"check-circle\" alt=\"Current\" />\n                      </span>\n                    )}\n                    <Avatar\n                      url={account.info.avatarStatic}\n                      size=\"xxl\"\n                      onDblClick={async () => {\n                        if (isCurrent) {\n                          try {\n                            const info = await masto.v1.accounts\n                              .$select(account.info.id)\n                              .fetch();\n                            console.log('fetched account info', info);\n                            account.info = info;\n                            store.local.setJSON('accounts', accounts);\n                            reload();\n                          } catch (e) {}\n                        }\n                      }}\n                    />\n                    <NameText\n                      account={\n                        moreThanOneAccount\n                          ? {\n                              ...account.info,\n                              acct: /@/.test(account.info.acct)\n                                ? account.info.acct\n                                : `${account.info.acct}@${account.instanceURL}`,\n                            }\n                          : account.info\n                      }\n                      showAcct\n                      onClick={() => {\n                        if (isCurrent) {\n                          states.showAccount = `${account.info.username}@${account.instanceURL}`;\n                        } else {\n                          setCurrentAccountID(account.info.id);\n                          location.reload();\n                        }\n                      }}\n                    />\n                  </div>\n                  <div class=\"actions\">\n                    {isDefault && moreThanOneAccount && (\n                      <>\n                        <span class=\"tag\">Default</span>{' '}\n                      </>\n                    )}\n                    <Menu2\n                      align=\"end\"\n                      menuButton={\n                        <button\n                          type=\"button\"\n                          title=\"More\"\n                          class=\"plain more-button\"\n                        >\n                          <Icon icon=\"more\" size=\"l\" alt=\"More\" />\n                        </button>\n                      }\n                    >\n                      <MenuItem\n                        onClick={() => {\n                          states.showAccount = `${account.info.username}@${account.instanceURL}`;\n                        }}\n                      >\n                        <Icon icon=\"user\" />\n                        <span>View profile…</span>\n                      </MenuItem>\n                      <MenuDivider />\n                      {moreThanOneAccount && (\n                        <MenuItem\n                          disabled={isDefault}\n                          onClick={() => {\n                            // Move account to the top of the list\n                            accounts.splice(i, 1);\n                            accounts.unshift(account);\n                            store.local.setJSON('accounts', accounts);\n                            reload();\n                          }}\n                        >\n                          <Icon icon=\"check-circle\" />\n                          <span>Set as default</span>\n                        </MenuItem>\n                      )}\n                      <MenuConfirm\n                        subMenu\n                        confirmLabel={\n                          <>\n                            <Icon icon=\"exit\" />\n                            <span>Log out @{account.info.acct}?</span>\n                          </>\n                        }\n                        disabled={!isCurrent}\n                        menuItemClassName=\"danger\"\n                        onClick={() => {\n                          // const yes = confirm('Log out?');\n                          // if (!yes) return;\n                          accounts.splice(i, 1);\n                          store.local.setJSON('accounts', accounts);\n                          // location.reload();\n                          location.href = location.pathname || '/';\n                        }}\n                      >\n                        <Icon icon=\"exit\" />\n                        <span>Log out…</span>\n                      </MenuConfirm>\n                    </Menu2>\n                  </div>\n                </li>\n              );\n            })}\n          </ul>\n          <p>\n            <Link to=\"/login\" class=\"button plain2\" onClick={onClose}>\n              <Icon icon=\"plus\" /> <span>Add an existing account</span>\n            </Link>\n          </p>\n          {moreThanOneAccount && (\n            <p>\n              <small>\n                Note: <i>Default</i> account will always be used for first load.\n                Switched accounts will persist during the session.\n              </small>\n            </p>\n          )}\n        </section>\n      </main>\n    </div>\n  );\n}\n\nexport default Accounts;\n","export default \"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20xml:space='preserve'%20fill-rule='evenodd'%20stroke-linejoin='round'%20stroke-miterlimit='2'%20clip-rule='evenodd'%20viewBox='0%200%2064%2064'%3e%3cpath%20fill='none'%20d='M0%200h63.994v63.994H0z'/%3e%3cpath%20fill='%23a4bff7'%20d='M37.774%2011.471c14.639%203.752%2019.034%2016.557%2015.889%2031.304-.696%203.261-2.563%206.661-6.356%208.693-3.204%201.717-8.07%202.537-15.338.55l-9.634-2.404C11.651%2046.992%208.378%2038.733%2010.027%2031.823c3.627-15.201%2015.543-23.48%2027.747-20.352Z'/%3e%3cpath%20fill='%23d8e7fe'%20d='M36.76%2015.429c12.289%203.15%2015.547%2014.114%2012.907%2026.493-.947%204.44-4.937%209.365-16.664%206.143l-9.684-2.417c-7.854-1.923-10.53-7.8-9.318-12.877%203.016-12.639%2012.611-19.943%2022.759-17.342Z'/%3e%3cpath%20fill='%236081e6'%20d='M27.471%2024.991c-1.457-.698-7.229%203.213-7.663%208.926-.182%202.39%204.55%203.237%205.071-.169.725-4.743%203.715-8.218%202.592-8.757Zm10.746%202.005c-2.083.327-.382%205.901-.595%2010.727-.123%202.8%204.388%203.464%204.703%202.011%201.098-5.073-2.066-13.058-4.108-12.738Z'/%3e%3c/svg%3e\"","// Utils for push notifications\nimport { api } from './api';\nimport { getCurrentAccount } from './store-utils';\n\n// Subscription is an object with the following structure:\n// {\n//   data: {\n//     alerts: {\n//       admin: {\n//         report: boolean,\n//         signUp: boolean,\n//       },\n//       favourite: boolean,\n//       follow: boolean,\n//       mention: boolean,\n//       poll: boolean,\n//       reblog: boolean,\n//       status: boolean,\n//       update: boolean,\n//     }\n//   },\n//   policy: \"all\" | \"followed\" | \"follower\" | \"none\",\n//   subscription: {\n//     endpoint: string,\n//     keys: {\n//       auth: string,\n//       p256dh: string,\n//     },\n//   },\n// }\n\n// Back-end CRUD\n// =============\n\nfunction createBackendPushSubscription(subscription) {\n  const { masto } = api();\n  return masto.v1.push.subscription.create(subscription);\n}\n\nfunction fetchBackendPushSubscription() {\n  const { masto } = api();\n  return masto.v1.push.subscription.fetch();\n}\n\nfunction updateBackendPushSubscription(subscription) {\n  const { masto } = api();\n  return masto.v1.push.subscription.update(subscription);\n}\n\nfunction removeBackendPushSubscription() {\n  const { masto } = api();\n  return masto.v1.push.subscription.remove();\n}\n\n// Front-end\n// =========\n\nexport function isPushSupported() {\n  return 'serviceWorker' in navigator && 'PushManager' in window;\n}\n\nexport function getRegistration() {\n  // return navigator.serviceWorker.ready;\n  return navigator.serviceWorker.getRegistration();\n}\n\nasync function getSubscription() {\n  const registration = await getRegistration();\n  const subscription = registration\n    ? await registration.pushManager.getSubscription()\n    : undefined;\n  return { registration, subscription };\n}\n\nfunction urlBase64ToUint8Array(base64String) {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = `${base64String}${padding}`\n    .replace(/-/g, '+')\n    .replace(/_/g, '/');\n\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n\n  return outputArray;\n}\n\n// Front-end <-> back-end\n// ======================\n\nexport async function initSubscription() {\n  if (!isPushSupported()) return;\n  const { subscription } = await getSubscription();\n  let backendSubscription = null;\n  try {\n    backendSubscription = await fetchBackendPushSubscription();\n  } catch (err) {\n    if (/(not found|unknown)/i.test(err.message)) {\n      // No subscription found\n    } else {\n      // Other error\n      throw err;\n    }\n  }\n  console.log('INIT subscription', {\n    subscription,\n    backendSubscription,\n  });\n\n  // Check if the subscription changed\n  if (backendSubscription && subscription) {\n    const sameEndpoint = backendSubscription.endpoint === subscription.endpoint;\n    const { vapidKey } = getCurrentAccount();\n    const sameKey = backendSubscription.serverKey === vapidKey;\n    if (!sameEndpoint) {\n      throw new Error('Backend subscription endpoint changed');\n    }\n    if (sameKey) {\n      // Subscription didn't change\n    } else {\n      // Subscription changed\n      console.error('🔔 Subscription changed', {\n        sameEndpoint,\n        serverKey: backendSubscription.serverKey,\n        vapIdKey: vapidKey,\n        endpoint1: backendSubscription.endpoint,\n        endpoint2: subscription.endpoint,\n        sameKey,\n        key1: backendSubscription.serverKey,\n        key2: vapidKey,\n      });\n      throw new Error('Backend subscription key and vapid key changed');\n      // Only unsubscribe from backend, not from browser\n      // await removeBackendPushSubscription();\n      // // Now let's resubscribe\n      // // NOTE: I have no idea if this works\n      // return await updateSubscription({\n      //   data: backendSubscription.data,\n      //   policy: backendSubscription.policy,\n      // });\n    }\n  }\n\n  if (subscription && !backendSubscription) {\n    // check if account's vapidKey is same as subscription's applicationServerKey\n    const { vapidKey } = getCurrentAccount();\n    const { applicationServerKey } = subscription.options;\n    const vapidKeyStr = urlBase64ToUint8Array(vapidKey).toString();\n    const applicationServerKeyStr = new Uint8Array(\n      applicationServerKey,\n    ).toString();\n    const sameKey = vapidKeyStr === applicationServerKeyStr;\n    if (sameKey) {\n      // Subscription didn't change\n    } else {\n      // Subscription changed\n      console.error('🔔 Subscription changed', {\n        vapidKeyStr,\n        applicationServerKeyStr,\n        sameKey,\n      });\n      // Unsubscribe since backend doesn't have a subscription\n      await subscription.unsubscribe();\n      throw new Error('Subscription key and vapid key changed');\n    }\n  }\n\n  // Check if backend subscription returns 404\n  // if (subscription && !backendSubscription) {\n  //   // Re-subscribe to backend\n  //   backendSubscription = await createBackendPushSubscription({\n  //     subscription,\n  //     data: {},\n  //     policy: 'all',\n  //   });\n  // }\n\n  return { subscription, backendSubscription };\n}\n\nexport async function updateSubscription({ data, policy }) {\n  console.log('🔔 Updating subscription', { data, policy });\n  if (!isPushSupported()) return;\n  let { registration, subscription } = await getSubscription();\n  let backendSubscription = null;\n\n  if (subscription) {\n    try {\n      backendSubscription = await updateBackendPushSubscription({\n        data,\n        policy,\n      });\n      // TODO: save subscription in user settings\n    } catch (error) {\n      // Backend doesn't have a subscription for this user\n      // Create a new one\n      backendSubscription = await createBackendPushSubscription({\n        subscription,\n        data,\n        policy,\n      });\n      // TODO: save subscription in user settings\n    }\n  } else {\n    // User is not subscribed\n    const { vapidKey } = getCurrentAccount();\n    if (!vapidKey) throw new Error('No server key found');\n    subscription = await registration.pushManager.subscribe({\n      userVisibleOnly: true,\n      applicationServerKey: urlBase64ToUint8Array(vapidKey),\n    });\n    backendSubscription = await createBackendPushSubscription({\n      subscription,\n      data,\n      policy,\n    });\n    // TODO: save subscription in user settings\n  }\n\n  return { subscription, backendSubscription };\n}\n\nexport async function removeSubscription() {\n  if (!isPushSupported()) return;\n  const { subscription } = await getSubscription();\n  if (subscription) {\n    await removeBackendPushSubscription();\n    await subscription.unsubscribe();\n  }\n}\n","import './settings.css';\n\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport logo from '../assets/logo.svg';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport RelativeTime from '../components/relative-time';\nimport targetLanguages from '../data/lingva-target-languages';\nimport { api } from '../utils/api';\nimport getTranslateTargetLanguage from '../utils/get-translate-target-language';\nimport localeCode2Text from '../utils/localeCode2Text';\nimport {\n  initSubscription,\n  isPushSupported,\n  removeSubscription,\n  updateSubscription,\n} from '../utils/push-notifications';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\nimport store from '../utils/store';\n\nconst DEFAULT_TEXT_SIZE = 16;\nconst TEXT_SIZES = [14, 15, 16, 17, 18, 19, 20];\nconst {\n  PHANPY_WEBSITE: WEBSITE,\n  PHANPY_PRIVACY_POLICY_URL: PRIVACY_POLICY_URL,\n  PHANPY_IMG_ALT_API_URL: IMG_ALT_API_URL,\n  PHANPY_GIPHY_API_KEY: GIPHY_API_KEY,\n} = import.meta.env;\n\nfunction Settings({ onClose }) {\n  const snapStates = useSnapshot(states);\n  const currentTheme = store.local.get('theme') || 'auto';\n  const themeFormRef = useRef();\n  const targetLanguage =\n    snapStates.settings.contentTranslationTargetLanguage || null;\n  const systemTargetLanguage = getTranslateTargetLanguage();\n  const systemTargetLanguageText = localeCode2Text(systemTargetLanguage);\n  const currentTextSize = store.local.get('textSize') || DEFAULT_TEXT_SIZE;\n\n  const [prefs, setPrefs] = useState(store.account.get('preferences') || {});\n  const { masto, authenticated, instance } = api();\n  // Get preferences every time Settings is opened\n  // NOTE: Disabled for now because I don't expect this to change often. Also for some reason, the /api/v1/preferences endpoint is cached for a while and return old prefs if refresh immediately after changing them.\n  // useEffect(() => {\n  //   const { masto } = api();\n  //   (async () => {\n  //     try {\n  //       const preferences = await masto.v1.preferences.fetch();\n  //       setPrefs(preferences);\n  //       store.account.set('preferences', preferences);\n  //     } catch (e) {\n  //       // Silently fail\n  //       console.error(e);\n  //     }\n  //   })();\n  // }, []);\n\n  return (\n    <div id=\"settings-container\" class=\"sheet\" tabIndex=\"-1\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>Settings</h2>\n      </header>\n      <main>\n        <section>\n          <ul>\n            <li>\n              <div>\n                <label>Appearance</label>\n              </div>\n              <div>\n                <form\n                  ref={themeFormRef}\n                  onInput={(e) => {\n                    console.log(e);\n                    e.preventDefault();\n                    const formData = new FormData(themeFormRef.current);\n                    const theme = formData.get('theme');\n                    const html = document.documentElement;\n\n                    if (theme === 'auto') {\n                      html.classList.remove('is-light', 'is-dark');\n\n                      // Disable manual theme <meta>\n                      const $manualMeta = document.querySelector(\n                        'meta[data-theme-setting=\"manual\"]',\n                      );\n                      if ($manualMeta) {\n                        $manualMeta.name = '';\n                      }\n                      // Enable auto theme <meta>s\n                      const $autoMetas = document.querySelectorAll(\n                        'meta[data-theme-setting=\"auto\"]',\n                      );\n                      $autoMetas.forEach((m) => {\n                        m.name = 'theme-color';\n                      });\n                    } else {\n                      html.classList.toggle('is-light', theme === 'light');\n                      html.classList.toggle('is-dark', theme === 'dark');\n\n                      // Enable manual theme <meta>\n                      const $manualMeta = document.querySelector(\n                        'meta[data-theme-setting=\"manual\"]',\n                      );\n                      if ($manualMeta) {\n                        $manualMeta.name = 'theme-color';\n                        $manualMeta.content =\n                          theme === 'light'\n                            ? $manualMeta.dataset.themeLightColor\n                            : $manualMeta.dataset.themeDarkColor;\n                      }\n                      // Disable auto theme <meta>s\n                      const $autoMetas = document.querySelectorAll(\n                        'meta[data-theme-setting=\"auto\"]',\n                      );\n                      $autoMetas.forEach((m) => {\n                        m.name = '';\n                      });\n                    }\n                    document\n                      .querySelector('meta[name=\"color-scheme\"]')\n                      .setAttribute(\n                        'content',\n                        theme === 'auto' ? 'dark light' : theme,\n                      );\n\n                    if (theme === 'auto') {\n                      store.local.del('theme');\n                    } else {\n                      store.local.set('theme', theme);\n                    }\n                  }}\n                >\n                  <div class=\"radio-group\">\n                    <label>\n                      <input\n                        type=\"radio\"\n                        name=\"theme\"\n                        value=\"light\"\n                        defaultChecked={currentTheme === 'light'}\n                      />\n                      <span>Light</span>\n                    </label>\n                    <label>\n                      <input\n                        type=\"radio\"\n                        name=\"theme\"\n                        value=\"dark\"\n                        defaultChecked={currentTheme === 'dark'}\n                      />\n                      <span>Dark</span>\n                    </label>\n                    <label>\n                      <input\n                        type=\"radio\"\n                        name=\"theme\"\n                        value=\"auto\"\n                        defaultChecked={\n                          currentTheme !== 'light' && currentTheme !== 'dark'\n                        }\n                      />\n                      <span>Auto</span>\n                    </label>\n                  </div>\n                </form>\n              </div>\n            </li>\n            <li>\n              <div>\n                <label>Text size</label>\n              </div>\n              <div class=\"range-group\">\n                <span style={{ fontSize: TEXT_SIZES[0] }}>A</span>{' '}\n                <input\n                  type=\"range\"\n                  min={TEXT_SIZES[0]}\n                  max={TEXT_SIZES[TEXT_SIZES.length - 1]}\n                  step=\"1\"\n                  value={currentTextSize}\n                  list=\"sizes\"\n                  onChange={(e) => {\n                    const value = parseInt(e.target.value, 10);\n                    const html = document.documentElement;\n                    // set CSS variable\n                    html.style.setProperty('--text-size', `${value}px`);\n                    // save to local storage\n                    if (value === DEFAULT_TEXT_SIZE) {\n                      store.local.del('textSize');\n                    } else {\n                      store.local.set('textSize', e.target.value);\n                    }\n                  }}\n                />{' '}\n                <span style={{ fontSize: TEXT_SIZES[TEXT_SIZES.length - 1] }}>\n                  A\n                </span>\n                <datalist id=\"sizes\">\n                  {TEXT_SIZES.map((size) => (\n                    <option value={size} />\n                  ))}\n                </datalist>\n              </div>\n            </li>\n          </ul>\n        </section>\n        {authenticated && (\n          <>\n            <h3>Posting</h3>\n            <section>\n              <ul>\n                <li>\n                  <div>\n                    <label for=\"posting-privacy-field\">\n                      Default visibility{' '}\n                      <Icon icon=\"cloud\" alt=\"Synced\" class=\"synced-icon\" />\n                    </label>\n                  </div>\n                  <div>\n                    <select\n                      id=\"posting-privacy-field\"\n                      value={prefs['posting:default:visibility'] || 'public'}\n                      onChange={(e) => {\n                        const { value } = e.target;\n                        (async () => {\n                          try {\n                            await masto.v1.accounts.updateCredentials({\n                              source: {\n                                privacy: value,\n                              },\n                            });\n                            setPrefs({\n                              ...prefs,\n                              'posting:default:visibility': value,\n                            });\n                            store.account.set('preferences', {\n                              ...prefs,\n                              'posting:default:visibility': value,\n                            });\n                          } catch (e) {\n                            alert('Failed to update posting privacy');\n                            console.error(e);\n                          }\n                        })();\n                      }}\n                    >\n                      <option value=\"public\">Public</option>\n                      <option value=\"unlisted\">Unlisted</option>\n                      <option value=\"private\">Followers only</option>\n                    </select>\n                  </div>\n                </li>\n              </ul>\n            </section>\n            <p class=\"section-postnote\">\n              <Icon icon=\"cloud\" alt=\"Synced\" class=\"synced-icon\" />{' '}\n              <small>\n                Synced to your instance server's settings.{' '}\n                <a\n                  href={`https://${instance}/`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  Go to your instance ({instance}) for more settings.\n                </a>\n              </small>\n            </p>\n          </>\n        )}\n        <h3>Experiments</h3>\n        <section>\n          <ul>\n            <li>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={snapStates.settings.autoRefresh}\n                  onChange={(e) => {\n                    states.settings.autoRefresh = e.target.checked;\n                  }}\n                />{' '}\n                Auto refresh timeline posts\n              </label>\n            </li>\n            <li>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={snapStates.settings.boostsCarousel}\n                  onChange={(e) => {\n                    states.settings.boostsCarousel = e.target.checked;\n                  }}\n                />{' '}\n                Boosts carousel\n              </label>\n            </li>\n            <li>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={snapStates.settings.contentTranslation}\n                  onChange={(e) => {\n                    const { checked } = e.target;\n                    states.settings.contentTranslation = checked;\n                    if (!checked) {\n                      states.settings.contentTranslationTargetLanguage = null;\n                    }\n                  }}\n                />{' '}\n                Post translation\n              </label>\n              <div\n                class={`sub-section ${\n                  !snapStates.settings.contentTranslation\n                    ? 'more-insignificant'\n                    : ''\n                }`}\n              >\n                <div>\n                  <label>\n                    Translate to{' '}\n                    <select\n                      value={targetLanguage || ''}\n                      disabled={!snapStates.settings.contentTranslation}\n                      onChange={(e) => {\n                        states.settings.contentTranslationTargetLanguage =\n                          e.target.value || null;\n                      }}\n                    >\n                      <option value=\"\">\n                        System language ({systemTargetLanguageText})\n                      </option>\n                      <option disabled>──────────</option>\n                      {targetLanguages.map((lang) => (\n                        <option value={lang.code}>{lang.name}</option>\n                      ))}\n                    </select>\n                  </label>\n                </div>\n                <hr />\n                <p class=\"checkbox-fieldset\">\n                  Hide \"Translate\" button for\n                  {snapStates.settings.contentTranslationHideLanguages.length >\n                    0 && (\n                    <>\n                      {' '}\n                      (\n                      {\n                        snapStates.settings.contentTranslationHideLanguages\n                          .length\n                      }\n                      )\n                    </>\n                  )}\n                  :\n                  <div class=\"checkbox-fields\">\n                    {targetLanguages.map((lang) => (\n                      <label>\n                        <input\n                          type=\"checkbox\"\n                          checked={snapStates.settings.contentTranslationHideLanguages.includes(\n                            lang.code,\n                          )}\n                          onChange={(e) => {\n                            const { checked } = e.target;\n                            if (checked) {\n                              states.settings.contentTranslationHideLanguages.push(\n                                lang.code,\n                              );\n                            } else {\n                              states.settings.contentTranslationHideLanguages =\n                                snapStates.settings.contentTranslationHideLanguages.filter(\n                                  (code) => code !== lang.code,\n                                );\n                            }\n                          }}\n                        />{' '}\n                        {lang.name}\n                      </label>\n                    ))}\n                  </div>\n                </p>\n                <p class=\"insignificant\">\n                  <small>\n                    Note: This feature uses external translation services,\n                    powered by{' '}\n                    <a\n                      href=\"https://github.com/cheeaun/lingva-api\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      Lingva API\n                    </a>{' '}\n                    &amp;{' '}\n                    <a\n                      href=\"https://github.com/thedaviddelta/lingva-translate\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      Lingva Translate\n                    </a>\n                    .\n                  </small>\n                </p>\n                <hr />\n                <div>\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      checked={snapStates.settings.contentTranslationAutoInline}\n                      disabled={!snapStates.settings.contentTranslation}\n                      onChange={(e) => {\n                        states.settings.contentTranslationAutoInline =\n                          e.target.checked;\n                      }}\n                    />{' '}\n                    Auto inline translation\n                  </label>\n                  <p class=\"insignificant\">\n                    <small>\n                      Automatically show translation for posts in timeline. Only\n                      works for <b>short</b> posts without content warning,\n                      media and poll.\n                    </small>\n                  </p>\n                </div>\n              </div>\n            </li>\n            {!!GIPHY_API_KEY && authenticated && (\n              <li>\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={snapStates.settings.composerGIFPicker}\n                    onChange={(e) => {\n                      states.settings.composerGIFPicker = e.target.checked;\n                    }}\n                  />{' '}\n                  GIF Picker for composer\n                </label>\n                <div class=\"sub-section insignificant\">\n                  <small>\n                    Note: This feature uses external GIF search service, powered\n                    by{' '}\n                    <a\n                      href=\"https://developers.giphy.com/\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      GIPHY\n                    </a>\n                    . G-rated (suitable for viewing by all ages), tracking\n                    parameters are stripped, referrer information is omitted\n                    from requests, but search queries and IP address information\n                    will still reach their servers.\n                  </small>\n                </div>\n              </li>\n            )}\n            {!!IMG_ALT_API_URL && authenticated && (\n              <li>\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={snapStates.settings.mediaAltGenerator}\n                    onChange={(e) => {\n                      states.settings.mediaAltGenerator = e.target.checked;\n                    }}\n                  />{' '}\n                  Image description generator{' '}\n                  <Icon icon=\"sparkles2\" class=\"more-insignificant\" />\n                </label>\n                <div class=\"sub-section insignificant\">\n                  <small>Only for new images while composing new posts.</small>\n                </div>\n                <div class=\"sub-section insignificant\">\n                  <small>\n                    Note: This feature uses external AI service, powered by{' '}\n                    <a\n                      href=\"https://github.com/cheeaun/img-alt-api\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      img-alt-api\n                    </a>\n                    . May not work well. Only for images and in English.\n                  </small>\n                </div>\n              </li>\n            )}\n            {authenticated && (\n              <li>\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={\n                      snapStates.settings.shortcutSettingsCloudImportExport\n                    }\n                    onChange={(e) => {\n                      states.settings.shortcutSettingsCloudImportExport =\n                        e.target.checked;\n                    }}\n                  />{' '}\n                  \"Cloud\" import/export for shortcuts settings{' '}\n                  <Icon icon=\"cloud\" class=\"more-insignificant\" />\n                </label>\n                <div class=\"sub-section insignificant\">\n                  <small>\n                    ⚠️⚠️⚠️ Very experimental.\n                    <br />\n                    Stored in your own profile’s notes. Profile (private) notes\n                    are mainly used for other profiles, and hidden for own\n                    profile.\n                  </small>\n                </div>\n                <div class=\"sub-section insignificant\">\n                  <small>\n                    Note: This feature uses currently-logged-in instance server\n                    API.\n                  </small>\n                </div>\n              </li>\n            )}\n            <li>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={snapStates.settings.cloakMode}\n                  onChange={(e) => {\n                    states.settings.cloakMode = e.target.checked;\n                  }}\n                />{' '}\n                Cloak mode{' '}\n                <span class=\"insignificant\">\n                  (<samp>Text</samp> → <samp>████</samp>)\n                </span>\n              </label>\n              <div class=\"sub-section insignificant\">\n                <small>\n                  Replace text as blocks, useful when taking screenshots, for\n                  privacy reasons.\n                </small>\n              </div>\n            </li>\n            {authenticated && (\n              <li>\n                <button\n                  type=\"button\"\n                  class=\"light\"\n                  onClick={() => {\n                    states.showDrafts = true;\n                    states.showSettings = false;\n                  }}\n                >\n                  Unsent drafts\n                </button>\n              </li>\n            )}\n          </ul>\n        </section>\n        {authenticated && <PushNotificationsSection onClose={onClose} />}\n        <h3>About</h3>\n        <section>\n          <div\n            style={{\n              display: 'flex',\n              flexWrap: 'wrap',\n              gap: 8,\n              lineHeight: 1.25,\n              alignItems: 'center',\n              marginTop: 8,\n            }}\n          >\n            <img\n              src={logo}\n              alt=\"\"\n              width=\"64\"\n              height=\"64\"\n              style={{\n                aspectRatio: '1/1',\n                verticalAlign: 'middle',\n                background: '#b7cdf9',\n                borderRadius: 12,\n              }}\n            />\n            <div>\n              <b>Phanpy</b>{' '}\n              <a\n                href=\"https://hachyderm.io/@phanpy\"\n                // target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  states.showAccount = 'phanpy@hachyderm.io';\n                }}\n              >\n                @phanpy\n              </a>\n              <br />\n              <a\n                href=\"https://github.com/cheeaun/phanpy\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                Built\n              </a>{' '}\n              by{' '}\n              <a\n                href=\"https://mastodon.social/@cheeaun\"\n                // target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  states.showAccount = 'cheeaun@mastodon.social';\n                }}\n              >\n                @cheeaun\n              </a>\n            </div>\n          </div>\n          <p>\n            <a\n              href=\"https://github.com/sponsors/cheeaun\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Sponsor\n            </a>{' '}\n            &middot;{' '}\n            <a\n              href=\"https://www.buymeacoffee.com/cheeaun\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Donate\n            </a>{' '}\n            &middot;{' '}\n            <a\n              href={PRIVACY_POLICY_URL}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Privacy Policy\n            </a>\n          </p>\n          {__BUILD_TIME__ && (\n            <p>\n              {WEBSITE && (\n                <>\n                  <span class=\"insignificant\">Site:</span>{' '}\n                  {WEBSITE.replace(/https?:\\/\\//g, '').replace(/\\/$/, '')}\n                  <br />\n                </>\n              )}\n              <span class=\"insignificant\">Version:</span>{' '}\n              <input\n                type=\"text\"\n                class=\"version-string\"\n                readOnly\n                size=\"18\" // Manually calculated here\n                value={`${__BUILD_TIME__.slice(0, 10).replace(/-/g, '.')}${\n                  __COMMIT_HASH__ ? `.${__COMMIT_HASH__}` : ''\n                }`}\n                onClick={(e) => {\n                  e.target.select();\n                  // Copy to clipboard\n                  try {\n                    navigator.clipboard.writeText(e.target.value);\n                    showToast('Version string copied');\n                  } catch (e) {\n                    console.warn(e);\n                    showToast('Unable to copy version string');\n                  }\n                }}\n              />{' '}\n              {!__FAKE_COMMIT_HASH__ && (\n                <span class=\"ib insignificant\">\n                  (\n                  <a\n                    href={`https://github.com/cheeaun/phanpy/commit/${__COMMIT_HASH__}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    <RelativeTime datetime={new Date(__BUILD_TIME__)} />\n                  </a>\n                  )\n                </span>\n              )}\n            </p>\n          )}\n        </section>\n      </main>\n    </div>\n  );\n}\n\nfunction PushNotificationsSection({ onClose }) {\n  if (!isPushSupported()) return null;\n\n  const { instance } = api();\n  const [uiState, setUIState] = useState('default');\n  const pushFormRef = useRef();\n  const [allowNotifications, setAllowNotifications] = useState(false);\n  const [needRelogin, setNeedRelogin] = useState(false);\n  const previousPolicyRef = useRef();\n  useEffect(() => {\n    (async () => {\n      setUIState('loading');\n      try {\n        const { subscription, backendSubscription } = await initSubscription();\n        if (\n          backendSubscription?.policy &&\n          backendSubscription.policy !== 'none'\n        ) {\n          setAllowNotifications(true);\n          const { alerts, policy } = backendSubscription;\n          console.log('backendSubscription', backendSubscription);\n          previousPolicyRef.current = policy;\n          const { elements } = pushFormRef.current;\n          const policyEl = elements.namedItem('policy');\n          if (policyEl) policyEl.value = policy;\n          // alerts is {}, iterate it\n          Object.keys(alerts).forEach((alert) => {\n            const el = elements.namedItem(alert);\n            if (el?.type === 'checkbox') {\n              el.checked = true;\n            }\n          });\n        }\n        setUIState('default');\n      } catch (err) {\n        console.warn(err);\n        if (/outside.*authorized/i.test(err.message)) {\n          setNeedRelogin(true);\n        } else {\n          alert(err?.message || err);\n        }\n        setUIState('error');\n      }\n    })();\n  }, []);\n\n  const isLoading = uiState === 'loading';\n\n  return (\n    <form\n      ref={pushFormRef}\n      onChange={() => {\n        setTimeout(() => {\n          const values = Object.fromEntries(new FormData(pushFormRef.current));\n          const allowNotifications = !!values['policy-allow'];\n          const params = {\n            data: {\n              policy: values.policy,\n              alerts: {\n                mention: !!values.mention,\n                favourite: !!values.favourite,\n                reblog: !!values.reblog,\n                follow: !!values.follow,\n                follow_request: !!values.followRequest,\n                poll: !!values.poll,\n                update: !!values.update,\n                status: !!values.status,\n              },\n            },\n          };\n\n          let alertsCount = 0;\n          // Remove false values from data.alerts\n          // API defaults to false anyway\n          Object.keys(params.data.alerts).forEach((key) => {\n            if (!params.data.alerts[key]) {\n              delete params.data.alerts[key];\n            } else {\n              alertsCount++;\n            }\n          });\n          const policyChanged =\n            previousPolicyRef.current !== params.data.policy;\n\n          console.log('PN Form', {\n            values,\n            allowNotifications: allowNotifications,\n            params,\n          });\n\n          if (allowNotifications && alertsCount > 0) {\n            if (policyChanged) {\n              console.debug('Policy changed.');\n              removeSubscription()\n                .then(() => {\n                  updateSubscription(params);\n                })\n                .catch((err) => {\n                  console.warn(err);\n                  alert('Failed to update subscription. Please try again.');\n                });\n            } else {\n              updateSubscription(params).catch((err) => {\n                console.warn(err);\n                alert('Failed to update subscription. Please try again.');\n              });\n            }\n          } else {\n            removeSubscription().catch((err) => {\n              console.warn(err);\n              alert('Failed to remove subscription. Please try again.');\n            });\n          }\n        }, 100);\n      }}\n    >\n      <h3>Push Notifications (beta)</h3>\n      <section>\n        <ul>\n          <li>\n            <label>\n              <input\n                type=\"checkbox\"\n                disabled={isLoading || needRelogin}\n                name=\"policy-allow\"\n                checked={allowNotifications}\n                onChange={async (e) => {\n                  const { checked } = e.target;\n                  if (checked) {\n                    // Request permission\n                    const permission = await Notification.requestPermission();\n                    if (permission === 'granted') {\n                      setAllowNotifications(true);\n                    } else {\n                      setAllowNotifications(false);\n                      if (permission === 'denied') {\n                        alert(\n                          'Push notifications are blocked. Please enable them in your browser settings.',\n                        );\n                      }\n                    }\n                  } else {\n                    setAllowNotifications(false);\n                  }\n                }}\n              />{' '}\n              Allow from{' '}\n              <select\n                name=\"policy\"\n                disabled={isLoading || needRelogin || !allowNotifications}\n              >\n                {[\n                  {\n                    value: 'all',\n                    label: 'anyone',\n                  },\n                  {\n                    value: 'followed',\n                    label: 'people I follow',\n                  },\n                  {\n                    value: 'follower',\n                    label: 'followers',\n                  },\n                ].map((type) => (\n                  <option value={type.value}>{type.label}</option>\n                ))}\n              </select>\n            </label>\n            <div\n              class=\"shazam-container no-animation\"\n              style={{\n                width: '100%',\n              }}\n              hidden={!allowNotifications}\n            >\n              <div class=\"shazam-container-inner\">\n                <div class=\"sub-section\">\n                  <ul>\n                    {[\n                      {\n                        value: 'mention',\n                        label: 'Mentions',\n                      },\n                      {\n                        value: 'favourite',\n                        label: 'Likes',\n                      },\n                      {\n                        value: 'reblog',\n                        label: 'Boosts',\n                      },\n                      {\n                        value: 'follow',\n                        label: 'Follows',\n                      },\n                      {\n                        value: 'followRequest',\n                        label: 'Follow requests',\n                      },\n                      {\n                        value: 'poll',\n                        label: 'Polls',\n                      },\n                      {\n                        value: 'update',\n                        label: 'Post edits',\n                      },\n                      {\n                        value: 'status',\n                        label: 'New posts',\n                      },\n                    ].map((alert) => (\n                      <li>\n                        <label>\n                          <input type=\"checkbox\" name={alert.value} />{' '}\n                          {alert.label}\n                        </label>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              </div>\n            </div>\n            {needRelogin && (\n              <div class=\"sub-section\">\n                <p>\n                  Push permission was not granted since your last login. You'll\n                  need to{' '}\n                  <Link to={`/login?instance=${instance}`} onClick={onClose}>\n                    <b>log in</b> again to grant push permission\n                  </Link>\n                  .\n                </p>\n              </div>\n            )}\n          </li>\n        </ul>\n      </section>\n      <p class=\"section-postnote\">\n        <small>\n          NOTE: Push notifications only work for <b>one account</b>.\n        </small>\n      </p>\n    </form>\n  );\n}\n\nexport default Settings;\n","const focusDeck = () => {\n  let timer = setTimeout(() => {\n    const columns = document.getElementById('columns');\n    if (columns) {\n      // Focus first column\n      // columns.querySelector('.deck-container')?.focus?.();\n    } else {\n      const modals = document.querySelectorAll('#modal-container > *');\n      if (modals?.length) {\n        // Focus last modal\n        const modal = modals[modals.length - 1]; // last one\n        const modalFocusElement =\n          modal.querySelector('[tabindex=\"-1\"]') || modal;\n        if (modalFocusElement) {\n          modalFocusElement.focus();\n          return;\n        }\n      }\n      const backDrop = document.querySelector('.deck-backdrop');\n      if (backDrop) return;\n      // Focus last deck\n      const pages = document.querySelectorAll('.deck-container');\n      const page = pages[pages.length - 1]; // last one\n      if (page && page.tabIndex === -1) {\n        console.log('FOCUS', page);\n        page.focus();\n      }\n    }\n  }, 100);\n  return () => clearTimeout(timer);\n};\n\nexport default focusDeck;\n","import { useEffect, useRef } from 'preact/hooks';\nimport { useLocation } from 'react-router-dom';\n\n// Hook that runs a callback when the location changes\n// Won't run on the first render\n\nexport default function useLocationChange(fn) {\n  if (!fn) return;\n  const location = useLocation();\n  const currentLocationRef = useRef(location.pathname);\n  useEffect(() => {\n    // console.log('location', {\n    //   current: currentLocationRef.current,\n    //   next: location.pathname,\n    // });\n    if (\n      currentLocationRef.current &&\n      location.pathname !== currentLocationRef.current\n    ) {\n      fn?.();\n    }\n  }, [location.pathname, fn]);\n}\n","import { api } from './api';\nimport pmem from './pmem';\nimport store from './store';\n\nconst FETCH_MAX_AGE = 1000 * 60; // 1 minute\nconst MAX_AGE = 24 * 60 * 60 * 1000; // 1 day\n\nexport const fetchLists = pmem(\n  async () => {\n    const { masto } = api();\n    const lists = await masto.v1.lists.list();\n    lists.sort((a, b) => a.title.localeCompare(b.title));\n\n    if (lists.length) {\n      setTimeout(() => {\n        // Save to local storage, with saved timestamp\n        store.account.set('lists', {\n          lists,\n          updatedAt: Date.now(),\n        });\n      }, 1);\n    }\n\n    return lists;\n  },\n  {\n    maxAge: FETCH_MAX_AGE,\n  },\n);\n\nexport async function getLists() {\n  try {\n    const { lists, updatedAt } = store.account.get('lists') || {};\n    if (!lists?.length) return await fetchLists();\n    if (Date.now() - updatedAt > MAX_AGE) {\n      // Stale-while-revalidate\n      fetchLists();\n      return lists;\n    }\n    return lists;\n  } catch (e) {\n    return [];\n  }\n}\n\nexport const fetchList = pmem(\n  (id) => {\n    const { masto } = api();\n    return masto.v1.lists.$select(id).fetch();\n  },\n  {\n    maxAge: FETCH_MAX_AGE,\n  },\n);\n\nexport async function getList(id) {\n  const { lists } = store.account.get('lists') || {};\n  console.log({ lists });\n  if (lists?.length) {\n    const theList = lists.find((l) => l.id === id);\n    if (theList) return theList;\n  }\n  try {\n    return fetchList(id);\n  } catch (e) {\n    return null;\n  }\n}\n\nexport async function getListTitle(id) {\n  const list = await getList(id);\n  return list?.title || '';\n}\n\nexport function addListStore(list) {\n  const { lists } = store.account.get('lists') || {};\n  if (lists?.length) {\n    lists.push(list);\n    lists.sort((a, b) => a.title.localeCompare(b.title));\n    store.account.set('lists', {\n      lists,\n      updatedAt: Date.now(),\n    });\n  }\n}\n\nexport function updateListStore(list) {\n  const { lists } = store.account.get('lists') || {};\n  if (lists?.length) {\n    const index = lists.findIndex((l) => l.id === list.id);\n    if (index !== -1) {\n      lists[index] = list;\n      lists.sort((a, b) => a.title.localeCompare(b.title));\n      store.account.set('lists', {\n        lists,\n        updatedAt: Date.now(),\n      });\n    }\n  }\n}\n\nexport function deleteListStore(listID) {\n  const { lists } = store.account.get('lists') || {};\n  if (lists?.length) {\n    const index = lists.findIndex((l) => l.id === listID);\n    if (index !== -1) {\n      lists.splice(index, 1);\n      store.account.set('lists', {\n        lists,\n        updatedAt: Date.now(),\n      });\n    }\n  }\n}\n","import { useEffect, useRef, useState } from 'preact/hooks';\n\nimport { api } from '../utils/api';\nimport { addListStore, deleteListStore, updateListStore } from '../utils/lists';\nimport supports from '../utils/supports';\n\nimport Icon from './icon';\nimport MenuConfirm from './menu-confirm';\n\nfunction ListAddEdit({ list, onClose }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const editMode = !!list;\n  const nameFieldRef = useRef();\n  const repliesPolicyFieldRef = useRef();\n  const exclusiveFieldRef = useRef();\n  useEffect(() => {\n    if (editMode) {\n      nameFieldRef.current.value = list.title;\n      repliesPolicyFieldRef.current.value = list.repliesPolicy;\n      if (exclusiveFieldRef.current) {\n        exclusiveFieldRef.current.checked = list.exclusive;\n      }\n    }\n  }, [editMode]);\n  const supportsExclusive = supports('@mastodon/list-exclusive');\n\n  return (\n    <div class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}{' '}\n      <header>\n        <h2>{editMode ? 'Edit list' : 'New list'}</h2>\n      </header>\n      <main>\n        <form\n          class=\"list-form\"\n          onSubmit={(e) => {\n            e.preventDefault(); // Get form values\n\n            const formData = new FormData(e.target);\n            const title = formData.get('title');\n            const repliesPolicy = formData.get('replies_policy');\n            const exclusive = formData.get('exclusive') === 'on';\n            console.log({\n              title,\n              repliesPolicy,\n              exclusive,\n            });\n            setUIState('loading');\n\n            (async () => {\n              try {\n                let listResult;\n\n                if (editMode) {\n                  listResult = await masto.v1.lists.$select(list.id).update({\n                    title,\n                    replies_policy: repliesPolicy,\n                    exclusive,\n                  });\n                } else {\n                  listResult = await masto.v1.lists.create({\n                    title,\n                    replies_policy: repliesPolicy,\n                    exclusive,\n                  });\n                }\n\n                console.log(listResult);\n                setUIState('default');\n                onClose?.({\n                  state: 'success',\n                  list: listResult,\n                });\n\n                setTimeout(() => {\n                  if (editMode) {\n                    updateListStore(listResult);\n                  } else {\n                    addListStore(listResult);\n                  }\n                }, 1);\n              } catch (e) {\n                console.error(e);\n                setUIState('error');\n                alert(\n                  editMode ? 'Unable to edit list.' : 'Unable to create list.',\n                );\n              }\n            })();\n          }}\n        >\n          <div class=\"list-form-row\">\n            <label for=\"list-title\">\n              Name{' '}\n              <input\n                ref={nameFieldRef}\n                type=\"text\"\n                id=\"list-title\"\n                name=\"title\"\n                required\n                disabled={uiState === 'loading'}\n                dir=\"auto\"\n              />\n            </label>\n          </div>\n          <div class=\"list-form-row\">\n            <select\n              ref={repliesPolicyFieldRef}\n              name=\"replies_policy\"\n              required\n              disabled={uiState === 'loading'}\n            >\n              <option value=\"list\">Show replies to list members</option>\n              <option value=\"followed\">Show replies to people I follow</option>\n              <option value=\"none\">Don't show replies</option>\n            </select>\n          </div>\n          {supportsExclusive && (\n            <div class=\"list-form-row\">\n              <label class=\"label-block\">\n                <input\n                  ref={exclusiveFieldRef}\n                  type=\"checkbox\"\n                  name=\"exclusive\"\n                  disabled={uiState === 'loading'}\n                />{' '}\n                Hide posts on this list from Home/Following\n              </label>\n            </div>\n          )}\n          <div class=\"list-form-footer\">\n            <button type=\"submit\" disabled={uiState === 'loading'}>\n              {editMode ? 'Save' : 'Create'}\n            </button>\n            {editMode && (\n              <MenuConfirm\n                disabled={uiState === 'loading'}\n                align=\"end\"\n                menuItemClassName=\"danger\"\n                confirmLabel=\"Delete this list?\"\n                onClick={() => {\n                  // const yes = confirm('Delete this list?');\n                  // if (!yes) return;\n                  setUIState('loading');\n\n                  (async () => {\n                    try {\n                      await masto.v1.lists.$select(list.id).remove();\n                      setUIState('default');\n                      onClose?.({\n                        state: 'deleted',\n                      });\n                      setTimeout(() => {\n                        deleteListStore(list.id);\n                      }, 1);\n                    } catch (e) {\n                      console.error(e);\n                      setUIState('error');\n                      alert('Unable to delete list.');\n                    }\n                  })();\n                }}\n              >\n                <button\n                  type=\"button\"\n                  class=\"light danger\"\n                  disabled={uiState === 'loading'}\n                >\n                  Delete…\n                </button>\n              </MenuConfirm>\n            )}\n          </div>\n        </form>\n      </main>\n    </div>\n  );\n}\n\nexport default ListAddEdit;\n","import './account-info.css';\n\nimport { MenuDivider, MenuItem } from '@szhsin/react-menu';\nimport {\n  useCallback,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n} from 'preact/hooks';\nimport punycode from 'punycode';\n\nimport { api } from '../utils/api';\nimport enhanceContent from '../utils/enhance-content';\nimport getHTMLText from '../utils/getHTMLText';\nimport handleContentLinks from '../utils/handle-content-links';\nimport { getLists } from '../utils/lists';\nimport niceDateTime from '../utils/nice-date-time';\nimport pmem from '../utils/pmem';\nimport shortenNumber from '../utils/shorten-number';\nimport showCompose from '../utils/show-compose';\nimport showToast from '../utils/show-toast';\nimport states, { hideAllModals } from '../utils/states';\nimport store from '../utils/store';\nimport { getCurrentAccountID, updateAccount } from '../utils/store-utils';\nimport supports from '../utils/supports';\n\nimport AccountBlock from './account-block';\nimport Avatar from './avatar';\nimport EmojiText from './emoji-text';\nimport Icon from './icon';\nimport Link from './link';\nimport ListAddEdit from './list-add-edit';\nimport Loader from './loader';\nimport Menu2 from './menu2';\nimport MenuConfirm from './menu-confirm';\nimport MenuLink from './menu-link';\nimport Modal from './modal';\nimport SubMenu2 from './submenu2';\nimport TranslationBlock from './translation-block';\n\nconst MUTE_DURATIONS = [\n  60 * 5, // 5 minutes\n  60 * 30, // 30 minutes\n  60 * 60, // 1 hour\n  60 * 60 * 6, // 6 hours\n  60 * 60 * 24, // 1 day\n  60 * 60 * 24 * 3, // 3 days\n  60 * 60 * 24 * 7, // 1 week\n  0, // forever\n];\nconst MUTE_DURATIONS_LABELS = {\n  0: 'Forever',\n  300: '5 minutes',\n  1_800: '30 minutes',\n  3_600: '1 hour',\n  21_600: '6 hours',\n  86_400: '1 day',\n  259_200: '3 days',\n  604_800: '1 week',\n};\n\nconst LIMIT = 80;\n\nconst ACCOUNT_INFO_MAX_AGE = 1000 * 60 * 10; // 10 mins\n\nfunction fetchFamiliarFollowers(currentID, masto) {\n  return masto.v1.accounts.familiarFollowers.fetch({\n    id: [currentID],\n  });\n}\nconst memFetchFamiliarFollowers = pmem(fetchFamiliarFollowers, {\n  maxAge: ACCOUNT_INFO_MAX_AGE,\n});\n\nasync function fetchPostingStats(accountID, masto) {\n  const fetchStatuses = masto.v1.accounts\n    .$select(accountID)\n    .statuses.list({\n      limit: 20,\n    })\n    .next();\n\n  const { value: statuses } = await fetchStatuses;\n  console.log('fetched statuses', statuses);\n  const stats = {\n    total: statuses.length,\n    originals: 0,\n    replies: 0,\n    boosts: 0,\n  };\n  // Categories statuses by type\n  // - Original posts (not replies to others)\n  // - Threads (self-replies + 1st original post)\n  // - Boosts (reblogs)\n  // - Replies (not-self replies)\n  statuses.forEach((status) => {\n    if (status.reblog) {\n      stats.boosts++;\n    } else if (\n      !!status.inReplyToId &&\n      status.inReplyToAccountId !== status.account.id // Not self-reply\n    ) {\n      stats.replies++;\n    } else {\n      stats.originals++;\n    }\n  });\n\n  // Count days since last post\n  if (statuses.length) {\n    stats.daysSinceLastPost = Math.ceil(\n      (Date.now() - new Date(statuses[statuses.length - 1].createdAt)) /\n        86400000,\n    );\n  }\n\n  console.log('posting stats', stats);\n  return stats;\n}\nconst memFetchPostingStats = pmem(fetchPostingStats, {\n  maxAge: ACCOUNT_INFO_MAX_AGE,\n});\n\nfunction AccountInfo({\n  account,\n  fetchAccount = () => {},\n  standalone,\n  instance,\n  authenticated,\n}) {\n  const { masto } = api({\n    instance,\n  });\n  const { masto: currentMasto, instance: currentInstance } = api();\n  const [uiState, setUIState] = useState('default');\n  const isString = typeof account === 'string';\n  const [info, setInfo] = useState(isString ? null : account);\n\n  const sameCurrentInstance = useMemo(\n    () => instance === currentInstance,\n    [instance, currentInstance],\n  );\n\n  useEffect(() => {\n    if (!isString) {\n      setInfo(account);\n      return;\n    }\n    setUIState('loading');\n    (async () => {\n      try {\n        const info = await fetchAccount();\n        states.accounts[`${info.id}@${instance}`] = info;\n        setInfo(info);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setInfo(null);\n        setUIState('error');\n      }\n    })();\n  }, [isString, account, fetchAccount]);\n\n  const {\n    acct,\n    avatar,\n    avatarStatic,\n    bot,\n    createdAt,\n    displayName,\n    emojis,\n    fields,\n    followersCount,\n    followingCount,\n    group,\n    // header,\n    // headerStatic,\n    id,\n    lastStatusAt,\n    locked,\n    note,\n    statusesCount,\n    url,\n    username,\n    memorial,\n    moved,\n    roles,\n    hideCollections,\n  } = info || {};\n  let headerIsAvatar = false;\n  let { header, headerStatic } = info || {};\n  if (!header || /missing\\.png$/.test(header)) {\n    if (avatar && !/missing\\.png$/.test(avatar)) {\n      header = avatar;\n      headerIsAvatar = true;\n      if (avatarStatic && !/missing\\.png$/.test(avatarStatic)) {\n        headerStatic = avatarStatic;\n      }\n    }\n  }\n\n  const isSelf = useMemo(() => id === getCurrentAccountID(), [id]);\n\n  useEffect(() => {\n    const infoHasEssentials = !!(\n      info?.id &&\n      info?.username &&\n      info?.acct &&\n      info?.avatar &&\n      info?.avatarStatic &&\n      info?.displayName &&\n      info?.url\n    );\n    if (isSelf && instance && infoHasEssentials) {\n      const accounts = store.local.getJSON('accounts');\n      let updated = false;\n      accounts.forEach((account) => {\n        if (account.info.id === info.id && account.instanceURL === instance) {\n          account.info = info;\n          updated = true;\n        }\n      });\n      if (updated) {\n        console.log('Updated account info', info);\n        store.local.setJSON('accounts', accounts);\n      }\n    }\n  }, [isSelf, info, instance]);\n\n  const accountInstance = useMemo(() => {\n    if (!url) return null;\n    const domain = punycode.toUnicode(new URL(url).hostname);\n    return domain;\n  }, [url]);\n\n  const [headerCornerColors, setHeaderCornerColors] = useState([]);\n\n  const followersIterator = useRef();\n  const familiarFollowersCache = useRef([]);\n  async function fetchFollowers(firstLoad) {\n    if (firstLoad || !followersIterator.current) {\n      followersIterator.current = masto.v1.accounts.$select(id).followers.list({\n        limit: LIMIT,\n      });\n    }\n    const results = await followersIterator.current.next();\n    if (isSelf) return results;\n    if (!sameCurrentInstance) return results;\n\n    const { value } = results;\n    let newValue = [];\n    // On first load, fetch familiar followers, merge to top of results' `value`\n    // Remove dups on every fetch\n    if (firstLoad) {\n      let familiarFollowers = [];\n      try {\n        familiarFollowers = await masto.v1.accounts.familiarFollowers.fetch({\n          id: [id],\n        });\n      } catch (e) {}\n      familiarFollowersCache.current = familiarFollowers?.[0]?.accounts || [];\n      newValue = [\n        ...familiarFollowersCache.current,\n        ...value.filter(\n          (account) =>\n            !familiarFollowersCache.current.some(\n              (familiar) => familiar.id === account.id,\n            ),\n        ),\n      ];\n    } else if (value?.length) {\n      newValue = value.filter(\n        (account) =>\n          !familiarFollowersCache.current.some(\n            (familiar) => familiar.id === account.id,\n          ),\n      );\n    }\n\n    return {\n      ...results,\n      value: newValue,\n    };\n  }\n\n  const followingIterator = useRef();\n  async function fetchFollowing(firstLoad) {\n    if (firstLoad || !followingIterator.current) {\n      followingIterator.current = masto.v1.accounts.$select(id).following.list({\n        limit: LIMIT,\n      });\n    }\n    const results = await followingIterator.current.next();\n    return results;\n  }\n\n  const LinkOrDiv = standalone ? 'div' : Link;\n  const accountLink = instance ? `/${instance}/a/${id}` : `/a/${id}`;\n\n  const [familiarFollowers, setFamiliarFollowers] = useState([]);\n  const [postingStats, setPostingStats] = useState();\n  const [postingStatsUIState, setPostingStatsUIState] = useState('default');\n  const hasPostingStats = !!postingStats?.total;\n\n  const renderFamiliarFollowers = async (currentID) => {\n    try {\n      const followers = await memFetchFamiliarFollowers(\n        currentID,\n        currentMasto,\n      );\n      console.log('fetched familiar followers', followers);\n      setFamiliarFollowers(\n        followers[0].accounts.slice(0, FAMILIAR_FOLLOWERS_LIMIT),\n      );\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const renderPostingStats = async () => {\n    if (!id) return;\n    setPostingStatsUIState('loading');\n    try {\n      const stats = await memFetchPostingStats(id, masto);\n      setPostingStats(stats);\n      setPostingStatsUIState('default');\n    } catch (e) {\n      console.error(e);\n      setPostingStatsUIState('error');\n    }\n  };\n\n  const onRelationshipChange = useCallback(\n    ({ relationship, currentID }) => {\n      if (!relationship.following) {\n        renderFamiliarFollowers(currentID);\n        if (!standalone && statusesCount > 0) {\n          // Only render posting stats if not standalone and has posts\n          renderPostingStats();\n        }\n      }\n    },\n    [standalone, id, statusesCount],\n  );\n\n  const onProfileUpdate = useCallback(\n    (newAccount) => {\n      if (newAccount.id === id) {\n        console.log('Updated account info', newAccount);\n        setInfo(newAccount);\n        states.accounts[`${newAccount.id}@${instance}`] = newAccount;\n      }\n    },\n    [id, instance],\n  );\n\n  return (\n    <div\n      tabIndex=\"-1\"\n      class={`account-container ${uiState === 'loading' ? 'skeleton' : ''}`}\n      style={{\n        '--header-color-1': headerCornerColors[0],\n        '--header-color-2': headerCornerColors[1],\n        '--header-color-3': headerCornerColors[2],\n        '--header-color-4': headerCornerColors[3],\n      }}\n    >\n      {uiState === 'error' && (\n        <div class=\"ui-state\">\n          <p>Unable to load account.</p>\n          <p>\n            <a\n              href={isString ? account : url}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Go to account page <Icon icon=\"external\" />\n            </a>\n          </p>\n        </div>\n      )}\n      {uiState === 'loading' ? (\n        <>\n          <header>\n            <AccountBlock avatarSize=\"xxxl\" skeleton />\n          </header>\n          <main>\n            <div class=\"note\">\n              <p>███████ ████ ████</p>\n              <p>████ ████████ ██████ █████████ ████ ██</p>\n            </div>\n            <div class=\"account-metadata-box\">\n              <div class=\"profile-metadata\">\n                <div class=\"profile-field\">\n                  <b class=\"more-insignificant\">███</b>\n                  <p>██████</p>\n                </div>\n                <div class=\"profile-field\">\n                  <b class=\"more-insignificant\">████</b>\n                  <p>███████████</p>\n                </div>\n              </div>\n              <div class=\"stats\">\n                <div>\n                  <span>██</span> Followers\n                </div>\n                <div>\n                  <span>██</span> Following\n                </div>\n                <div>\n                  <span>██</span> Posts\n                </div>\n              </div>\n            </div>\n            <div class=\"actions\">\n              <span />\n              <span class=\"buttons\">\n                <button type=\"button\" title=\"More\" class=\"plain\" disabled>\n                  <Icon icon=\"more\" size=\"l\" alt=\"More\" />\n                </button>\n              </span>\n            </div>\n          </main>\n        </>\n      ) : (\n        info && (\n          <>\n            {!!moved && (\n              <div class=\"account-moved\">\n                <p>\n                  <b>{displayName}</b> has indicated that their new account is\n                  now:\n                </p>\n                <AccountBlock\n                  account={moved}\n                  instance={instance}\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    states.showAccount = moved;\n                  }}\n                />\n              </div>\n            )}\n            {!!header && !/missing\\.png$/.test(header) && (\n              <img\n                src={header}\n                alt=\"\"\n                class={`header-banner ${\n                  headerIsAvatar ? 'header-is-avatar' : ''\n                }`}\n                onError={(e) => {\n                  if (e.target.crossOrigin) {\n                    if (e.target.src !== headerStatic) {\n                      e.target.src = headerStatic;\n                    } else {\n                      e.target.removeAttribute('crossorigin');\n                      e.target.src = header;\n                    }\n                  } else if (e.target.src !== headerStatic) {\n                    e.target.src = headerStatic;\n                  } else {\n                    e.target.remove();\n                  }\n                }}\n                crossOrigin=\"anonymous\"\n                onLoad={(e) => {\n                  e.target.classList.add('loaded');\n                  try {\n                    // Get color from four corners of image\n                    const canvas = window.OffscreenCanvas\n                      ? new OffscreenCanvas(1, 1)\n                      : document.createElement('canvas');\n                    const ctx = canvas.getContext('2d', {\n                      willReadFrequently: true,\n                    });\n                    canvas.width = e.target.width;\n                    canvas.height = e.target.height;\n                    ctx.imageSmoothingEnabled = false;\n                    ctx.drawImage(e.target, 0, 0);\n                    // const colors = [\n                    //   ctx.getImageData(0, 0, 1, 1).data,\n                    //   ctx.getImageData(e.target.width - 1, 0, 1, 1).data,\n                    //   ctx.getImageData(0, e.target.height - 1, 1, 1).data,\n                    //   ctx.getImageData(\n                    //     e.target.width - 1,\n                    //     e.target.height - 1,\n                    //     1,\n                    //     1,\n                    //   ).data,\n                    // ];\n                    // Get 10x10 pixels from corners, get average color from each\n                    const pixelDimension = 10;\n                    const colors = [\n                      ctx.getImageData(0, 0, pixelDimension, pixelDimension)\n                        .data,\n                      ctx.getImageData(\n                        e.target.width - pixelDimension,\n                        0,\n                        pixelDimension,\n                        pixelDimension,\n                      ).data,\n                      ctx.getImageData(\n                        0,\n                        e.target.height - pixelDimension,\n                        pixelDimension,\n                        pixelDimension,\n                      ).data,\n                      ctx.getImageData(\n                        e.target.width - pixelDimension,\n                        e.target.height - pixelDimension,\n                        pixelDimension,\n                        pixelDimension,\n                      ).data,\n                    ].map((data) => {\n                      let r = 0;\n                      let g = 0;\n                      let b = 0;\n                      let a = 0;\n                      for (let i = 0; i < data.length; i += 4) {\n                        r += data[i];\n                        g += data[i + 1];\n                        b += data[i + 2];\n                        a += data[i + 3];\n                      }\n                      const dataLength = data.length / 4;\n                      return [\n                        r / dataLength,\n                        g / dataLength,\n                        b / dataLength,\n                        a / dataLength,\n                      ];\n                    });\n                    const rgbColors = colors.map((color) => {\n                      const [r, g, b, a] = lightenRGB(color);\n                      return `rgba(${r}, ${g}, ${b}, ${a})`;\n                    });\n                    setHeaderCornerColors(rgbColors);\n                    console.log({ colors, rgbColors });\n                  } catch (e) {\n                    // Silently fail\n                  }\n                }}\n              />\n            )}\n            <header>\n              {standalone ? (\n                <Menu2\n                  shift={\n                    window.matchMedia('(min-width: calc(40em))').matches\n                      ? 114\n                      : 64\n                  }\n                  menuButton={\n                    <div>\n                      <AccountBlock\n                        account={info}\n                        instance={instance}\n                        avatarSize=\"xxxl\"\n                        onClick={() => {}}\n                      />\n                    </div>\n                  }\n                >\n                  <div class=\"szh-menu__header\">\n                    <AccountHandleInfo acct={acct} instance={instance} />\n                  </div>\n                  <MenuItem\n                    onClick={() => {\n                      const handle = `@${acct}`;\n                      try {\n                        navigator.clipboard.writeText(handle);\n                        showToast('Handle copied');\n                      } catch (e) {\n                        console.error(e);\n                        showToast('Unable to copy handle');\n                      }\n                    }}\n                  >\n                    <Icon icon=\"link\" />\n                    <span>Copy handle</span>\n                  </MenuItem>\n                  <MenuItem href={url} target=\"_blank\">\n                    <Icon icon=\"external\" />\n                    <span>Go to original profile page</span>\n                  </MenuItem>\n                  <MenuDivider />\n                  <MenuLink href={info.avatar} target=\"_blank\">\n                    <Icon icon=\"user\" />\n                    <span>View profile image</span>\n                  </MenuLink>\n                  <MenuLink href={info.header} target=\"_blank\">\n                    <Icon icon=\"media\" />\n                    <span>View profile header</span>\n                  </MenuLink>\n                </Menu2>\n              ) : (\n                <AccountBlock\n                  account={info}\n                  instance={instance}\n                  avatarSize=\"xxxl\"\n                  internal\n                />\n              )}\n            </header>\n            <div class=\"faux-header-bg\" aria-hidden=\"true\" />\n            <main>\n              {!!memorial && <span class=\"tag\">In Memoriam</span>}\n              {!!bot && (\n                <span class=\"tag\">\n                  <Icon icon=\"bot\" /> Automated\n                </span>\n              )}\n              {!!group && (\n                <span class=\"tag\">\n                  <Icon icon=\"group\" /> Group\n                </span>\n              )}\n              {roles?.map((role) => (\n                <span class=\"tag\">\n                  {role.name}\n                  {!!accountInstance && (\n                    <>\n                      {' '}\n                      <span class=\"more-insignificant\">{accountInstance}</span>\n                    </>\n                  )}\n                </span>\n              ))}\n              <div\n                class=\"note\"\n                dir=\"auto\"\n                onClick={handleContentLinks({\n                  instance: currentInstance,\n                })}\n                dangerouslySetInnerHTML={{\n                  __html: enhanceContent(note, { emojis }),\n                }}\n              />\n              <div class=\"account-metadata-box\">\n                {fields?.length > 0 && (\n                  <div class=\"profile-metadata\">\n                    {fields.map(({ name, value, verifiedAt }, i) => (\n                      <div\n                        class={`profile-field ${\n                          verifiedAt ? 'profile-verified' : ''\n                        }`}\n                        key={name + i}\n                        dir=\"auto\"\n                      >\n                        <b>\n                          <EmojiText text={name} emojis={emojis} />{' '}\n                          {!!verifiedAt && (\n                            <Icon icon=\"check-circle\" size=\"s\" />\n                          )}\n                        </b>\n                        <p\n                          dangerouslySetInnerHTML={{\n                            __html: enhanceContent(value, { emojis }),\n                          }}\n                        />\n                      </div>\n                    ))}\n                  </div>\n                )}\n                <div class=\"stats\">\n                  <LinkOrDiv\n                    tabIndex={0}\n                    to={accountLink}\n                    onClick={() => {\n                      // states.showAccount = false;\n                      setTimeout(() => {\n                        states.showGenericAccounts = {\n                          id: 'followers',\n                          heading: 'Followers',\n                          fetchAccounts: fetchFollowers,\n                          instance,\n                          excludeRelationshipAttrs: isSelf\n                            ? ['followedBy']\n                            : [],\n                          blankCopy: hideCollections\n                            ? 'This user has chosen to not make this information available.'\n                            : undefined,\n                        };\n                      }, 0);\n                    }}\n                  >\n                    {!!familiarFollowers.length && (\n                      <span class=\"shazam-container-horizontal\">\n                        <span class=\"shazam-container-inner stats-avatars-bunch\">\n                          {familiarFollowers.map((follower) => (\n                            <Avatar\n                              url={follower.avatarStatic}\n                              size=\"s\"\n                              alt={`${follower.displayName} @${follower.acct}`}\n                              squircle={follower?.bot}\n                            />\n                          ))}\n                        </span>\n                      </span>\n                    )}\n                    <span title={followersCount}>\n                      {shortenNumber(followersCount)}\n                    </span>{' '}\n                    Followers\n                  </LinkOrDiv>\n                  <LinkOrDiv\n                    class=\"insignificant\"\n                    tabIndex={0}\n                    to={accountLink}\n                    onClick={() => {\n                      // states.showAccount = false;\n                      setTimeout(() => {\n                        states.showGenericAccounts = {\n                          heading: 'Following',\n                          fetchAccounts: fetchFollowing,\n                          instance,\n                          excludeRelationshipAttrs: isSelf ? ['following'] : [],\n                          blankCopy: hideCollections\n                            ? 'This user has chosen to not make this information available.'\n                            : undefined,\n                        };\n                      }, 0);\n                    }}\n                  >\n                    <span title={followingCount}>\n                      {shortenNumber(followingCount)}\n                    </span>{' '}\n                    Following\n                    <br />\n                  </LinkOrDiv>\n                  <LinkOrDiv\n                    class=\"insignificant\"\n                    to={accountLink}\n                    // onClick={\n                    //   standalone\n                    //     ? undefined\n                    //     : () => {\n                    //         hideAllModals();\n                    //       }\n                    // }\n                  >\n                    <span title={statusesCount}>\n                      {shortenNumber(statusesCount)}\n                    </span>{' '}\n                    Posts\n                  </LinkOrDiv>\n                  {!!createdAt && (\n                    <div class=\"insignificant\">\n                      Joined{' '}\n                      <time datetime={createdAt}>\n                        {niceDateTime(createdAt, {\n                          hideTime: true,\n                        })}\n                      </time>\n                    </div>\n                  )}\n                </div>\n              </div>\n              {!!postingStats && (\n                <LinkOrDiv\n                  to={accountLink}\n                  class=\"account-metadata-box\"\n                  // onClick={() => {\n                  //   states.showAccount = false;\n                  // }}\n                >\n                  <div class=\"shazam-container\">\n                    <div class=\"shazam-container-inner\">\n                      {hasPostingStats ? (\n                        <div\n                          class=\"posting-stats\"\n                          title={`${Math.round(\n                            (postingStats.originals / postingStats.total) * 100,\n                          )}% original posts, ${Math.round(\n                            (postingStats.replies / postingStats.total) * 100,\n                          )}% replies, ${Math.round(\n                            (postingStats.boosts / postingStats.total) * 100,\n                          )}% boosts`}\n                        >\n                          <div>\n                            {postingStats.daysSinceLastPost < 365\n                              ? `Last ${postingStats.total} post${\n                                  postingStats.total > 1 ? 's' : ''\n                                } in the past \n                      ${postingStats.daysSinceLastPost} day${\n                                  postingStats.daysSinceLastPost > 1 ? 's' : ''\n                                }`\n                              : `\n                      Last ${postingStats.total} posts in the past year(s)\n                      `}\n                          </div>\n                          <div\n                            class=\"posting-stats-bar\"\n                            style={{\n                              // [originals | replies | boosts]\n                              '--originals-percentage': `${\n                                (postingStats.originals / postingStats.total) *\n                                100\n                              }%`,\n                              '--replies-percentage': `${\n                                ((postingStats.originals +\n                                  postingStats.replies) /\n                                  postingStats.total) *\n                                100\n                              }%`,\n                            }}\n                          />\n                          <div class=\"posting-stats-legends\">\n                            <span class=\"ib\">\n                              <span class=\"posting-stats-legend-item posting-stats-legend-item-originals\" />{' '}\n                              Original\n                            </span>{' '}\n                            <span class=\"ib\">\n                              <span class=\"posting-stats-legend-item posting-stats-legend-item-replies\" />{' '}\n                              Replies\n                            </span>{' '}\n                            <span class=\"ib\">\n                              <span class=\"posting-stats-legend-item posting-stats-legend-item-boosts\" />{' '}\n                              Boosts\n                            </span>\n                          </div>\n                        </div>\n                      ) : (\n                        <div class=\"posting-stats\">Post stats unavailable.</div>\n                      )}\n                    </div>\n                  </div>\n                </LinkOrDiv>\n              )}\n              {!moved && (\n                <div class=\"account-metadata-box\">\n                  <div\n                    class=\"shazam-container no-animation\"\n                    hidden={!!postingStats}\n                  >\n                    <div class=\"shazam-container-inner\">\n                      <button\n                        type=\"button\"\n                        class=\"posting-stats-button\"\n                        disabled={postingStatsUIState === 'loading'}\n                        onClick={() => {\n                          renderPostingStats();\n                        }}\n                      >\n                        <div\n                          class={`posting-stats-bar posting-stats-icon ${\n                            postingStatsUIState === 'loading' ? 'loading' : ''\n                          }`}\n                          style={{\n                            '--originals-percentage': '33%',\n                            '--replies-percentage': '66%',\n                          }}\n                        />\n                        View post stats{' '}\n                        {/* <Loader\n                        abrupt\n                        hidden={postingStatsUIState !== 'loading'}\n                      /> */}\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </main>\n            <footer>\n              <RelatedActions\n                info={info}\n                instance={instance}\n                standalone={standalone}\n                authenticated={authenticated}\n                onRelationshipChange={onRelationshipChange}\n                onProfileUpdate={onProfileUpdate}\n              />\n            </footer>\n          </>\n        )\n      )}\n    </div>\n  );\n}\n\nconst FAMILIAR_FOLLOWERS_LIMIT = 3;\n\nfunction RelatedActions({\n  info,\n  instance,\n  standalone,\n  authenticated,\n  onRelationshipChange = () => {},\n  onProfileUpdate = () => {},\n}) {\n  if (!info) return null;\n  const {\n    masto: currentMasto,\n    instance: currentInstance,\n    authenticated: currentAuthenticated,\n  } = api();\n  const sameInstance = instance === currentInstance;\n\n  const [relationshipUIState, setRelationshipUIState] = useState('default');\n  const [relationship, setRelationship] = useState(null);\n\n  const { id, acct, url, username, locked, lastStatusAt, note, fields, moved } =\n    info;\n  const accountID = useRef(id);\n\n  const {\n    following,\n    showingReblogs,\n    notifying,\n    followedBy,\n    blocking,\n    blockedBy,\n    muting,\n    mutingNotifications,\n    requested,\n    domainBlocking,\n    endorsed,\n    note: privateNote,\n  } = relationship || {};\n\n  const [currentInfo, setCurrentInfo] = useState(null);\n  const [isSelf, setIsSelf] = useState(false);\n\n  useEffect(() => {\n    if (info) {\n      const currentAccount = getCurrentAccountID();\n      let currentID;\n      (async () => {\n        if (sameInstance && authenticated) {\n          currentID = id;\n        } else if (!sameInstance && currentAuthenticated) {\n          // Grab this account from my logged-in instance\n          const acctHasInstance = info.acct.includes('@');\n          try {\n            const results = await currentMasto.v2.search.fetch({\n              q: acctHasInstance ? info.acct : `${info.username}@${instance}`,\n              type: 'accounts',\n              limit: 1,\n              resolve: true,\n            });\n            console.log('🥏 Fetched account from logged-in instance', results);\n            if (results.accounts.length) {\n              currentID = results.accounts[0].id;\n              setCurrentInfo(results.accounts[0]);\n            }\n          } catch (e) {\n            console.error(e);\n          }\n        }\n\n        if (!currentID) return;\n\n        if (currentAccount === currentID) {\n          // It's myself!\n          setIsSelf(true);\n          return;\n        }\n\n        accountID.current = currentID;\n\n        // if (moved) return;\n\n        setRelationshipUIState('loading');\n\n        const fetchRelationships = currentMasto.v1.accounts.relationships.fetch(\n          {\n            id: [currentID],\n          },\n        );\n\n        try {\n          const relationships = await fetchRelationships;\n          console.log('fetched relationship', relationships);\n          setRelationshipUIState('default');\n\n          if (relationships.length) {\n            const relationship = relationships[0];\n            setRelationship(relationship);\n            onRelationshipChange({ relationship, currentID });\n          }\n        } catch (e) {\n          console.error(e);\n          setRelationshipUIState('error');\n        }\n      })();\n    }\n  }, [info, authenticated]);\n\n  useEffect(() => {\n    if (info && isSelf) {\n      updateAccount(info);\n    }\n  }, [info, isSelf]);\n\n  const loading = relationshipUIState === 'loading';\n\n  const [showTranslatedBio, setShowTranslatedBio] = useState(false);\n  const [showAddRemoveLists, setShowAddRemoveLists] = useState(false);\n  const [showPrivateNoteModal, setShowPrivateNoteModal] = useState(false);\n  const [showEditProfile, setShowEditProfile] = useState(false);\n  const [lists, setLists] = useState([]);\n\n  return (\n    <>\n      <div class=\"actions\">\n        <span>\n          {followedBy ? (\n            <span class=\"tag\">Follows you</span>\n          ) : !!lastStatusAt ? (\n            <small class=\"insignificant\">\n              Last post:{' '}\n              <span class=\"ib\">\n                {niceDateTime(lastStatusAt, {\n                  hideTime: true,\n                })}\n              </span>\n            </small>\n          ) : (\n            <span />\n          )}\n          {muting && <span class=\"tag danger\">Muted</span>}\n          {blocking && <span class=\"tag danger\">Blocked</span>}\n        </span>{' '}\n        <span class=\"buttons\">\n          {!!privateNote && (\n            <button\n              type=\"button\"\n              class=\"private-note-tag\"\n              title=\"Private note\"\n              onClick={() => {\n                setShowPrivateNoteModal(true);\n              }}\n              dir=\"auto\"\n            >\n              <span>{privateNote}</span>\n            </button>\n          )}\n          <Menu2\n            portal={{\n              target: document.body,\n            }}\n            containerProps={{\n              style: {\n                // Higher than the backdrop\n                zIndex: 1001,\n              },\n            }}\n            align=\"center\"\n            position=\"anchor\"\n            overflow=\"auto\"\n            menuButton={\n              <button\n                type=\"button\"\n                title=\"More\"\n                class=\"plain\"\n                disabled={loading}\n              >\n                <Icon icon=\"more\" size=\"l\" alt=\"More\" />\n              </button>\n            }\n            onMenuChange={(e) => {\n              if (following && e.open) {\n                // Fetch lists that have this account\n                (async () => {\n                  try {\n                    const lists = await currentMasto.v1.accounts\n                      .$select(accountID.current)\n                      .lists.list();\n                    console.log('fetched account lists', lists);\n                    setLists(lists);\n                  } catch (e) {\n                    console.error(e);\n                  }\n                })();\n              }\n            }}\n          >\n            {currentAuthenticated && !isSelf && (\n              <>\n                <MenuItem\n                  onClick={() => {\n                    showCompose({\n                      draftStatus: {\n                        status: `@${currentInfo?.acct || acct} `,\n                      },\n                    });\n                  }}\n                >\n                  <Icon icon=\"at\" />\n                  <span>Mention @{username}</span>\n                </MenuItem>\n                <MenuItem\n                  onClick={() => {\n                    setShowTranslatedBio(true);\n                  }}\n                >\n                  <Icon icon=\"translate\" />\n                  <span>Translate bio</span>\n                </MenuItem>\n                {supports('@mastodon/profile-private-note') && (\n                  <MenuItem\n                    onClick={() => {\n                      setShowPrivateNoteModal(true);\n                    }}\n                  >\n                    <Icon icon=\"pencil\" />\n                    <span>\n                      {privateNote ? 'Edit private note' : 'Add private note'}\n                    </span>\n                  </MenuItem>\n                )}\n                {following && !!relationship && (\n                  <>\n                    <MenuItem\n                      onClick={() => {\n                        setRelationshipUIState('loading');\n                        (async () => {\n                          try {\n                            const rel = await currentMasto.v1.accounts\n                              .$select(accountID.current)\n                              .follow({\n                                notify: !notifying,\n                              });\n                            if (rel) setRelationship(rel);\n                            setRelationshipUIState('default');\n                            showToast(\n                              rel.notifying\n                                ? `Notifications enabled for @${username}'s posts.`\n                                : ` Notifications disabled for @${username}'s posts.`,\n                            );\n                          } catch (e) {\n                            alert(e);\n                            setRelationshipUIState('error');\n                          }\n                        })();\n                      }}\n                    >\n                      <Icon icon=\"notification\" />\n                      <span>\n                        {notifying\n                          ? 'Disable notifications'\n                          : 'Enable notifications'}\n                      </span>\n                    </MenuItem>\n                    <MenuItem\n                      onClick={() => {\n                        setRelationshipUIState('loading');\n                        (async () => {\n                          try {\n                            const rel = await currentMasto.v1.accounts\n                              .$select(accountID.current)\n                              .follow({\n                                reblogs: !showingReblogs,\n                              });\n                            if (rel) setRelationship(rel);\n                            setRelationshipUIState('default');\n                            showToast(\n                              rel.showingReblogs\n                                ? `Boosts from @${username} disabled.`\n                                : `Boosts from @${username} enabled.`,\n                            );\n                          } catch (e) {\n                            alert(e);\n                            setRelationshipUIState('error');\n                          }\n                        })();\n                      }}\n                    >\n                      <Icon icon=\"rocket\" />\n                      <span>\n                        {showingReblogs ? 'Disable boosts' : 'Enable boosts'}\n                      </span>\n                    </MenuItem>\n                  </>\n                )}\n                {/* Add/remove from lists is only possible if following the account */}\n                {following && (\n                  <MenuItem\n                    onClick={() => {\n                      setShowAddRemoveLists(true);\n                    }}\n                  >\n                    <Icon icon=\"list\" />\n                    {lists.length ? (\n                      <>\n                        <small class=\"menu-grow\">\n                          Add/Remove from Lists\n                          <br />\n                          <span class=\"more-insignificant\">\n                            {lists.map((list) => list.title).join(', ')}\n                          </span>\n                        </small>\n                        <small class=\"more-insignificant\">{lists.length}</small>\n                      </>\n                    ) : (\n                      <span>Add/Remove from Lists</span>\n                    )}\n                  </MenuItem>\n                )}\n                <MenuDivider />\n              </>\n            )}\n            <MenuItem\n              onClick={() => {\n                const handle = `@${currentInfo?.acct || acct}`;\n                try {\n                  navigator.clipboard.writeText(handle);\n                  showToast('Handle copied');\n                } catch (e) {\n                  console.error(e);\n                  showToast('Unable to copy handle');\n                }\n              }}\n            >\n              <Icon icon=\"copy\" />\n              <small>\n                Copy handle\n                <br />\n                <span class=\"more-insignificant\">\n                  @{currentInfo?.acct || acct}\n                </span>\n              </small>\n            </MenuItem>\n            <MenuItem href={url} target=\"_blank\">\n              <Icon icon=\"external\" />\n              <small class=\"menu-double-lines\">{niceAccountURL(url)}</small>\n            </MenuItem>\n            <div class=\"menu-horizontal\">\n              <MenuItem\n                onClick={() => {\n                  // Copy url to clipboard\n                  try {\n                    navigator.clipboard.writeText(url);\n                    showToast('Link copied');\n                  } catch (e) {\n                    console.error(e);\n                    showToast('Unable to copy link');\n                  }\n                }}\n              >\n                <Icon icon=\"link\" />\n                <span>Copy</span>\n              </MenuItem>\n              {navigator?.share &&\n                navigator?.canShare?.({\n                  url,\n                }) && (\n                  <MenuItem\n                    onClick={() => {\n                      try {\n                        navigator.share({\n                          url,\n                        });\n                      } catch (e) {\n                        console.error(e);\n                        alert(\"Sharing doesn't seem to work.\");\n                      }\n                    }}\n                  >\n                    <Icon icon=\"share\" />\n                    <span>Share…</span>\n                  </MenuItem>\n                )}\n            </div>\n            {!!relationship && (\n              <>\n                <MenuDivider />\n                {muting ? (\n                  <MenuItem\n                    onClick={() => {\n                      setRelationshipUIState('loading');\n                      (async () => {\n                        try {\n                          const newRelationship = await currentMasto.v1.accounts\n                            .$select(currentInfo?.id || id)\n                            .unmute();\n                          console.log('unmuting', newRelationship);\n                          setRelationship(newRelationship);\n                          setRelationshipUIState('default');\n                          showToast(`Unmuted @${username}`);\n                          states.reloadGenericAccounts.id = 'mute';\n                          states.reloadGenericAccounts.counter++;\n                        } catch (e) {\n                          console.error(e);\n                          setRelationshipUIState('error');\n                        }\n                      })();\n                    }}\n                  >\n                    <Icon icon=\"unmute\" />\n                    <span>Unmute @{username}</span>\n                  </MenuItem>\n                ) : (\n                  <SubMenu2\n                    menuClassName=\"menu-blur\"\n                    openTrigger=\"clickOnly\"\n                    direction=\"bottom\"\n                    overflow=\"auto\"\n                    shift={16}\n                    label={\n                      <>\n                        <Icon icon=\"mute\" />\n                        <span class=\"menu-grow\">Mute @{username}…</span>\n                        <span\n                          style={{\n                            textOverflow: 'clip',\n                          }}\n                        >\n                          <Icon icon=\"time\" />\n                          <Icon icon=\"chevron-right\" />\n                        </span>\n                      </>\n                    }\n                  >\n                    <div class=\"menu-wrap\">\n                      {MUTE_DURATIONS.map((duration) => (\n                        <MenuItem\n                          onClick={() => {\n                            setRelationshipUIState('loading');\n                            (async () => {\n                              try {\n                                const newRelationship =\n                                  await currentMasto.v1.accounts\n                                    .$select(currentInfo?.id || id)\n                                    .mute({\n                                      duration,\n                                    });\n                                console.log('muting', newRelationship);\n                                setRelationship(newRelationship);\n                                setRelationshipUIState('default');\n                                showToast(\n                                  `Muted @${username} for ${MUTE_DURATIONS_LABELS[duration]}`,\n                                );\n                                states.reloadGenericAccounts.id = 'mute';\n                                states.reloadGenericAccounts.counter++;\n                              } catch (e) {\n                                console.error(e);\n                                setRelationshipUIState('error');\n                                showToast(`Unable to mute @${username}`);\n                              }\n                            })();\n                          }}\n                        >\n                          {MUTE_DURATIONS_LABELS[duration]}\n                        </MenuItem>\n                      ))}\n                    </div>\n                  </SubMenu2>\n                )}\n                {followedBy && (\n                  <MenuConfirm\n                    subMenu\n                    menuItemClassName=\"danger\"\n                    confirmLabel={\n                      <>\n                        <Icon icon=\"user-x\" />\n                        <span>Remove @{username} from followers?</span>\n                      </>\n                    }\n                    onClick={() => {\n                      setRelationshipUIState('loading');\n                      (async () => {\n                        try {\n                          const newRelationship = await currentMasto.v1.accounts\n                            .$select(currentInfo?.id || id)\n                            .removeFromFollowers();\n                          console.log(\n                            'removing from followers',\n                            newRelationship,\n                          );\n                          setRelationship(newRelationship);\n                          setRelationshipUIState('default');\n                          showToast(`@${username} removed from followers`);\n                          states.reloadGenericAccounts.id = 'followers';\n                          states.reloadGenericAccounts.counter++;\n                        } catch (e) {\n                          console.error(e);\n                          setRelationshipUIState('error');\n                        }\n                      })();\n                    }}\n                  >\n                    <Icon icon=\"user-x\" />\n                    <span>Remove follower…</span>\n                  </MenuConfirm>\n                )}\n                <MenuConfirm\n                  subMenu\n                  confirm={!blocking}\n                  confirmLabel={\n                    <>\n                      <Icon icon=\"block\" />\n                      <span>Block @{username}?</span>\n                    </>\n                  }\n                  menuItemClassName=\"danger\"\n                  onClick={() => {\n                    // if (!blocking && !confirm(`Block @${username}?`)) {\n                    //   return;\n                    // }\n                    setRelationshipUIState('loading');\n                    (async () => {\n                      try {\n                        if (blocking) {\n                          const newRelationship = await currentMasto.v1.accounts\n                            .$select(currentInfo?.id || id)\n                            .unblock();\n                          console.log('unblocking', newRelationship);\n                          setRelationship(newRelationship);\n                          setRelationshipUIState('default');\n                          showToast(`Unblocked @${username}`);\n                        } else {\n                          const newRelationship = await currentMasto.v1.accounts\n                            .$select(currentInfo?.id || id)\n                            .block();\n                          console.log('blocking', newRelationship);\n                          setRelationship(newRelationship);\n                          setRelationshipUIState('default');\n                          showToast(`Blocked @${username}`);\n                        }\n                        states.reloadGenericAccounts.id = 'block';\n                        states.reloadGenericAccounts.counter++;\n                      } catch (e) {\n                        console.error(e);\n                        setRelationshipUIState('error');\n                        if (blocking) {\n                          showToast(`Unable to unblock @${username}`);\n                        } else {\n                          showToast(`Unable to block @${username}`);\n                        }\n                      }\n                    })();\n                  }}\n                >\n                  {blocking ? (\n                    <>\n                      <Icon icon=\"unblock\" />\n                      <span>Unblock @{username}</span>\n                    </>\n                  ) : (\n                    <>\n                      <Icon icon=\"block\" />\n                      <span>Block @{username}…</span>\n                    </>\n                  )}\n                </MenuConfirm>\n                <MenuItem\n                  className=\"danger\"\n                  onClick={() => {\n                    states.showReportModal = {\n                      account: currentInfo || info,\n                    };\n                  }}\n                >\n                  <Icon icon=\"flag\" />\n                  <span>Report @{username}…</span>\n                </MenuItem>\n              </>\n            )}\n            {currentAuthenticated &&\n              isSelf &&\n              standalone &&\n              supports('@mastodon/profile-edit') && (\n                <>\n                  <MenuDivider />\n                  <MenuItem\n                    onClick={() => {\n                      setShowEditProfile(true);\n                    }}\n                  >\n                    <Icon icon=\"pencil\" />\n                    <span>Edit profile</span>\n                  </MenuItem>\n                </>\n              )}\n            {import.meta.env.DEV && currentAuthenticated && isSelf && (\n              <>\n                <MenuDivider />\n                <MenuItem\n                  onClick={async () => {\n                    const relationships =\n                      await currentMasto.v1.accounts.relationships.fetch({\n                        id: [accountID.current],\n                      });\n                    const { note } = relationships[0] || {};\n                    if (note) {\n                      alert(note);\n                      console.log(note);\n                    }\n                  }}\n                >\n                  <Icon icon=\"pencil\" />\n                  <span>See note</span>\n                </MenuItem>\n              </>\n            )}\n          </Menu2>\n          {!relationship && relationshipUIState === 'loading' && (\n            <Loader abrupt />\n          )}\n          {!!relationship && !moved && (\n            <MenuConfirm\n              confirm={following || requested}\n              confirmLabel={\n                <span>\n                  {requested\n                    ? 'Withdraw follow request?'\n                    : `Unfollow @${info.acct || info.username}?`}\n                </span>\n              }\n              menuItemClassName=\"danger\"\n              align=\"end\"\n              disabled={loading}\n              onClick={() => {\n                setRelationshipUIState('loading');\n                (async () => {\n                  try {\n                    let newRelationship;\n\n                    if (following || requested) {\n                      // const yes = confirm(\n                      //   requested\n                      //     ? 'Withdraw follow request?'\n                      //     : `Unfollow @${info.acct || info.username}?`,\n                      // );\n\n                      // if (yes) {\n                      newRelationship = await currentMasto.v1.accounts\n                        .$select(accountID.current)\n                        .unfollow();\n                      // }\n                    } else {\n                      newRelationship = await currentMasto.v1.accounts\n                        .$select(accountID.current)\n                        .follow();\n                    }\n\n                    if (newRelationship) setRelationship(newRelationship);\n                    setRelationshipUIState('default');\n                  } catch (e) {\n                    alert(e);\n                    setRelationshipUIState('error');\n                  }\n                })();\n              }}\n            >\n              <button\n                type=\"button\"\n                class={`${following || requested ? 'light swap' : ''}`}\n                data-swap-state={following || requested ? 'danger' : ''}\n                disabled={loading}\n              >\n                {following ? (\n                  <>\n                    <span>Following</span>\n                    <span>Unfollow…</span>\n                  </>\n                ) : requested ? (\n                  <>\n                    <span>Requested</span>\n                    <span>Withdraw…</span>\n                  </>\n                ) : locked ? (\n                  <>\n                    <Icon icon=\"lock\" /> <span>Follow</span>\n                  </>\n                ) : (\n                  'Follow'\n                )}\n              </button>\n            </MenuConfirm>\n          )}\n        </span>\n      </div>\n      {!!showTranslatedBio && (\n        <Modal\n          onClose={() => {\n            setShowTranslatedBio(false);\n          }}\n        >\n          <TranslatedBioSheet\n            note={note}\n            fields={fields}\n            onClose={() => setShowTranslatedBio(false)}\n          />\n        </Modal>\n      )}\n      {!!showAddRemoveLists && (\n        <Modal\n          onClose={() => {\n            setShowAddRemoveLists(false);\n          }}\n        >\n          <AddRemoveListsSheet\n            accountID={accountID.current}\n            onClose={() => setShowAddRemoveLists(false)}\n          />\n        </Modal>\n      )}\n      {!!showPrivateNoteModal && (\n        <Modal\n          onClose={() => {\n            setShowPrivateNoteModal(false);\n          }}\n        >\n          <PrivateNoteSheet\n            account={info}\n            note={privateNote}\n            onRelationshipChange={(relationship) => {\n              setRelationship(relationship);\n              // onRelationshipChange({ relationship, currentID: accountID.current });\n            }}\n            onClose={() => setShowPrivateNoteModal(false)}\n          />\n        </Modal>\n      )}\n      {!!showEditProfile && (\n        <Modal\n          onClose={() => {\n            setShowEditProfile(false);\n          }}\n        >\n          <EditProfileSheet\n            onClose={({ state, account } = {}) => {\n              setShowEditProfile(false);\n              if (state === 'success' && account) {\n                onProfileUpdate(account);\n              }\n            }}\n          />\n        </Modal>\n      )}\n    </>\n  );\n}\n\n// Apply more alpha if high luminence\nfunction lightenRGB([r, g, b]) {\n  const luminence = 0.2126 * r + 0.7152 * g + 0.0722 * b;\n  console.log('luminence', luminence);\n  let alpha;\n  if (luminence >= 220) {\n    alpha = 1;\n  } else if (luminence <= 50) {\n    alpha = 0.1;\n  } else {\n    alpha = luminence / 255;\n  }\n  alpha = Math.min(1, alpha);\n  return [r, g, b, alpha];\n}\n\nfunction niceAccountURL(url) {\n  if (!url) return;\n  const urlObj = new URL(url);\n  const { host, pathname } = urlObj;\n  const path = pathname.replace(/\\/$/, '').replace(/^\\//, '');\n  return (\n    <>\n      <span class=\"more-insignificant\">{punycode.toUnicode(host)}/</span>\n      <wbr />\n      <span>{path}</span>\n    </>\n  );\n}\n\nfunction TranslatedBioSheet({ note, fields, onClose }) {\n  const fieldsText =\n    fields\n      ?.map(({ name, value }) => `${name}\\n${getHTMLText(value)}`)\n      .join('\\n\\n') || '';\n\n  const text = getHTMLText(note) + (fieldsText ? `\\n\\n${fieldsText}` : '');\n\n  return (\n    <div class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>Translated Bio</h2>\n      </header>\n      <main>\n        <p\n          style={{\n            whiteSpace: 'pre-wrap',\n          }}\n        >\n          {text}\n        </p>\n        <TranslationBlock forceTranslate text={text} />\n      </main>\n    </div>\n  );\n}\n\nfunction AddRemoveListsSheet({ accountID, onClose }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [lists, setLists] = useState([]);\n  const [listsContainingAccount, setListsContainingAccount] = useState([]);\n  const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const lists = await getLists();\n        setLists(lists);\n        const listsContainingAccount = await masto.v1.accounts\n          .$select(accountID)\n          .lists.list();\n        console.log({ lists, listsContainingAccount });\n        setListsContainingAccount(listsContainingAccount);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, [reloadCount]);\n\n  const [showListAddEditModal, setShowListAddEditModal] = useState(false);\n\n  return (\n    <div class=\"sheet\" id=\"list-add-remove-container\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>Add/Remove from Lists</h2>\n      </header>\n      <main>\n        {lists.length > 0 ? (\n          <ul class=\"list-add-remove\">\n            {lists.map((list) => {\n              const inList = listsContainingAccount.some(\n                (l) => l.id === list.id,\n              );\n              return (\n                <li>\n                  <button\n                    type=\"button\"\n                    class={`light ${inList ? 'checked' : ''}`}\n                    disabled={uiState === 'loading'}\n                    onClick={() => {\n                      setUIState('loading');\n                      (async () => {\n                        try {\n                          if (inList) {\n                            await masto.v1.lists\n                              .$select(list.id)\n                              .accounts.remove({\n                                accountIds: [accountID],\n                              });\n                          } else {\n                            await masto.v1.lists\n                              .$select(list.id)\n                              .accounts.create({\n                                accountIds: [accountID],\n                              });\n                          }\n                          // setUIState('default');\n                          reload();\n                        } catch (e) {\n                          console.error(e);\n                          setUIState('error');\n                          alert(\n                            inList\n                              ? 'Unable to remove from list.'\n                              : 'Unable to add to list.',\n                          );\n                        }\n                      })();\n                    }}\n                  >\n                    <Icon icon=\"check-circle\" />\n                    <span>{list.title}</span>\n                  </button>\n                </li>\n              );\n            })}\n          </ul>\n        ) : uiState === 'loading' ? (\n          <p class=\"ui-state\">\n            <Loader abrupt />\n          </p>\n        ) : uiState === 'error' ? (\n          <p class=\"ui-state\">Unable to load lists.</p>\n        ) : (\n          <p class=\"ui-state\">No lists.</p>\n        )}\n        <button\n          type=\"button\"\n          class=\"plain2\"\n          onClick={() => setShowListAddEditModal(true)}\n          disabled={uiState !== 'default'}\n        >\n          <Icon icon=\"plus\" size=\"l\" /> <span>New list</span>\n        </button>\n      </main>\n      {showListAddEditModal && (\n        <Modal\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowListAddEditModal(false);\n            }\n          }}\n        >\n          <ListAddEdit\n            list={showListAddEditModal?.list}\n            onClose={(result) => {\n              if (result.state === 'success') {\n                reload();\n              }\n              setShowListAddEditModal(false);\n            }}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nfunction PrivateNoteSheet({\n  account,\n  note: initialNote,\n  onRelationshipChange = () => {},\n  onClose = () => {},\n}) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const textareaRef = useRef(null);\n\n  useEffect(() => {\n    let timer;\n    if (textareaRef.current && !initialNote) {\n      timer = setTimeout(() => {\n        textareaRef.current.focus?.();\n      }, 100);\n    }\n    return () => {\n      clearTimeout(timer);\n    };\n  }, []);\n\n  return (\n    <div class=\"sheet\" id=\"private-note-container\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <b>Private note about @{account?.username || account?.acct}</b>\n      </header>\n      <main>\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const note = formData.get('note');\n            if (note?.trim() !== initialNote?.trim()) {\n              setUIState('loading');\n              (async () => {\n                try {\n                  const newRelationship = await masto.v1.accounts\n                    .$select(account?.id)\n                    .note.create({\n                      comment: note,\n                    });\n                  console.log('updated relationship', newRelationship);\n                  setUIState('default');\n                  onRelationshipChange(newRelationship);\n                  onClose();\n                } catch (e) {\n                  console.error(e);\n                  setUIState('error');\n                  alert(e?.message || 'Unable to update private note.');\n                }\n              })();\n            }\n          }}\n        >\n          <textarea\n            ref={textareaRef}\n            name=\"note\"\n            disabled={uiState === 'loading'}\n          >\n            {initialNote}\n          </textarea>\n          <footer>\n            <button\n              type=\"button\"\n              class=\"light\"\n              disabled={uiState === 'loading'}\n              onClick={() => {\n                onClose?.();\n              }}\n            >\n              Cancel\n            </button>\n            <span>\n              <Loader abrupt hidden={uiState !== 'loading'} />\n              <button disabled={uiState === 'loading'} type=\"submit\">\n                Save &amp; close\n              </button>\n            </span>\n          </footer>\n        </form>\n      </main>\n    </div>\n  );\n}\n\nfunction EditProfileSheet({ onClose = () => {} }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('loading');\n  const [account, setAccount] = useState(null);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const acc = await masto.v1.accounts.verifyCredentials();\n        setAccount(acc);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, []);\n\n  console.log('EditProfileSheet', account);\n  const { displayName, source } = account || {};\n  const { note, fields } = source || {};\n  const fieldsAttributesRef = useRef(null);\n\n  return (\n    <div class=\"sheet\" id=\"edit-profile-container\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <b>Edit profile</b>\n      </header>\n      <main>\n        {uiState === 'loading' ? (\n          <p class=\"ui-state\">\n            <Loader abrupt />\n          </p>\n        ) : (\n          <form\n            onSubmit={(e) => {\n              e.preventDefault();\n              const formData = new FormData(e.target);\n              const displayName = formData.get('display_name');\n              const note = formData.get('note');\n              const fieldsAttributesFields =\n                fieldsAttributesRef.current.querySelectorAll(\n                  'input[name^=\"fields_attributes\"]',\n                );\n              const fieldsAttributes = [];\n              fieldsAttributesFields.forEach((field) => {\n                const name = field.name;\n                const [_, index, key] =\n                  name.match(/fields_attributes\\[(\\d+)\\]\\[(.+)\\]/) || [];\n                const value = field.value ? field.value.trim() : '';\n                if (index && key && value) {\n                  if (!fieldsAttributes[index]) fieldsAttributes[index] = {};\n                  fieldsAttributes[index][key] = value;\n                }\n              });\n              // Fill in the blanks\n              fieldsAttributes.forEach((field) => {\n                if (field.name && !field.value) {\n                  field.value = '';\n                }\n              });\n\n              (async () => {\n                try {\n                  const newAccount = await masto.v1.accounts.updateCredentials({\n                    displayName,\n                    note,\n                    fieldsAttributes,\n                  });\n                  console.log('updated account', newAccount);\n                  onClose?.({\n                    state: 'success',\n                    account: newAccount,\n                  });\n                } catch (e) {\n                  console.error(e);\n                  alert(e?.message || 'Unable to update profile.');\n                }\n              })();\n            }}\n          >\n            <p>\n              <label>\n                Name{' '}\n                <input\n                  type=\"text\"\n                  name=\"display_name\"\n                  defaultValue={displayName}\n                  maxLength={30}\n                  disabled={uiState === 'loading'}\n                />\n              </label>\n            </p>\n            <p>\n              <label>\n                Bio\n                <textarea\n                  defaultValue={note}\n                  name=\"note\"\n                  maxLength={500}\n                  rows=\"5\"\n                  disabled={uiState === 'loading'}\n                />\n              </label>\n            </p>\n            {/* Table for fields; name and values are in fields, min 4 rows */}\n            <p>Extra fields</p>\n            <table ref={fieldsAttributesRef}>\n              <thead>\n                <tr>\n                  <th>Label</th>\n                  <th>Content</th>\n                </tr>\n              </thead>\n              <tbody>\n                {Array.from({ length: Math.max(4, fields.length) }).map(\n                  (_, i) => {\n                    const { name = '', value = '' } = fields[i] || {};\n                    return (\n                      <FieldsAttributesRow\n                        key={i}\n                        name={name}\n                        value={value}\n                        index={i}\n                        disabled={uiState === 'loading'}\n                      />\n                    );\n                  },\n                )}\n              </tbody>\n            </table>\n            <footer>\n              <button\n                type=\"button\"\n                class=\"light\"\n                disabled={uiState === 'loading'}\n                onClick={() => {\n                  onClose?.();\n                }}\n              >\n                Cancel\n              </button>\n              <button type=\"submit\" disabled={uiState === 'loading'}>\n                Save\n              </button>\n            </footer>\n          </form>\n        )}\n      </main>\n    </div>\n  );\n}\n\nfunction FieldsAttributesRow({ name, value, disabled, index: i }) {\n  const [hasValue, setHasValue] = useState(!!value);\n  return (\n    <tr>\n      <td>\n        <input\n          type=\"text\"\n          name={`fields_attributes[${i}][name]`}\n          defaultValue={name}\n          disabled={disabled}\n          maxLength={255}\n          required={hasValue}\n        />\n      </td>\n      <td>\n        <input\n          type=\"text\"\n          name={`fields_attributes[${i}][value]`}\n          defaultValue={value}\n          disabled={disabled}\n          maxLength={255}\n          onChange={(e) => setHasValue(!!e.currentTarget.value)}\n        />\n      </td>\n    </tr>\n  );\n}\n\nfunction AccountHandleInfo({ acct, instance }) {\n  // acct = username or username@server\n  let [username, server] = acct.split('@');\n  if (!server) server = instance;\n  return (\n    <div class=\"handle-info\">\n      <span class=\"handle-handle\">\n        <b class=\"handle-username\">{username}</b>\n        <span class=\"handle-at\">@</span>\n        <b class=\"handle-server\">{server}</b>\n      </span>\n      <div class=\"handle-legend\">\n        <span class=\"ib\">\n          <span class=\"handle-legend-icon username\" /> username\n        </span>{' '}\n        <span class=\"ib\">\n          <span class=\"handle-legend-icon server\" /> server domain name\n        </span>\n      </div>\n    </div>\n  );\n}\n\nexport default AccountInfo;\n","import { useEffect } from 'preact/hooks';\n\nimport { api } from '../utils/api';\nimport states from '../utils/states';\nimport useLocationChange from '../utils/useLocationChange';\n\nimport AccountInfo from './account-info';\nimport Icon from './icon';\n\nfunction AccountSheet({ account, instance: propInstance, onClose }) {\n  const { masto, instance, authenticated } = api({ instance: propInstance });\n  const isString = typeof account === 'string';\n\n  useEffect(() => {\n    if (!isString) {\n      states.accounts[`${account.id}@${instance}`] = account;\n    }\n  }, [account]);\n\n  useLocationChange(onClose);\n\n  return (\n    <div\n      class=\"sheet\"\n      // onClick={(e) => {\n      //   const accountBlock = e.target.closest('.account-block');\n      //   if (accountBlock) {\n      //     onClose({\n      //       destination: 'account-statuses',\n      //     });\n      //   }\n      // }}\n    >\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close outer\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <AccountInfo\n        instance={instance}\n        authenticated={authenticated}\n        account={account}\n        fetchAccount={async () => {\n          if (isString) {\n            try {\n              const info = await masto.v1.accounts.lookup({\n                acct: account,\n                skip_webfinger: false,\n              });\n              return info;\n            } catch (e) {\n              const result = await masto.v2.search.fetch({\n                q: account,\n                type: 'accounts',\n                limit: 1,\n                resolve: authenticated,\n              });\n              if (result.accounts.length) {\n                return result.accounts[0];\n              } else if (/https?:\\/\\/[^/]+\\/@/.test(account)) {\n                const accountURL = new URL(account);\n                const { hostname, pathname } = accountURL;\n                const acct =\n                  pathname.replace(/^\\//, '').replace(/\\/$/, '') +\n                  '@' +\n                  hostname;\n                const result = await masto.v2.search.fetch({\n                  q: acct,\n                  type: 'accounts',\n                  limit: 1,\n                  resolve: authenticated,\n                });\n                if (result.accounts.length) {\n                  return result.accounts[0];\n                }\n              }\n            }\n          } else {\n            return account;\n          }\n        }}\n      />\n    </div>\n  );\n}\n\nexport default AccountSheet;\n","import './drafts.css';\n\nimport { useEffect, useMemo, useReducer, useState } from 'react';\n\nimport { api } from '../utils/api';\nimport db from '../utils/db';\nimport niceDateTime from '../utils/nice-date-time';\nimport states from '../utils/states';\nimport { getCurrentAccountNS } from '../utils/store-utils';\n\nimport Icon from './icon';\nimport Loader from './loader';\nimport MenuConfirm from './menu-confirm';\n\nfunction Drafts({ onClose }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [drafts, setDrafts] = useState([]);\n  const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const keys = await db.drafts.keys();\n        if (keys.length) {\n          const ns = getCurrentAccountNS();\n          const ownKeys = keys.filter((key) => key.startsWith(ns));\n          if (ownKeys.length) {\n            const drafts = await db.drafts.getMany(ownKeys);\n            drafts.sort(\n              (a, b) =>\n                new Date(b.updatedAt).getTime() -\n                new Date(a.updatedAt).getTime(),\n            );\n            setDrafts(drafts);\n          } else {\n            setDrafts([]);\n          }\n        } else {\n          setDrafts([]);\n        }\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, [reloadCount]);\n\n  const hasDrafts = drafts?.length > 0;\n\n  return (\n    <div class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>\n          Unsent drafts <Loader abrupt hidden={uiState !== 'loading'} />\n        </h2>\n        {hasDrafts && (\n          <div class=\"insignificant\">\n            Looks like you have unsent drafts. Let's continue where you left\n            off.\n          </div>\n        )}\n      </header>\n      <main>\n        {hasDrafts ? (\n          <>\n            <ul class=\"drafts-list\">\n              {drafts.map((draft) => {\n                const { updatedAt, key, draftStatus, replyTo } = draft;\n                const updatedAtDate = new Date(updatedAt);\n                return (\n                  <li key={updatedAt}>\n                    <div class=\"mini-draft-meta\">\n                      <b>\n                        <Icon icon={replyTo ? 'reply' : 'quill'} size=\"s\" />{' '}\n                        <time>\n                          {!!replyTo && (\n                            <>\n                              @{replyTo.account.acct}\n                              <br />\n                            </>\n                          )}\n                          {niceDateTime(updatedAtDate)}\n                        </time>\n                      </b>\n                      <MenuConfirm\n                        confirmLabel={<span>Delete this draft?</span>}\n                        menuItemClassName=\"danger\"\n                        align=\"end\"\n                        disabled={uiState === 'loading'}\n                        onClick={() => {\n                          (async () => {\n                            try {\n                              // const yes = confirm('Delete this draft?');\n                              // if (yes) {\n                              await db.drafts.del(key);\n                              reload();\n                              // }\n                            } catch (e) {\n                              alert('Error deleting draft! Please try again.');\n                            }\n                          })();\n                        }}\n                      >\n                        <button\n                          type=\"button\"\n                          class=\"small light\"\n                          disabled={uiState === 'loading'}\n                        >\n                          Delete&hellip;\n                        </button>\n                      </MenuConfirm>\n                    </div>\n                    <button\n                      type=\"button\"\n                      disabled={uiState === 'loading'}\n                      class=\"draft-item\"\n                      onClick={async () => {\n                        // console.log({ draftStatus });\n                        let replyToStatus;\n                        if (replyTo) {\n                          setUIState('loading');\n                          try {\n                            replyToStatus = await masto.v1.statuses\n                              .$select(replyTo.id)\n                              .fetch();\n                          } catch (e) {\n                            console.error(e);\n                            alert('Error fetching reply-to status!');\n                            setUIState('default');\n                            return;\n                          }\n                          setUIState('default');\n                        }\n                        window.__COMPOSE__ = {\n                          draftStatus,\n                          replyToStatus,\n                        };\n                        states.showCompose = true;\n                        states.showDrafts = false;\n                      }}\n                    >\n                      <MiniDraft draft={draft} />\n                    </button>\n                  </li>\n                );\n              })}\n            </ul>\n            {drafts.length > 1 && (\n              <p>\n                <MenuConfirm\n                  confirmLabel={<span>Delete all drafts?</span>}\n                  menuItemClassName=\"danger\"\n                  disabled={uiState === 'loading'}\n                  onClick={() => {\n                    (async () => {\n                      // const yes = confirm('Delete all drafts?');\n                      // if (yes) {\n                      setUIState('loading');\n                      try {\n                        await db.drafts.delMany(\n                          drafts.map((draft) => draft.key),\n                        );\n                        setUIState('default');\n                        reload();\n                      } catch (e) {\n                        console.error(e);\n                        alert('Error deleting drafts! Please try again.');\n                        setUIState('error');\n                      }\n                      // }\n                    })();\n                  }}\n                >\n                  <button\n                    type=\"button\"\n                    class=\"light danger\"\n                    disabled={uiState === 'loading'}\n                  >\n                    Delete all&hellip;\n                  </button>\n                </MenuConfirm>\n              </p>\n            )}\n          </>\n        ) : (\n          <p>No drafts found.</p>\n        )}\n      </main>\n    </div>\n  );\n}\n\nfunction MiniDraft({ draft }) {\n  const { draftStatus, replyTo } = draft;\n  const { status, spoilerText, poll, mediaAttachments } = draftStatus;\n  const hasPoll = poll?.options?.length > 0;\n  const hasMedia = mediaAttachments?.length > 0;\n  const hasPollOrMedia = hasPoll || hasMedia;\n  const firstImageMedia = useMemo(() => {\n    if (!hasMedia) return;\n    const image = mediaAttachments.find((media) => /image/.test(media.type));\n    if (!image) return;\n    const { file } = image;\n    const objectURL = URL.createObjectURL(file);\n    return objectURL;\n  }, [hasMedia, mediaAttachments]);\n  return (\n    <>\n      <div class=\"mini-draft\">\n        {hasPollOrMedia && (\n          <div\n            class={`mini-draft-aside ${firstImageMedia ? 'has-image' : ''}`}\n            style={\n              firstImageMedia\n                ? {\n                    '--bg-image': `url(${firstImageMedia})`,\n                  }\n                : {}\n            }\n          >\n            {hasPoll && <Icon icon=\"poll\" />}\n            {hasMedia && (\n              <span>\n                <Icon icon=\"attachment\" />{' '}\n                <small>{mediaAttachments?.length}</small>\n              </span>\n            )}\n          </div>\n        )}\n        <div class=\"mini-draft-main\">\n          {!!spoilerText && <div class=\"mini-draft-spoiler\">{spoilerText}</div>}\n          {!!status && <div class=\"mini-draft-status\">{status}</div>}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Drafts;\n","import './embed-modal.css';\n\nimport Icon from './icon';\n\nfunction EmbedModal({ html, url, width, height, onClose = () => {} }) {\n  return (\n    <div class=\"embed-modal-container\">\n      <div class=\"top-controls\">\n        <button type=\"button\" class=\"light\" onClick={() => onClose()}>\n          <Icon icon=\"x\" />\n        </button>\n        {url && (\n          <a\n            href={url}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            class=\"button plain\"\n          >\n            <span>Open link</span> <Icon icon=\"external\" />\n          </a>\n        )}\n      </div>\n      <div\n        class=\"embed-content\"\n        dangerouslySetInnerHTML={{ __html: html }}\n        style={{\n          '--width': width + 'px',\n          '--height': height + 'px',\n          '--aspect-ratio': `${width}/${height}`,\n        }}\n      />\n    </div>\n  );\n}\n\nexport default EmbedModal;\n","import './generic-accounts.css';\n\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { InView } from 'react-intersection-observer';\nimport { useSnapshot } from 'valtio';\n\nimport { api } from '../utils/api';\nimport { fetchRelationships } from '../utils/relationships';\nimport states from '../utils/states';\nimport useLocationChange from '../utils/useLocationChange';\n\nimport AccountBlock from './account-block';\nimport Icon from './icon';\nimport Link from './link';\nimport Loader from './loader';\nimport Status from './status';\n\nexport default function GenericAccounts({\n  instance,\n  excludeRelationshipAttrs = [],\n  postID,\n  onClose = () => {},\n  blankCopy = 'Nothing to show',\n}) {\n  const { masto, instance: currentInstance } = api();\n  const isCurrentInstance = instance ? instance === currentInstance : true;\n  const snapStates = useSnapshot(states);\n  ``;\n  const [uiState, setUIState] = useState('default');\n  const [accounts, setAccounts] = useState([]);\n  const [showMore, setShowMore] = useState(false);\n\n  useLocationChange(onClose);\n\n  if (!snapStates.showGenericAccounts) {\n    return null;\n  }\n\n  const {\n    id,\n    heading,\n    fetchAccounts,\n    accounts: staticAccounts,\n    showReactions,\n  } = snapStates.showGenericAccounts;\n\n  const [relationshipsMap, setRelationshipsMap] = useState({});\n\n  const loadRelationships = async (accounts) => {\n    if (!accounts?.length) return;\n    if (!isCurrentInstance) return;\n    const relationships = await fetchRelationships(accounts, relationshipsMap);\n    if (relationships) {\n      setRelationshipsMap({\n        ...relationshipsMap,\n        ...relationships,\n      });\n    }\n  };\n\n  const loadAccounts = (firstLoad) => {\n    if (!fetchAccounts) return;\n    if (firstLoad) setAccounts([]);\n    setUIState('loading');\n    (async () => {\n      try {\n        const { done, value } = await fetchAccounts(firstLoad);\n        if (Array.isArray(value)) {\n          if (firstLoad) {\n            const accounts = [];\n            for (let i = 0; i < value.length; i++) {\n              const account = value[i];\n              const theAccount = accounts.find(\n                (a, j) => a.id === account.id && i !== j,\n              );\n              if (!theAccount) {\n                accounts.push({\n                  _types: [],\n                  ...account,\n                });\n              } else {\n                theAccount._types.push(...account._types);\n              }\n            }\n            setAccounts(accounts);\n          } else {\n            // setAccounts((prev) => [...prev, ...value]);\n            // Merge accounts by id and _types\n            setAccounts((prev) => {\n              const newAccounts = prev;\n              for (const account of value) {\n                const theAccount = newAccounts.find((a) => a.id === account.id);\n                if (!theAccount) {\n                  newAccounts.push(account);\n                } else {\n                  theAccount._types.push(...account._types);\n                }\n              }\n              return newAccounts;\n            });\n          }\n          setShowMore(!done);\n\n          loadRelationships(value);\n        } else {\n          setShowMore(false);\n        }\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  };\n\n  const firstLoad = useRef(true);\n  useEffect(() => {\n    if (staticAccounts?.length > 0) {\n      setAccounts(staticAccounts);\n      loadRelationships(staticAccounts);\n    } else {\n      loadAccounts(true);\n      firstLoad.current = false;\n    }\n  }, [staticAccounts, fetchAccounts]);\n\n  useEffect(() => {\n    if (firstLoad.current) return;\n    // reloadGenericAccounts contains value like {id: 'mute', counter: 1}\n    // We only need to reload if the id matches\n    if (snapStates.reloadGenericAccounts?.id === id) {\n      loadAccounts(true);\n    }\n  }, [snapStates.reloadGenericAccounts.counter]);\n\n  const post = states.statuses[postID];\n\n  return (\n    <div id=\"generic-accounts-container\" class=\"sheet\" tabindex=\"-1\">\n      <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n        <Icon icon=\"x\" />\n      </button>\n      <header>\n        <h2>{heading || 'Accounts'}</h2>\n      </header>\n      <main>\n        {post && (\n          <Link\n            to={`/${instance || currentInstance}/s/${post.id}`}\n            class=\"post-preview\"\n          >\n            <Status status={post} size=\"s\" readOnly />\n          </Link>\n        )}\n        {accounts.length > 0 ? (\n          <>\n            <ul class=\"accounts-list\">\n              {accounts.map((account) => {\n                const relationship = relationshipsMap[account.id];\n                const key = `${account.id}-${account._types?.length || ''}`;\n                return (\n                  <li key={key}>\n                    {showReactions && account._types?.length > 0 && (\n                      <div class=\"reactions-block\">\n                        {account._types.map((type) => (\n                          <Icon\n                            icon={\n                              {\n                                reblog: 'rocket',\n                                favourite: 'heart',\n                              }[type]\n                            }\n                            class={`${type}-icon`}\n                          />\n                        ))}\n                      </div>\n                    )}\n                    <div class=\"account-relationships\">\n                      <AccountBlock\n                        account={account}\n                        showStats\n                        relationship={relationship}\n                        excludeRelationshipAttrs={excludeRelationshipAttrs}\n                      />\n                    </div>\n                  </li>\n                );\n              })}\n            </ul>\n            {uiState === 'default' ? (\n              showMore ? (\n                <InView\n                  onChange={(inView) => {\n                    if (inView) {\n                      loadAccounts();\n                    }\n                  }}\n                >\n                  <button\n                    type=\"button\"\n                    class=\"plain block\"\n                    onClick={() => loadAccounts()}\n                  >\n                    Show more&hellip;\n                  </button>\n                </InView>\n              ) : (\n                <p class=\"ui-state insignificant\">The end.</p>\n              )\n            ) : (\n              uiState === 'loading' && (\n                <p class=\"ui-state\">\n                  <Loader abrupt />\n                </p>\n              )\n            )}\n          </>\n        ) : uiState === 'loading' ? (\n          <p class=\"ui-state\">\n            <Loader abrupt />\n          </p>\n        ) : uiState === 'error' ? (\n          <p class=\"ui-state\">Error loading accounts</p>\n        ) : (\n          <p class=\"ui-state insignificant\">{blankCopy}</p>\n        )}\n      </main>\n    </div>\n  );\n}\n","import { Menu, MenuItem } from '@szhsin/react-menu';\nimport { useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport getTranslateTargetLanguage from '../utils/get-translate-target-language';\nimport localeMatch from '../utils/locale-match';\nimport { speak, supportsTTS } from '../utils/speech';\nimport states from '../utils/states';\n\nimport Icon from './icon';\nimport Menu2 from './menu2';\nimport TranslationBlock from './translation-block';\n\nexport default function MediaAltModal({ alt, lang, onClose }) {\n  const snapStates = useSnapshot(states);\n  const [forceTranslate, setForceTranslate] = useState(false);\n  const targetLanguage = getTranslateTargetLanguage(true);\n  const contentTranslationHideLanguages =\n    snapStates.settings.contentTranslationHideLanguages || [];\n  const differentLanguage =\n    !!lang &&\n    lang !== targetLanguage &&\n    !localeMatch([lang], [targetLanguage]) &&\n    !contentTranslationHideLanguages.find(\n      (l) => lang === l || localeMatch([lang], [l]),\n    );\n\n  return (\n    <div class=\"sheet\" tabindex=\"-1\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close outer\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header class=\"header-grid\">\n        <h2>Media description</h2>\n        <div class=\"header-side\">\n          <Menu2\n            align=\"end\"\n            menuButton={\n              <button type=\"button\" class=\"plain4\">\n                <Icon icon=\"more\" alt=\"More\" size=\"xl\" />\n              </button>\n            }\n          >\n            <MenuItem\n              disabled={forceTranslate}\n              onClick={() => {\n                setForceTranslate(true);\n              }}\n            >\n              <Icon icon=\"translate\" />\n              <span>Translate</span>\n            </MenuItem>\n            {supportsTTS && (\n              <MenuItem\n                onClick={() => {\n                  speak(alt, lang);\n                }}\n              >\n                <Icon icon=\"speak\" />\n                <span>Speak</span>\n              </MenuItem>\n            )}\n          </Menu2>\n        </div>\n      </header>\n      <main lang={lang} dir=\"auto\">\n        <p\n          style={{\n            whiteSpace: 'pre-wrap',\n            textWrap: 'pretty',\n          }}\n        >\n          {alt}\n        </p>\n        {(differentLanguage || forceTranslate) && (\n          <TranslationBlock\n            forceTranslate={forceTranslate}\n            sourceLanguage={lang}\n            text={alt}\n          />\n        )}\n      </main>\n    </div>\n  );\n}\n","// https://gist.github.com/earthbound19/e7fe15fdf8ca3ef814750a61bc75b5ce\nfunction clamp(value, min, max) {\n  return Math.max(Math.min(value, max), min);\n}\n\nconst gammaToLinear = (c) =>\n  c >= 0.04045 ? Math.pow((c + 0.055) / 1.055, 2.4) : c / 12.92;\nconst linearToGamma = (c) =>\n  c >= 0.0031308 ? 1.055 * Math.pow(c, 1 / 2.4) - 0.055 : 12.92 * c;\n\nexport function rgb2oklab([r, g, b]) {\n  r = gammaToLinear(r / 255);\n  g = gammaToLinear(g / 255);\n  b = gammaToLinear(b / 255);\n  var l = 0.4122214708 * r + 0.5363325363 * g + 0.0514459929 * b;\n  var m = 0.2119034982 * r + 0.6806995451 * g + 0.1073969566 * b;\n  var s = 0.0883024619 * r + 0.2817188376 * g + 0.6299787005 * b;\n  l = Math.cbrt(l);\n  m = Math.cbrt(m);\n  s = Math.cbrt(s);\n  return [\n    l * +0.2104542553 + m * +0.793617785 + s * -0.0040720468,\n    l * +1.9779984951 + m * -2.428592205 + s * +0.4505937099,\n    l * +0.0259040371 + m * +0.7827717662 + s * -0.808675766,\n  ];\n}\n\nexport function oklab2rgb([L, a, b]) {\n  var l = L + a * +0.3963377774 + b * +0.2158037573;\n  var m = L + a * -0.1055613458 + b * -0.0638541728;\n  var s = L + a * -0.0894841775 + b * -1.291485548;\n  // The ** operator here cubes; same as l_*l_*l_ in the C++ example:\n  l = l ** 3;\n  m = m ** 3;\n  s = s ** 3;\n  var r = l * +4.0767416621 + m * -3.3077115913 + s * +0.2309699292;\n  var g = l * -1.2684380046 + m * +2.6097574011 + s * -0.3413193965;\n  var b = l * -0.0041960863 + m * -0.7034186147 + s * +1.707614701;\n  // Convert linear RGB values returned from oklab math to sRGB for our use before returning them:\n  r = 255 * linearToGamma(r);\n  g = 255 * linearToGamma(g);\n  b = 255 * linearToGamma(b);\n  // OPTION: clamp r g and b values to the range 0-255; but if you use the values immediately to draw, JavaScript clamps them on use:\n  r = clamp(r, 0, 255);\n  g = clamp(g, 0, 255);\n  b = clamp(b, 0, 255);\n  // OPTION: round the values. May not be necessary if you use them immediately for rendering in JavaScript, as JavaScript (also) discards decimals on render:\n  r = Math.round(r);\n  g = Math.round(g);\n  b = Math.round(b);\n  return [r, g, b];\n}\n","import { MenuDivider, MenuItem } from '@szhsin/react-menu';\nimport { getBlurHashAverageColor } from 'fast-blurhash';\nimport {\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\n\nimport { oklab2rgb, rgb2oklab } from '../utils/color-utils';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\n\nimport Icon from './icon';\nimport Link from './link';\nimport Media from './media';\nimport Menu2 from './menu2';\nimport MenuLink from './menu-link';\n\nconst { PHANPY_IMG_ALT_API_URL: IMG_ALT_API_URL } = import.meta.env;\n\nfunction MediaModal({\n  mediaAttachments,\n  statusID,\n  instance,\n  lang,\n  index = 0,\n  onClose = () => {},\n}) {\n  const [uiState, setUIState] = useState('default');\n  const carouselRef = useRef(null);\n\n  const [currentIndex, setCurrentIndex] = useState(index);\n  const carouselFocusItem = useRef(null);\n  useLayoutEffect(() => {\n    carouselFocusItem.current?.scrollIntoView();\n\n    // history.pushState({ mediaModal: true }, '');\n    // const handlePopState = (e) => {\n    //   if (e.state?.mediaModal) {\n    //     onClose();\n    //   }\n    // };\n    // window.addEventListener('popstate', handlePopState);\n    // return () => {\n    //   window.removeEventListener('popstate', handlePopState);\n    // };\n  }, []);\n  const prevStatusID = useRef(statusID);\n  useEffect(() => {\n    const scrollLeft = index * carouselRef.current.clientWidth;\n    const differentStatusID = prevStatusID.current !== statusID;\n    if (differentStatusID) prevStatusID.current = statusID;\n    carouselRef.current.scrollTo({\n      left: scrollLeft,\n      behavior: differentStatusID ? 'auto' : 'smooth',\n    });\n    carouselRef.current.focus();\n  }, [index, statusID]);\n\n  const [showControls, setShowControls] = useState(true);\n\n  useEffect(() => {\n    let handleSwipe = () => {\n      onClose();\n    };\n    if (carouselRef.current) {\n      carouselRef.current.addEventListener('swiped-down', handleSwipe);\n    }\n    return () => {\n      if (carouselRef.current) {\n        carouselRef.current.removeEventListener('swiped-down', handleSwipe);\n      }\n    };\n  }, []);\n\n  useHotkeys(\n    'esc',\n    onClose,\n    {\n      ignoreEventWhen: (e) => {\n        const hasModal = !!document.querySelector('#modal-container > *');\n        return hasModal;\n      },\n    },\n    [onClose],\n  );\n\n  useEffect(() => {\n    let handleScroll = () => {\n      const { clientWidth, scrollLeft } = carouselRef.current;\n      const index = Math.round(scrollLeft / clientWidth);\n      setCurrentIndex(index);\n    };\n    if (carouselRef.current) {\n      carouselRef.current.addEventListener('scroll', handleScroll, {\n        passive: true,\n      });\n    }\n    return () => {\n      if (carouselRef.current) {\n        carouselRef.current.removeEventListener('scroll', handleScroll);\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    let timer = setTimeout(() => {\n      carouselRef.current?.focus?.();\n    }, 100);\n    return () => clearTimeout(timer);\n  }, []);\n\n  const mediaAccentColors = useMemo(() => {\n    return mediaAttachments?.map((media) => {\n      const { blurhash } = media;\n      if (blurhash) {\n        const averageColor = getBlurHashAverageColor(blurhash);\n        const labAverageColor = rgb2oklab(averageColor);\n        return oklab2rgb([0.6, labAverageColor[1], labAverageColor[2]]);\n      }\n      return null;\n    });\n  }, [mediaAttachments]);\n  const mediaAccentGradient = useMemo(() => {\n    const gap = 5;\n    const range = 100 / mediaAccentColors.length;\n    return (\n      mediaAccentColors\n        ?.map((color, i) => {\n          const start = i * range + gap;\n          const end = (i + 1) * range - gap;\n          if (color) {\n            return `\n            rgba(${color?.join(',')}, 0.4) ${start}%,\n            rgba(${color?.join(',')}, 0.4) ${end}%\n          `;\n          }\n\n          return `\n            transparent ${start}%,\n            transparent ${end}%\n          `;\n        })\n        ?.join(', ') || 'transparent'\n    );\n  }, [mediaAccentColors]);\n\n  let toastRef = useRef(null);\n  useEffect(() => {\n    return () => {\n      toastRef.current?.hideToast?.();\n    };\n  }, []);\n\n  return (\n    <div\n      class={`media-modal-container media-modal-count-${mediaAttachments?.length}`}\n    >\n      <div\n        ref={carouselRef}\n        tabIndex=\"0\"\n        data-swipe-threshold=\"44\"\n        class=\"carousel\"\n        onClick={(e) => {\n          if (\n            e.target.classList.contains('carousel-item') ||\n            e.target.classList.contains('media') ||\n            e.target.classList.contains('media-zoom')\n          ) {\n            onClose();\n          }\n        }}\n        style={\n          mediaAttachments.length > 1\n            ? {\n                backgroundAttachment: 'local',\n                backgroundImage: `linear-gradient(\n            to right, ${mediaAccentGradient})`,\n              }\n            : {}\n        }\n      >\n        {mediaAttachments?.map((media, i) => {\n          const accentColor =\n            mediaAttachments.length === 1 ? mediaAccentColors[i] : null;\n          return (\n            <div\n              class=\"carousel-item\"\n              style={\n                accentColor\n                  ? {\n                      '--accent-color': `rgb(${accentColor?.join(',')})`,\n                      '--accent-alpha-color': `rgba(${accentColor?.join(\n                        ',',\n                      )}, 0.4)`,\n                    }\n                  : {}\n              }\n              tabindex=\"0\"\n              key={media.id}\n              ref={i === currentIndex ? carouselFocusItem : null}\n              onClick={(e) => {\n                // console.log(e);\n                // if (e.target !== e.currentTarget) {\n                //   setShowControls(!showControls);\n                // }\n                if (!e.target.classList.contains('media')) {\n                  setShowControls(!showControls);\n                }\n              }}\n            >\n              {!!media.description && (\n                <button\n                  type=\"button\"\n                  class=\"media-alt\"\n                  hidden={!showControls}\n                  onClick={() => {\n                    states.showMediaAlt = {\n                      alt: media.description,\n                      lang,\n                    };\n                  }}\n                >\n                  <span class=\"alt-badge\">ALT</span>\n                  <span class=\"media-alt-desc\" lang={lang} dir=\"auto\">\n                    {media.description}\n                  </span>\n                </button>\n              )}\n              <Media media={media} showOriginal lang={lang} />\n            </div>\n          );\n        })}\n      </div>\n      <div class=\"carousel-top-controls\" hidden={!showControls}>\n        <span>\n          <button\n            type=\"button\"\n            class=\"carousel-button\"\n            onClick={() => onClose()}\n          >\n            <Icon icon=\"x\" />\n          </button>\n        </span>\n        {mediaAttachments?.length > 1 ? (\n          <span class=\"carousel-dots\">\n            {mediaAttachments?.map((media, i) => (\n              <button\n                key={media.id}\n                type=\"button\"\n                disabled={i === currentIndex}\n                class={`carousel-dot ${i === currentIndex ? 'active' : ''}`}\n                onClick={(e) => {\n                  e.preventDefault();\n                  e.stopPropagation();\n                  carouselRef.current.scrollTo({\n                    left: carouselRef.current.clientWidth * i,\n                    behavior: 'smooth',\n                  });\n                  carouselRef.current.focus();\n                }}\n              >\n                <Icon icon=\"round\" size=\"s\" />\n              </button>\n            ))}\n          </span>\n        ) : (\n          <span />\n        )}\n        <span>\n          <Menu2\n            overflow=\"auto\"\n            align=\"end\"\n            position=\"anchor\"\n            gap={4}\n            menuClassName=\"glass-menu\"\n            menuButton={\n              <button type=\"button\" class=\"carousel-button\">\n                <Icon icon=\"more\" alt=\"More\" />\n              </button>\n            }\n          >\n            <MenuLink\n              href={\n                mediaAttachments[currentIndex]?.remoteUrl ||\n                mediaAttachments[currentIndex]?.url\n              }\n              class=\"carousel-button\"\n              target=\"_blank\"\n              title=\"Open original media in new window\"\n            >\n              <Icon icon=\"popout\" />\n              <span>Open original media</span>\n            </MenuLink>\n            {import.meta.env.DEV && // Only dev for now\n              !!states.settings.mediaAltGenerator &&\n              !!IMG_ALT_API_URL &&\n              !!mediaAttachments[currentIndex]?.url &&\n              !mediaAttachments[currentIndex]?.description &&\n              mediaAttachments[currentIndex]?.type === 'image' && (\n                <>\n                  <MenuDivider />\n                  <MenuItem\n                    disabled={uiState === 'loading'}\n                    onClick={() => {\n                      setUIState('loading');\n                      toastRef.current = showToast({\n                        text: 'Attempting to describe image. Please wait...',\n                        duration: -1,\n                      });\n                      (async function () {\n                        try {\n                          const response = await fetch(\n                            `${IMG_ALT_API_URL}?image=${encodeURIComponent(\n                              mediaAttachments[currentIndex]?.url,\n                            )}`,\n                          ).then((r) => r.json());\n                          states.showMediaAlt = {\n                            alt: response.description,\n                          };\n                        } catch (e) {\n                          console.error(e);\n                          showToast('Failed to describe image');\n                        } finally {\n                          setUIState('default');\n                          toastRef.current?.hideToast?.();\n                        }\n                      })();\n                    }}\n                  >\n                    <Icon icon=\"sparkles2\" />\n                    <span>Describe image…</span>\n                  </MenuItem>\n                </>\n              )}\n          </Menu2>{' '}\n          <Link\n            to={`${instance ? `/${instance}` : ''}/s/${statusID}${\n              window.matchMedia('(min-width: calc(40em + 350px))').matches\n                ? `?media=${currentIndex + 1}`\n                : ''\n            }`}\n            class=\"button carousel-button media-post-link\"\n            // onClick={() => {\n            //   // if small screen (not media query min-width 40em + 350px), run onClose\n            //   if (\n            //     !window.matchMedia('(min-width: calc(40em + 350px))').matches\n            //   ) {\n            //     onClose();\n            //   }\n            // }}\n          >\n            <span class=\"button-label\">View post </span>&raquo;\n          </Link>\n        </span>\n      </div>\n      {mediaAttachments?.length > 1 && (\n        <div class=\"carousel-controls\" hidden={!showControls}>\n          <button\n            type=\"button\"\n            class=\"carousel-button\"\n            hidden={currentIndex === 0}\n            onClick={(e) => {\n              e.preventDefault();\n              e.stopPropagation();\n              carouselRef.current.focus();\n              carouselRef.current.scrollTo({\n                left: carouselRef.current.clientWidth * (currentIndex - 1),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"arrow-left\" />\n          </button>\n          <button\n            type=\"button\"\n            class=\"carousel-button\"\n            hidden={currentIndex === mediaAttachments.length - 1}\n            onClick={(e) => {\n              e.preventDefault();\n              e.stopPropagation();\n              carouselRef.current.focus();\n              carouselRef.current.scrollTo({\n                left: carouselRef.current.clientWidth * (currentIndex + 1),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"arrow-right\" />\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default MediaModal;\n","import './report-modal.css';\n\nimport { Fragment } from 'preact';\nimport { useMemo, useRef, useState } from 'preact/hooks';\n\nimport { api } from '../utils/api';\nimport showToast from '../utils/show-toast';\nimport { getCurrentInstance } from '../utils/store-utils';\n\nimport AccountBlock from './account-block';\nimport Icon from './icon';\nimport Loader from './loader';\nimport Status from './status';\n\n// NOTE: `dislike` hidden for now, it's actually not used for reporting\n// Mastodon shows another screen for unfollowing, muting or blocking instead of reporting\n\nconst CATEGORIES = [, /*'dislike'*/ 'spam', 'legal', 'violation', 'other'];\n// `violation` will be set if there are `rule_ids[]`\n\nconst CATEGORIES_INFO = {\n  // dislike: {\n  //   label: 'Dislike',\n  //   description: 'Not something you want to see',\n  // },\n  spam: {\n    label: 'Spam',\n    description: 'Malicious links, fake engagement, or repetitive replies',\n  },\n  legal: {\n    label: 'Illegal',\n    description: \"Violates the law of your or the server's country\",\n  },\n  violation: {\n    label: 'Server rule violation',\n    description: 'Breaks specific server rules',\n    stampLabel: 'Violation',\n  },\n  other: {\n    label: 'Other',\n    description: \"Issue doesn't fit other categories\",\n    excludeStamp: true,\n  },\n};\n\nfunction ReportModal({ account, post, onClose }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [username, domain] = account.acct.split('@');\n\n  const [rules, currentDomain] = useMemo(() => {\n    const { rules, domain } = getCurrentInstance();\n    return [rules || [], domain];\n  });\n\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const [showRules, setShowRules] = useState(false);\n\n  const rulesRef = useRef(null);\n  const [hasRules, setHasRules] = useState(false);\n\n  return (\n    <div class=\"report-modal-container\">\n      <div class=\"top-controls\">\n        <h1>{post ? 'Report Post' : `Report @${username}`}</h1>\n        <button\n          type=\"button\"\n          class=\"plain4 small\"\n          disabled={uiState === 'loading'}\n          onClick={() => onClose()}\n        >\n          <Icon icon=\"x\" size=\"xl\" />\n        </button>\n      </div>\n      <main>\n        <div class=\"report-preview\">\n          {post ? (\n            <Status status={post} size=\"s\" previewMode />\n          ) : (\n            <AccountBlock\n              account={account}\n              avatarSize=\"xxl\"\n              useAvatarStatic\n              showStats\n              showActivity\n            />\n          )}\n        </div>\n        {!!selectedCategory &&\n          !CATEGORIES_INFO[selectedCategory].excludeStamp && (\n            <span\n              class=\"rubber-stamp\"\n              key={selectedCategory}\n              aria-hidden=\"true\"\n            >\n              {CATEGORIES_INFO[selectedCategory].stampLabel ||\n                CATEGORIES_INFO[selectedCategory].label}\n              <small>Pending review</small>\n            </span>\n          )}\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n\n            const formData = new FormData(e.target);\n            const entries = Object.fromEntries(formData.entries());\n            console.log('ENTRIES', entries);\n\n            let { category, comment, forward } = entries;\n            if (!comment) comment = undefined;\n            if (forward === 'on') forward = true;\n            const ruleIds =\n              category === 'violation'\n                ? Object.entries(entries)\n                    .filter(([key]) => key.startsWith('rule_ids'))\n                    .map(([key, value]) => value)\n                : undefined;\n\n            const params = {\n              category,\n              comment,\n              forward,\n              ruleIds,\n            };\n            console.log('PARAMS', params);\n\n            setUIState('loading');\n            (async () => {\n              try {\n                await masto.v1.reports.create({\n                  accountId: account.id,\n                  statusIds: post?.id ? [post.id] : undefined,\n                  category,\n                  comment,\n                  ruleIds,\n                  forward,\n                });\n                setUIState('success');\n                showToast(post ? 'Post reported' : 'Profile reported');\n                onClose();\n              } catch (error) {\n                console.error(error);\n                setUIState('error');\n                showToast(\n                  error?.message ||\n                    (post\n                      ? 'Unable to report post'\n                      : 'Unable to report profile'),\n                );\n              }\n            })();\n          }}\n        >\n          <p>\n            {post\n              ? `What's the issue with this post?`\n              : `What's the issue with this profile?`}\n          </p>\n          <section class=\"report-categories\">\n            {CATEGORIES.map((category) =>\n              category === 'violation' && !rules?.length ? null : (\n                <Fragment key={category}>\n                  <label class=\"report-category\">\n                    <input\n                      type=\"radio\"\n                      name=\"category\"\n                      value={category}\n                      required\n                      disabled={uiState === 'loading'}\n                      onChange={(e) => {\n                        setSelectedCategory(e.target.value);\n                        setShowRules(e.target.value === 'violation');\n                      }}\n                    />\n                    <span>\n                      {CATEGORIES_INFO[category].label} &nbsp;\n                      <small class=\"ib insignificant\">\n                        {CATEGORIES_INFO[category].description}\n                      </small>\n                    </span>\n                  </label>\n                  {category === 'violation' && !!rules?.length && (\n                    <div\n                      class=\"shazam-container no-animation\"\n                      hidden={!showRules}\n                    >\n                      <div class=\"shazam-container-inner\">\n                        <div class=\"report-rules\" ref={rulesRef}>\n                          {rules.map((rule, i) => (\n                            <label class=\"report-rule\" key={rule.id}>\n                              <input\n                                type=\"checkbox\"\n                                name={`rule_ids[${i}]`}\n                                value={rule.id}\n                                required={showRules && !hasRules}\n                                disabled={uiState === 'loading'}\n                                onChange={(e) => {\n                                  const { checked } = e.target;\n                                  if (checked) {\n                                    setHasRules(true);\n                                  } else {\n                                    const checkedInputs =\n                                      rulesRef.current.querySelectorAll(\n                                        'input:checked',\n                                      );\n                                    if (!checkedInputs.length) {\n                                      setHasRules(false);\n                                    }\n                                  }\n                                }}\n                              />\n                              <span>{rule.text}</span>\n                            </label>\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </Fragment>\n              ),\n            )}\n          </section>\n          <section class=\"report-comment\">\n            <p>\n              <label for=\"report-comment\">Additional info</label>\n            </p>\n            <textarea\n              maxlength=\"1000\"\n              rows=\"1\"\n              name=\"comment\"\n              id=\"report-comment\"\n              disabled={uiState === 'loading'}\n            />\n          </section>\n          {!!domain && domain !== currentDomain && (\n            <section>\n              <p>\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    switch\n                    name=\"forward\"\n                    disabled={uiState === 'loading'}\n                  />{' '}\n                  <span>\n                    Forward to <i>{domain}</i>\n                  </span>\n                </label>\n              </p>\n            </section>\n          )}\n          <footer>\n            <button type=\"submit\" disabled={uiState === 'loading'}>\n              Send Report\n            </button>{' '}\n            <button\n              type=\"submit\"\n              class=\"plain2\"\n              disabled={uiState === 'loading'}\n              onClick={async () => {\n                try {\n                  await masto.v1.accounts.$select(account.id).mute(); // Infinite duration\n                  showToast(`Muted ${username}`);\n                } catch (e) {\n                  console.error(e);\n                  showToast(`Unable to mute ${username}`);\n                }\n                // onSubmit will still run\n              }}\n            >\n              Send Report <small class=\"ib\">+ Mute profile</small>\n            </button>{' '}\n            <button\n              type=\"submit\"\n              class=\"plain2\"\n              disabled={uiState === 'loading'}\n              onClick={async () => {\n                try {\n                  await masto.v1.accounts.$select(account.id).block();\n                  showToast(`Blocked ${username}`);\n                } catch (e) {\n                  console.error(e);\n                  showToast(`Unable to block ${username}`);\n                }\n                // onSubmit will still run\n              }}\n            >\n              Send Report <small class=\"ib\">+ Block profile</small>\n            </button>\n            <Loader hidden={uiState !== 'loading'} />\n          </footer>\n        </form>\n      </main>\n    </div>\n  );\n}\n\nexport default ReportModal;\n","export default \"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20fill='none'%20viewBox='0%200%2084%2062'%3e%3crect%20width='64'%20height='48'%20x='18'%20y='2'%20fill='%23fff'%20stroke='%23999'%20stroke-width='3'%20rx='4'/%3e%3crect%20width='32'%20height='48'%20x='2'%20y='12'%20fill='%23fff'%20stroke='%23999'%20stroke-width='3'%20rx='4'/%3e%3cpath%20fill='%234169E1'%20d='M14%2052a4%204%200%201%201-8%200%204%204%200%200%201%208%200Zm64-42a4%204%200%201%201-8%200%204%204%200%200%201%208%200Z'/%3e%3c/svg%3e\"","export default \"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20fill='none'%20viewBox='0%200%2082%2062'%3e%3crect%20width='78'%20height='58'%20x='2'%20y='2'%20fill='%23999'%20fill-opacity='.3'%20stroke='%23999'%20stroke-width='3'%20rx='4'/%3e%3crect%20width='18'%20height='46'%20x='8'%20y='8'%20fill='%23fff'%20stroke='%23999'%20stroke-width='2'%20rx='1'/%3e%3crect%20width='18'%20height='46'%20x='32'%20y='8'%20fill='%23fff'%20stroke='%23999'%20stroke-width='2'%20rx='1'/%3e%3crect%20width='18'%20height='46'%20x='56'%20y='8'%20fill='%23fff'%20stroke='%23999'%20stroke-width='2'%20rx='1'/%3e%3c/svg%3e\"","export default \"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20fill='none'%20viewBox='0%200%2084%2062'%3e%3crect%20width='64'%20height='48'%20x='18'%20y='2'%20fill='%23fff'%20stroke='%23999'%20stroke-width='3'%20rx='4'/%3e%3cpath%20fill='%23999'%20fill-opacity='.3'%20d='M19%203h62v10H19z'/%3e%3cpath%20stroke='%234169E1'%20stroke-width='2'%20d='M43%208a2%202%200%201%201-4%200%202%202%200%200%201%204%200Z'/%3e%3cpath%20stroke='%23999'%20stroke-width='2'%20d='M52%208a2%202%200%201%201-4%200%202%202%200%200%201%204%200Zm9%200a2%202%200%201%201-4%200%202%202%200%200%201%204%200Z'/%3e%3crect%20width='32'%20height='48'%20x='2'%20y='12'%20fill='%23fff'%20stroke='%23999'%20stroke-width='3'%20rx='4'/%3e%3cpath%20fill='%23999'%20fill-opacity='.3'%20d='M3%2049h30v10H3z'/%3e%3cpath%20stroke='%234169E1'%20stroke-width='2'%20d='M11%2054a2%202%200%201%201-4%200%202%202%200%200%201%204%200Z'/%3e%3cpath%20stroke='%23999'%20stroke-width='2'%20d='M20%2054a2%202%200%201%201-4%200%202%202%200%200%201%204%200Zm9%200a2%202%200%201%201-4%200%202%202%200%200%201%204%200Z'/%3e%3c/svg%3e\"","import { api } from '../utils/api';\nimport store from '../utils/store';\n\nconst LIMIT = 200;\nconst MAX_FETCH = 10;\n\nexport async function fetchFollowedTags() {\n  const { masto } = api();\n  const iterator = masto.v1.followedTags.list({\n    limit: LIMIT,\n  });\n  const tags = [];\n  let fetchCount = 0;\n  do {\n    const { value, done } = await iterator.next();\n    if (done || value?.length === 0) break;\n    tags.push(...value);\n    fetchCount++;\n  } while (fetchCount < MAX_FETCH);\n  tags.sort((a, b) => a.name.localeCompare(b.name));\n  console.log(tags);\n\n  if (tags.length) {\n    setTimeout(() => {\n      // Save to local storage, with saved timestamp\n      store.account.set('followedTags', {\n        tags,\n        updatedAt: Date.now(),\n      });\n    }, 1);\n  }\n\n  return tags;\n}\n\nconst MAX_AGE = 24 * 60 * 60 * 1000; // 1 day\nexport async function getFollowedTags() {\n  try {\n    const { tags, updatedAt } = store.account.get('followedTags') || {};\n    if (!tags?.length) return await fetchFollowedTags();\n    if (Date.now() - updatedAt > MAX_AGE) {\n      // Stale-while-revalidate\n      fetchFollowedTags();\n      return tags;\n    }\n    return tags;\n  } catch (e) {\n    return [];\n  }\n}\n\nconst fauxDiv = document.createElement('div');\nexport const extractTagsFromStatus = (content) => {\n  if (!content) return [];\n  if (content.indexOf('#') === -1) return [];\n  fauxDiv.innerHTML = content;\n  const hashtagLinks = fauxDiv.querySelectorAll('a.hashtag');\n  if (!hashtagLinks.length) return [];\n  return Array.from(hashtagLinks).map((a) =>\n    a.innerText.trim().replace(/^[^#]*#+/, ''),\n  );\n};\n","import { useEffect, useState } from 'preact/hooks';\n\nfunction AsyncText({ children }) {\n  if (typeof children === 'string') return children;\n  const [text, setText] = useState('');\n  useEffect(() => {\n    Promise.resolve(children).then(setText);\n  }, [children]);\n  return text;\n}\n\nexport default AsyncText;\n","import './shortcuts-settings.css';\n\nimport { useAutoAnimate } from '@formkit/auto-animate/preact';\nimport {\n  compressToEncodedURIComponent,\n  decompressFromEncodedURIComponent,\n} from 'lz-string';\nimport { useEffect, useMemo, useRef, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport floatingButtonUrl from '../assets/floating-button.svg';\nimport multiColumnUrl from '../assets/multi-column.svg';\nimport tabMenuBarUrl from '../assets/tab-menu-bar.svg';\n\nimport { api } from '../utils/api';\nimport { fetchFollowedTags } from '../utils/followed-tags';\nimport { getLists, getListTitle } from '../utils/lists';\nimport pmem from '../utils/pmem';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\nimport store from '../utils/store';\nimport { getCurrentAccountID } from '../utils/store-utils';\n\nimport AsyncText from './AsyncText';\nimport Icon from './icon';\nimport MenuConfirm from './menu-confirm';\nimport Modal from './modal';\n\nexport const SHORTCUTS_LIMIT = 9;\n\nconst TYPES = [\n  'following',\n  'mentions',\n  'notifications',\n  'list',\n  'public',\n  'trending',\n  'search',\n  'hashtag',\n  'bookmarks',\n  'favourites',\n  // NOTE: Hide for now\n  // 'account-statuses', // Need @acct search first\n];\nconst TYPE_TEXT = {\n  following: 'Home / Following',\n  notifications: 'Notifications',\n  list: 'Lists',\n  public: 'Public (Local / Federated)',\n  search: 'Search',\n  'account-statuses': 'Account',\n  bookmarks: 'Bookmarks',\n  favourites: 'Likes',\n  hashtag: 'Hashtag',\n  trending: 'Trending',\n  mentions: 'Mentions',\n};\nconst TYPE_PARAMS = {\n  list: [\n    {\n      text: 'List ID',\n      name: 'id',\n      notRequired: true,\n    },\n  ],\n  public: [\n    {\n      text: 'Local only',\n      name: 'local',\n      type: 'checkbox',\n    },\n    {\n      text: 'Instance',\n      name: 'instance',\n      type: 'text',\n      placeholder: 'Optional, e.g. mastodon.social',\n      notRequired: true,\n    },\n  ],\n  trending: [\n    {\n      text: 'Instance',\n      name: 'instance',\n      type: 'text',\n      placeholder: 'Optional, e.g. mastodon.social',\n      notRequired: true,\n    },\n  ],\n  search: [\n    {\n      text: 'Search term',\n      name: 'query',\n      type: 'text',\n      placeholder: 'Optional, unless for multi-column mode',\n      notRequired: true,\n    },\n  ],\n  'account-statuses': [\n    {\n      text: '@',\n      name: 'id',\n      type: 'text',\n      placeholder: 'cheeaun@mastodon.social',\n    },\n  ],\n  hashtag: [\n    {\n      text: '#',\n      name: 'hashtag',\n      type: 'text',\n      placeholder: 'e.g. PixelArt (Max 5, space-separated)',\n      pattern: '[^#]+',\n    },\n    {\n      text: 'Media only',\n      name: 'media',\n      type: 'checkbox',\n    },\n    {\n      text: 'Instance',\n      name: 'instance',\n      type: 'text',\n      placeholder: 'Optional, e.g. mastodon.social',\n      notRequired: true,\n    },\n  ],\n};\nconst fetchAccountTitle = pmem(async ({ id }) => {\n  const account = await api().masto.v1.accounts.$select(id).fetch();\n  return account.username || account.acct || account.displayName;\n});\nexport const SHORTCUTS_META = {\n  following: {\n    id: 'home',\n    title: (_, index) => (index === 0 ? 'Home' : 'Following'),\n    path: '/',\n    icon: 'home',\n  },\n  mentions: {\n    id: 'mentions',\n    title: 'Mentions',\n    path: '/mentions',\n    icon: 'at',\n  },\n  notifications: {\n    id: 'notifications',\n    title: 'Notifications',\n    path: '/notifications',\n    icon: 'notification',\n  },\n  list: {\n    id: ({ id }) => (id ? 'list' : 'lists'),\n    title: ({ id }) => (id ? getListTitle(id) : 'Lists'),\n    path: ({ id }) => (id ? `/l/${id}` : '/l'),\n    icon: 'list',\n    excludeViewMode: ({ id }) => (!id ? ['multi-column'] : []),\n  },\n  public: {\n    id: 'public',\n    title: ({ local }) => (local ? 'Local' : 'Federated'),\n    subtitle: ({ instance }) => instance || api().instance,\n    path: ({ local, instance }) => `/${instance}/p${local ? '/l' : ''}`,\n    icon: ({ local }) => (local ? 'building' : 'earth'),\n  },\n  trending: {\n    id: 'trending',\n    title: 'Trending',\n    subtitle: ({ instance }) => instance || api().instance,\n    path: ({ instance }) => `/${instance}/trending`,\n    icon: 'chart',\n  },\n  search: {\n    id: 'search',\n    title: ({ query }) => (query ? `“${query}”` : 'Search'),\n    path: ({ query }) =>\n      query\n        ? `/search?q=${encodeURIComponent(query)}&type=statuses`\n        : '/search',\n    icon: 'search',\n    excludeViewMode: ({ query }) => (!query ? ['multi-column'] : []),\n  },\n  'account-statuses': {\n    id: 'account-statuses',\n    title: fetchAccountTitle,\n    path: ({ id }) => `/a/${id}`,\n    icon: 'user',\n  },\n  bookmarks: {\n    id: 'bookmarks',\n    title: 'Bookmarks',\n    path: '/b',\n    icon: 'bookmark',\n  },\n  favourites: {\n    id: 'favourites',\n    title: 'Likes',\n    path: '/f',\n    icon: 'heart',\n  },\n  hashtag: {\n    id: 'hashtag',\n    title: ({ hashtag }) => hashtag,\n    subtitle: ({ instance }) => instance || api().instance,\n    path: ({ hashtag, instance, media }) =>\n      `${instance ? `/${instance}` : ''}/t/${hashtag.split(/\\s+/).join('+')}${\n        media ? '?media=1' : ''\n      }`,\n    icon: 'hashtag',\n  },\n};\n\nfunction ShortcutsSettings({ onClose }) {\n  const snapStates = useSnapshot(states);\n  const { shortcuts } = snapStates;\n  const [showForm, setShowForm] = useState(false);\n  const [showImportExport, setShowImportExport] = useState(false);\n\n  const [shortcutsListParent] = useAutoAnimate();\n\n  return (\n    <div id=\"shortcuts-settings-container\" class=\"sheet\" tabindex=\"-1\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>\n          <Icon icon=\"shortcut\" /> Shortcuts{' '}\n          <sup\n            style={{\n              fontSize: 12,\n              opacity: 0.5,\n              textTransform: 'uppercase',\n            }}\n          >\n            beta\n          </sup>\n        </h2>\n      </header>\n      <main>\n        <p>Specify a list of shortcuts that'll appear&nbsp;as:</p>\n        <div class=\"shortcuts-view-mode\">\n          {[\n            {\n              value: 'float-button',\n              label: 'Floating button',\n              imgURL: floatingButtonUrl,\n            },\n            {\n              value: 'tab-menu-bar',\n              label: 'Tab/Menu bar',\n              imgURL: tabMenuBarUrl,\n            },\n            {\n              value: 'multi-column',\n              label: 'Multi-column',\n              imgURL: multiColumnUrl,\n            },\n          ].map(({ value, label, imgURL }) => {\n            const checked =\n              snapStates.settings.shortcutsViewMode === value ||\n              (value === 'float-button' &&\n                !snapStates.settings.shortcutsViewMode);\n            return (\n              <label key={value} class={checked ? 'checked' : ''}>\n                <input\n                  type=\"radio\"\n                  name=\"shortcuts-view-mode\"\n                  value={value}\n                  checked={checked}\n                  onChange={(e) => {\n                    states.settings.shortcutsViewMode = e.target.value;\n                  }}\n                />{' '}\n                <img src={imgURL} alt=\"\" width=\"80\" height=\"58\" />{' '}\n                <span>{label}</span>\n              </label>\n            );\n          })}\n        </div>\n        {shortcuts.length > 0 ? (\n          <>\n            <ol class=\"shortcuts-list\" ref={shortcutsListParent}>\n              {shortcuts.filter(Boolean).map((shortcut, i) => {\n                // const key = i + Object.values(shortcut);\n                const key = Object.values(shortcut).join('-');\n                const { type } = shortcut;\n                if (!SHORTCUTS_META[type]) return null;\n                let { icon, title, subtitle, excludeViewMode } =\n                  SHORTCUTS_META[type];\n                if (typeof title === 'function') {\n                  title = title(shortcut, i);\n                }\n                if (typeof subtitle === 'function') {\n                  subtitle = subtitle(shortcut, i);\n                }\n                if (typeof icon === 'function') {\n                  icon = icon(shortcut, i);\n                }\n                if (typeof excludeViewMode === 'function') {\n                  excludeViewMode = excludeViewMode(shortcut, i);\n                }\n                const excludedViewMode = excludeViewMode?.includes(\n                  snapStates.settings.shortcutsViewMode,\n                );\n                return (\n                  <li key={key}>\n                    <Icon icon={icon} />\n                    <span class=\"shortcut-text\">\n                      <AsyncText>{title}</AsyncText>\n                      {subtitle && (\n                        <>\n                          {' '}\n                          <small class=\"ib insignificant\">{subtitle}</small>\n                        </>\n                      )}\n                      {excludedViewMode && (\n                        <span class=\"tag\">\n                          Not available in current view mode\n                        </span>\n                      )}\n                    </span>\n                    <span class=\"shortcut-actions\">\n                      <button\n                        type=\"button\"\n                        class=\"plain small\"\n                        disabled={i === 0}\n                        onClick={() => {\n                          const shortcutsArr = Array.from(states.shortcuts);\n                          if (i > 0) {\n                            const temp = states.shortcuts[i - 1];\n                            shortcutsArr[i - 1] = shortcut;\n                            shortcutsArr[i] = temp;\n                            states.shortcuts = shortcutsArr;\n                          }\n                        }}\n                      >\n                        <Icon icon=\"arrow-up\" alt=\"Move up\" />\n                      </button>\n                      <button\n                        type=\"button\"\n                        class=\"plain small\"\n                        disabled={i === shortcuts.length - 1}\n                        onClick={() => {\n                          const shortcutsArr = Array.from(states.shortcuts);\n                          if (i < states.shortcuts.length - 1) {\n                            const temp = states.shortcuts[i + 1];\n                            shortcutsArr[i + 1] = shortcut;\n                            shortcutsArr[i] = temp;\n                            states.shortcuts = shortcutsArr;\n                          }\n                        }}\n                      >\n                        <Icon icon=\"arrow-down\" alt=\"Move down\" />\n                      </button>\n                      <button\n                        type=\"button\"\n                        class=\"plain small\"\n                        onClick={() => {\n                          setShowForm({\n                            shortcut,\n                            shortcutIndex: i,\n                          });\n                        }}\n                      >\n                        <Icon icon=\"pencil\" alt=\"Edit\" />\n                      </button>\n                      {/* <button\n                      type=\"button\"\n                      class=\"plain small\"\n                      onClick={() => {\n                        states.shortcuts.splice(i, 1);\n                      }}\n                    >\n                      <Icon icon=\"x\" alt=\"Remove\" />\n                    </button> */}\n                    </span>\n                  </li>\n                );\n              })}\n            </ol>\n            {shortcuts.length === 1 &&\n              snapStates.settings.shortcutsViewMode !== 'float-button' && (\n                <div class=\"ui-state insignificant\">\n                  <Icon icon=\"info\" />{' '}\n                  <small>\n                    Add more than one shortcut/column to make this work.\n                  </small>\n                </div>\n              )}\n          </>\n        ) : (\n          <div class=\"ui-state insignificant\">\n            <p>\n              {snapStates.settings.shortcutsViewMode === 'multi-column'\n                ? 'No columns yet. Tap on the Add column button.'\n                : 'No shortcuts yet. Tap on the Add shortcut button.'}\n            </p>\n            <p>\n              Not sure what to add?\n              <br />\n              Try adding{' '}\n              <a\n                href=\"#\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  states.shortcuts = [\n                    {\n                      type: 'following',\n                    },\n                    {\n                      type: 'notifications',\n                    },\n                  ];\n                }}\n              >\n                Home / Following and Notifications\n              </a>{' '}\n              first.\n            </p>\n          </div>\n        )}\n        <p class=\"insignificant\">\n          {shortcuts.length >= SHORTCUTS_LIMIT &&\n            (snapStates.settings.shortcutsViewMode === 'multi-column'\n              ? `Max ${SHORTCUTS_LIMIT} columns`\n              : `Max ${SHORTCUTS_LIMIT} shortcuts`)}\n        </p>\n        <p\n          style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n          }}\n        >\n          <button\n            type=\"button\"\n            class=\"light\"\n            onClick={() => setShowImportExport(true)}\n          >\n            Import/export\n          </button>\n          <button\n            type=\"button\"\n            disabled={shortcuts.length >= SHORTCUTS_LIMIT}\n            onClick={() => setShowForm(true)}\n          >\n            <Icon icon=\"plus\" />{' '}\n            <span>\n              {snapStates.settings.shortcutsViewMode === 'multi-column'\n                ? 'Add column…'\n                : 'Add shortcut…'}\n            </span>\n          </button>\n        </p>\n      </main>\n      {showForm && (\n        <Modal\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowForm(false);\n            }\n          }}\n        >\n          <ShortcutForm\n            shortcut={showForm.shortcut}\n            shortcutIndex={showForm.shortcutIndex}\n            onSubmit={({ result, mode }) => {\n              console.log('onSubmit', result);\n              if (mode === 'edit') {\n                states.shortcuts[showForm.shortcutIndex] = result;\n              } else {\n                states.shortcuts.push(result);\n              }\n            }}\n            onClose={() => setShowForm(false)}\n          />\n        </Modal>\n      )}\n      {showImportExport && (\n        <Modal\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowImportExport(false);\n            }\n          }}\n        >\n          <ImportExport\n            shortcuts={shortcuts}\n            onClose={() => setShowImportExport(false)}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nconst FORM_NOTES = {\n  list: `Specific list is optional. For multi-column mode, list is required, else the column will not be shown.`,\n  search: `For multi-column mode, search term is required, else the column will not be shown.`,\n  hashtag: 'Multiple hashtags are supported. Space-separated.',\n};\n\nfunction ShortcutForm({\n  onSubmit,\n  disabled,\n  shortcut,\n  shortcutIndex,\n  onClose,\n}) {\n  console.log('shortcut', shortcut);\n  const editMode = !!shortcut;\n  const [currentType, setCurrentType] = useState(shortcut?.type || null);\n  const { masto } = api();\n\n  const [uiState, setUIState] = useState('default');\n  const [lists, setLists] = useState([]);\n  const [followedHashtags, setFollowedHashtags] = useState([]);\n  useEffect(() => {\n    (async () => {\n      if (currentType !== 'list') return;\n      try {\n        setUIState('loading');\n        const lists = await getLists();\n        setLists(lists);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n\n    (async () => {\n      if (currentType !== 'hashtag') return;\n      try {\n        const tags = await fetchFollowedTags();\n        setFollowedHashtags(tags);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [currentType]);\n\n  const formRef = useRef();\n  useEffect(() => {\n    if (editMode && currentType && TYPE_PARAMS[currentType]) {\n      // Populate form\n      const form = formRef.current;\n      TYPE_PARAMS[currentType].forEach(({ name, type }) => {\n        const input = form.querySelector(`[name=\"${name}\"]`);\n        if (input && shortcut[name]) {\n          if (type === 'checkbox') {\n            input.checked = shortcut[name] === 'on' ? true : false;\n          } else {\n            input.value = shortcut[name];\n          }\n        }\n      });\n    }\n  }, [editMode, currentType]);\n\n  return (\n    <div id=\"shortcut-settings-form\" class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>{editMode ? 'Edit' : 'Add'} shortcut</h2>\n      </header>\n      <main tabindex=\"-1\">\n        <form\n          ref={formRef}\n          onSubmit={(e) => {\n            // Construct a nice object from form\n            e.preventDefault();\n            const data = new FormData(e.target);\n            const result = {};\n            data.forEach((value, key) => {\n              result[key] = value?.trim();\n              if (key === 'instance') {\n                // Remove protocol and trailing slash\n                result[key] = result[key]\n                  .replace(/^https?:\\/\\//, '')\n                  .replace(/\\/+$/, '');\n                // Remove @acct@ or acct@ from instance URL\n                result[key] = result[key].replace(/^@?[^@]+@/, '');\n              }\n            });\n            console.log('result', result);\n            if (!result.type) return;\n            onSubmit({\n              result,\n              mode: editMode ? 'edit' : 'add',\n            });\n            // Reset\n            e.target.reset();\n            setCurrentType(null);\n            onClose?.();\n          }}\n        >\n          <p>\n            <label>\n              <span>Timeline</span>\n              <select\n                required\n                disabled={disabled}\n                onChange={(e) => {\n                  setCurrentType(e.target.value);\n                }}\n                defaultValue={editMode ? shortcut.type : undefined}\n                name=\"type\"\n              >\n                <option></option>\n                {TYPES.map((type) => (\n                  <option value={type}>{TYPE_TEXT[type]}</option>\n                ))}\n              </select>\n            </label>\n          </p>\n          {TYPE_PARAMS[currentType]?.map?.(\n            ({ text, name, type, placeholder, pattern, notRequired }) => {\n              if (currentType === 'list') {\n                return (\n                  <p>\n                    <label>\n                      <span>List</span>\n                      <select\n                        name=\"id\"\n                        required={!notRequired}\n                        disabled={disabled || uiState === 'loading'}\n                        defaultValue={editMode ? shortcut.id : undefined}\n                      >\n                        <option value=\"\"></option>\n                        {lists.map((list) => (\n                          <option value={list.id}>{list.title}</option>\n                        ))}\n                      </select>\n                    </label>\n                  </p>\n                );\n              }\n\n              return (\n                <p>\n                  <label>\n                    <span>{text}</span>{' '}\n                    <input\n                      type={type}\n                      switch={type === 'checkbox' || undefined}\n                      name={name}\n                      placeholder={placeholder}\n                      required={type === 'text' && !notRequired}\n                      disabled={disabled}\n                      list={\n                        currentType === 'hashtag'\n                          ? 'followed-hashtags-datalist'\n                          : null\n                      }\n                      autocorrect=\"off\"\n                      autocapitalize=\"off\"\n                      spellCheck={false}\n                      pattern={pattern}\n                    />\n                    {currentType === 'hashtag' &&\n                      followedHashtags.length > 0 && (\n                        <datalist id=\"followed-hashtags-datalist\">\n                          {followedHashtags.map((tag) => (\n                            <option value={tag.name} />\n                          ))}\n                        </datalist>\n                      )}\n                  </label>\n                </p>\n              );\n            },\n          )}\n          {!!FORM_NOTES[currentType] && (\n            <p class=\"form-note insignificant\">\n              <Icon icon=\"info\" />\n              {FORM_NOTES[currentType]}\n            </p>\n          )}\n          <footer>\n            <button\n              type=\"submit\"\n              class=\"block\"\n              disabled={disabled || uiState === 'loading'}\n            >\n              {editMode ? 'Save' : 'Add'}\n            </button>\n            {editMode && (\n              <button\n                type=\"button\"\n                class=\"light danger\"\n                onClick={() => {\n                  states.shortcuts.splice(shortcutIndex, 1);\n                  onClose?.();\n                }}\n              >\n                Remove\n              </button>\n            )}\n          </footer>\n        </form>\n      </main>\n    </div>\n  );\n}\n\nfunction ImportExport({ shortcuts, onClose }) {\n  const { masto } = api();\n  const shortcutsStr = useMemo(() => {\n    if (!shortcuts) return '';\n    if (!shortcuts.filter(Boolean).length) return '';\n    return compressToEncodedURIComponent(\n      JSON.stringify(shortcuts.filter(Boolean)),\n    );\n  }, [shortcuts]);\n  const [importShortcutStr, setImportShortcutStr] = useState('');\n  const [importUIState, setImportUIState] = useState('default');\n  const parsedImportShortcutStr = useMemo(() => {\n    if (!importShortcutStr) {\n      setImportUIState('default');\n      return null;\n    }\n    try {\n      const parsed = JSON.parse(\n        decompressFromEncodedURIComponent(importShortcutStr),\n      );\n      // Very basic validation, I know\n      if (!Array.isArray(parsed)) throw new Error('Not an array');\n      setImportUIState('default');\n      return parsed;\n    } catch (err) {\n      // Fallback to JSON string parsing\n      // There's a chance that someone might want to import a JSON string instead of the compressed version\n      try {\n        const parsed = JSON.parse(importShortcutStr);\n        if (!Array.isArray(parsed)) throw new Error('Not an array');\n        setImportUIState('default');\n        return parsed;\n      } catch (err) {\n        setImportUIState('error');\n        return null;\n      }\n    }\n  }, [importShortcutStr]);\n  const hasCurrentSettings = states.shortcuts.length > 0;\n\n  const shortcutsImportFieldRef = useRef();\n\n  return (\n    <div id=\"import-export-container\" class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>\n          Import/Export <small class=\"ib insignificant\">Shortcuts</small>\n        </h2>\n      </header>\n      <main tabindex=\"-1\">\n        <section>\n          <h3>\n            <Icon icon=\"arrow-down-circle\" size=\"l\" class=\"insignificant\" />{' '}\n            <span>Import</span>\n          </h3>\n          <p class=\"field-button\">\n            <input\n              ref={shortcutsImportFieldRef}\n              type=\"text\"\n              name=\"import\"\n              placeholder=\"Paste shortcuts here\"\n              class=\"block\"\n              onInput={(e) => {\n                setImportShortcutStr(e.target.value);\n              }}\n            />\n            {states.settings.shortcutSettingsCloudImportExport && (\n              <button\n                type=\"button\"\n                class=\"plain2 small\"\n                disabled={importUIState === 'cloud-downloading'}\n                onClick={async () => {\n                  setImportUIState('cloud-downloading');\n                  const currentAccount = getCurrentAccountID();\n                  showToast(\n                    'Downloading saved shortcuts from instance server…',\n                  );\n                  try {\n                    const relationships =\n                      await masto.v1.accounts.relationships.fetch({\n                        id: [currentAccount],\n                      });\n                    const relationship = relationships[0];\n                    if (relationship) {\n                      const { note = '' } = relationship;\n                      if (\n                        /<phanpy-shortcuts-settings>(.*)<\\/phanpy-shortcuts-settings>/.test(\n                          note,\n                        )\n                      ) {\n                        const settings = note.match(\n                          /<phanpy-shortcuts-settings>(.*)<\\/phanpy-shortcuts-settings>/,\n                        )[1];\n                        const { v, dt, data } = JSON.parse(settings);\n                        shortcutsImportFieldRef.current.value = data;\n                        shortcutsImportFieldRef.current.dispatchEvent(\n                          new Event('input'),\n                        );\n                      }\n                    }\n                    setImportUIState('default');\n                  } catch (e) {\n                    console.error(e);\n                    setImportUIState('error');\n                    showToast('Unable to download shortcuts');\n                  }\n                }}\n                title=\"Download shortcuts from instance server\"\n              >\n                <Icon icon=\"cloud\" />\n                <Icon icon=\"arrow-down\" />\n              </button>\n            )}\n          </p>\n          {!!parsedImportShortcutStr &&\n            Array.isArray(parsedImportShortcutStr) && (\n              <>\n                <p>\n                  <b>{parsedImportShortcutStr.length}</b> shortcut\n                  {parsedImportShortcutStr.length > 1 ? 's' : ''}{' '}\n                  <small class=\"insignificant\">\n                    ({importShortcutStr.length} characters)\n                  </small>\n                </p>\n                <ol class=\"import-settings-list\">\n                  {parsedImportShortcutStr.map((shortcut) => (\n                    <li>\n                      <span\n                        style={{\n                          opacity: shortcuts.some((s) =>\n                            // Compare all properties\n                            Object.keys(s).every(\n                              (key) => s[key] === shortcut[key],\n                            ),\n                          )\n                            ? 1\n                            : 0,\n                        }}\n                      >\n                        *\n                      </span>\n                      <span>\n                        {TYPE_TEXT[shortcut.type]}\n                        {shortcut.type === 'list' && ' ⚠️'}{' '}\n                        {TYPE_PARAMS[shortcut.type]?.map?.(\n                          ({ text, name, type }) =>\n                            shortcut[name] ? (\n                              <>\n                                <span class=\"tag collapsed insignificant\">\n                                  {text}:{' '}\n                                  {type === 'checkbox'\n                                    ? shortcut[name] === 'on'\n                                      ? '✅'\n                                      : '❌'\n                                    : shortcut[name]}\n                                </span>{' '}\n                              </>\n                            ) : null,\n                        )}\n                      </span>\n                    </li>\n                  ))}\n                </ol>\n                <p>\n                  <small>* Exists in current shortcuts</small>\n                  <br />\n                  <small>\n                    ⚠️ List may not work if it's from a different account.\n                  </small>\n                </p>\n              </>\n            )}\n          {importUIState === 'error' && (\n            <p class=\"error\">\n              <small>⚠️ Invalid settings format</small>\n            </p>\n          )}\n          <p>\n            {hasCurrentSettings && (\n              <>\n                <MenuConfirm\n                  confirmLabel=\"Append to current shortcuts?\"\n                  menuFooter={\n                    <div class=\"footer\">\n                      Only shortcuts that don’t exist in current shortcuts will\n                      be appended.\n                    </div>\n                  }\n                  onClick={() => {\n                    // states.shortcuts = [\n                    //   ...states.shortcuts,\n                    //   ...parsedImportShortcutStr,\n                    // ];\n                    // Append non-unique shortcuts only\n                    const nonUniqueShortcuts = parsedImportShortcutStr.filter(\n                      (shortcut) =>\n                        !states.shortcuts.some((s) =>\n                          // Compare all properties\n                          Object.keys(s).every(\n                            (key) => s[key] === shortcut[key],\n                          ),\n                        ),\n                    );\n                    if (!nonUniqueShortcuts.length) {\n                      showToast('No new shortcuts to import');\n                      return;\n                    }\n                    let newShortcuts = [\n                      ...states.shortcuts,\n                      ...nonUniqueShortcuts,\n                    ];\n                    const exceededLimit = newShortcuts.length > SHORTCUTS_LIMIT;\n                    if (exceededLimit) {\n                      // If exceeded, trim it\n                      newShortcuts = newShortcuts.slice(0, SHORTCUTS_LIMIT);\n                    }\n                    states.shortcuts = newShortcuts;\n                    showToast(\n                      exceededLimit\n                        ? `Shortcuts imported. Exceeded max ${SHORTCUTS_LIMIT}, so the rest are not imported.`\n                        : 'Shortcuts imported',\n                    );\n                    onClose?.();\n                  }}\n                >\n                  <button\n                    type=\"button\"\n                    class=\"plain2\"\n                    disabled={!parsedImportShortcutStr}\n                  >\n                    Import & append…\n                  </button>\n                </MenuConfirm>{' '}\n              </>\n            )}\n            <MenuConfirm\n              confirmLabel={\n                hasCurrentSettings\n                  ? 'Override current shortcuts?'\n                  : 'Import shortcuts?'\n              }\n              menuItemClassName={hasCurrentSettings ? 'danger' : undefined}\n              onClick={() => {\n                states.shortcuts = parsedImportShortcutStr;\n                showToast('Shortcuts imported');\n                onClose?.();\n              }}\n            >\n              <button\n                type=\"button\"\n                class=\"plain2\"\n                disabled={!parsedImportShortcutStr}\n              >\n                {hasCurrentSettings ? 'or override…' : 'Import…'}\n              </button>\n            </MenuConfirm>\n          </p>\n        </section>\n        <section>\n          <h3>\n            <Icon icon=\"arrow-up-circle\" size=\"l\" class=\"insignificant\" />{' '}\n            <span>Export</span>\n          </h3>\n          <p>\n            <input\n              style={{ width: '100%' }}\n              type=\"text\"\n              value={shortcutsStr}\n              readOnly\n              onClick={(e) => {\n                if (!e.target.value) return;\n                e.target.select();\n                // Copy url to clipboard\n                try {\n                  navigator.clipboard.writeText(e.target.value);\n                  showToast('Shortcuts copied');\n                } catch (e) {\n                  console.error(e);\n                  showToast('Unable to copy shortcuts');\n                }\n              }}\n            />\n          </p>\n          <p>\n            <button\n              type=\"button\"\n              class=\"plain2\"\n              disabled={!shortcutsStr}\n              onClick={() => {\n                try {\n                  navigator.clipboard.writeText(shortcutsStr);\n                  showToast('Shortcut settings copied');\n                } catch (e) {\n                  console.error(e);\n                  showToast('Unable to copy shortcut settings');\n                }\n              }}\n            >\n              <Icon icon=\"clipboard\" /> <span>Copy</span>\n            </button>{' '}\n            {navigator?.share &&\n              navigator?.canShare?.({\n                text: shortcutsStr,\n              }) && (\n                <button\n                  type=\"button\"\n                  class=\"plain2\"\n                  disabled={!shortcutsStr}\n                  onClick={() => {\n                    try {\n                      navigator.share({\n                        text: shortcutsStr,\n                      });\n                    } catch (e) {\n                      console.error(e);\n                      alert(\"Sharing doesn't seem to work.\");\n                    }\n                  }}\n                >\n                  <Icon icon=\"share\" /> <span>Share</span>\n                </button>\n              )}{' '}\n            {states.settings.shortcutSettingsCloudImportExport && (\n              <button\n                type=\"button\"\n                class=\"plain2\"\n                disabled={importUIState === 'cloud-uploading'}\n                onClick={async () => {\n                  setImportUIState('cloud-uploading');\n                  const currentAccount = getCurrentAccountID();\n                  try {\n                    const relationships =\n                      await masto.v1.accounts.relationships.fetch({\n                        id: [currentAccount],\n                      });\n                    const relationship = relationships[0];\n                    if (relationship) {\n                      const { note = '' } = relationship;\n                      // const newNote = `${note}\\n\\n\\n$<phanpy-shortcuts-settings>{shortcutsStr}</phanpy-shortcuts-settings>`;\n                      let newNote = '';\n                      if (\n                        /<phanpy-shortcuts-settings>(.*)<\\/phanpy-shortcuts-settings>/.test(\n                          note,\n                        )\n                      ) {\n                        const settingsJSON = JSON.stringify({\n                          v: '1', // version\n                          dt: Date.now(), // datetime stamp\n                          data: shortcutsStr, // shortcuts settings string\n                        });\n                        newNote = note.replace(\n                          /<phanpy-shortcuts-settings>(.*)<\\/phanpy-shortcuts-settings>/,\n                          `<phanpy-shortcuts-settings>${settingsJSON}</phanpy-shortcuts-settings>`,\n                        );\n                      } else {\n                        newNote = `${note}\\n\\n\\n<phanpy-shortcuts-settings>${settingsJSON}</phanpy-shortcuts-settings>`;\n                      }\n                      showToast('Saving shortcuts to instance server…');\n                      await masto.v1.accounts\n                        .$select(currentAccount)\n                        .note.create({\n                          comment: newNote,\n                        });\n                      setImportUIState('default');\n                      showToast('Shortcuts saved');\n                    }\n                  } catch (e) {\n                    console.error(e);\n                    setImportUIState('error');\n                    showToast('Unable to save shortcuts');\n                  }\n                }}\n                title=\"Sync to instance server\"\n              >\n                <Icon icon=\"cloud\" />\n                <Icon icon=\"arrow-up\" />\n              </button>\n            )}{' '}\n            {shortcutsStr.length > 0 && (\n              <small class=\"insignificant ib\">\n                {shortcutsStr.length} characters\n              </small>\n            )}\n          </p>\n          {!!shortcutsStr && (\n            <details>\n              <summary class=\"insignificant\">\n                <small>Raw Shortcuts JSON</small>\n              </summary>\n              <textarea style={{ width: '100%' }} rows={10} readOnly>\n                {JSON.stringify(shortcuts.filter(Boolean), null, 2)}\n              </textarea>\n            </details>\n          )}\n        </section>\n        {states.settings.shortcutSettingsCloudImportExport && (\n          <footer>\n            <p>\n              <Icon icon=\"cloud\" /> Import/export settings from/to instance\n              server (Very experimental)\n            </p>\n          </footer>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default ShortcutsSettings;\n","import { useEffect } from 'preact/hooks';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { subscribe, useSnapshot } from 'valtio';\n\nimport Accounts from '../pages/accounts';\nimport Settings from '../pages/settings';\nimport focusDeck from '../utils/focus-deck';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\n\nimport AccountSheet from './account-sheet';\nimport ComposeSuspense, { preload } from './compose-suspense';\nimport Drafts from './drafts';\nimport EmbedModal from './embed-modal';\nimport GenericAccounts from './generic-accounts';\nimport MediaAltModal from './media-alt-modal';\nimport MediaModal from './media-modal';\nimport Modal from './modal';\nimport ReportModal from './report-modal';\nimport ShortcutsSettings from './shortcuts-settings';\n\nsubscribe(states, (changes) => {\n  for (const [action, path, value, prevValue] of changes) {\n    // When closing modal, focus on deck\n    if (/^show/i.test(path) && !value) {\n      focusDeck();\n    }\n  }\n});\n\nexport default function Modals() {\n  const snapStates = useSnapshot(states);\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  useEffect(() => {\n    setTimeout(preload, 1000);\n  }, []);\n\n  return (\n    <>\n      {!!snapStates.showCompose && (\n        <Modal\n          class={`solid ${snapStates.composerState.minimized ? 'min' : ''}`}\n          minimized={!!snapStates.composerState.minimized}\n        >\n          <ComposeSuspense\n            replyToStatus={\n              typeof snapStates.showCompose !== 'boolean'\n                ? snapStates.showCompose.replyToStatus\n                : window.__COMPOSE__?.replyToStatus || null\n            }\n            editStatus={\n              states.showCompose?.editStatus ||\n              window.__COMPOSE__?.editStatus ||\n              null\n            }\n            draftStatus={\n              states.showCompose?.draftStatus ||\n              window.__COMPOSE__?.draftStatus ||\n              null\n            }\n            onClose={(results) => {\n              const { newStatus, instance, type } = results || {};\n              states.showCompose = false;\n              window.__COMPOSE__ = null;\n              if (newStatus) {\n                states.reloadStatusPage++;\n                showToast({\n                  text: {\n                    post: 'Post published. Check it out.',\n                    reply: 'Reply posted. Check it out.',\n                    edit: 'Post updated. Check it out.',\n                  }[type || 'post'],\n                  delay: 1000,\n                  duration: 10_000, // 10 seconds\n                  onClick: (toast) => {\n                    toast.hideToast();\n                    states.prevLocation = location;\n                    navigate(\n                      instance\n                        ? `/${instance}/s/${newStatus.id}`\n                        : `/s/${newStatus.id}`,\n                    );\n                  },\n                });\n              }\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showSettings && (\n        <Modal\n          onClose={() => {\n            states.showSettings = false;\n          }}\n        >\n          <Settings\n            onClose={() => {\n              states.showSettings = false;\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showAccounts && (\n        <Modal\n          onClose={() => {\n            states.showAccounts = false;\n          }}\n        >\n          <Accounts\n            onClose={() => {\n              states.showAccounts = false;\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showAccount && (\n        <Modal\n          onClose={() => {\n            states.showAccount = false;\n          }}\n        >\n          <AccountSheet\n            account={snapStates.showAccount?.account || snapStates.showAccount}\n            instance={snapStates.showAccount?.instance}\n            onClose={({ destination } = {}) => {\n              states.showAccount = false;\n              // states.showGenericAccounts = false;\n              // if (destination) {\n              //   states.showAccounts = false;\n              // }\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showDrafts && (\n        <Modal\n          onClose={() => {\n            states.showDrafts = false;\n          }}\n        >\n          <Drafts onClose={() => (states.showDrafts = false)} />\n        </Modal>\n      )}\n      {!!snapStates.showMediaModal && (\n        <Modal\n          onClick={(e) => {\n            if (\n              e.target === e.currentTarget ||\n              e.target.classList.contains('media')\n            ) {\n              states.showMediaModal = false;\n            }\n          }}\n        >\n          <MediaModal\n            mediaAttachments={snapStates.showMediaModal.mediaAttachments}\n            instance={snapStates.showMediaModal.instance}\n            index={snapStates.showMediaModal.index}\n            statusID={snapStates.showMediaModal.statusID}\n            onClose={() => {\n              states.showMediaModal = false;\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showShortcutsSettings && (\n        <Modal\n          onClose={() => {\n            states.showShortcutsSettings = false;\n          }}\n        >\n          <ShortcutsSettings\n            onClose={() => (states.showShortcutsSettings = false)}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showGenericAccounts && (\n        <Modal\n          onClose={() => {\n            states.showGenericAccounts = false;\n          }}\n        >\n          <GenericAccounts\n            instance={snapStates.showGenericAccounts.instance}\n            excludeRelationshipAttrs={\n              snapStates.showGenericAccounts.excludeRelationshipAttrs\n            }\n            postID={snapStates.showGenericAccounts.postID}\n            onClose={() => (states.showGenericAccounts = false)}\n            blankCopy={snapStates.showGenericAccounts.blankCopy}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showMediaAlt && (\n        <Modal\n          onClose={(e) => {\n            states.showMediaAlt = false;\n          }}\n        >\n          <MediaAltModal\n            alt={snapStates.showMediaAlt.alt || snapStates.showMediaAlt}\n            lang={snapStates.showMediaAlt?.lang}\n            onClose={() => {\n              states.showMediaAlt = false;\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showEmbedModal && (\n        <Modal\n          class=\"solid\"\n          onClose={() => {\n            states.showEmbedModal = false;\n          }}\n        >\n          <EmbedModal\n            html={snapStates.showEmbedModal.html}\n            url={snapStates.showEmbedModal.url}\n            width={snapStates.showEmbedModal.width}\n            height={snapStates.showEmbedModal.height}\n            onClose={() => {\n              states.showEmbedModal = false;\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showReportModal && (\n        <Modal\n          onClose={() => {\n            states.showReportModal = false;\n          }}\n        >\n          <ReportModal\n            account={snapStates.showReportModal.account}\n            post={snapStates.showReportModal.post}\n            onClose={() => {\n              states.showReportModal = false;\n            }}\n          />\n        </Modal>\n      )}\n    </>\n  );\n}\n","import { useState } from 'preact/hooks';\n\nimport { api } from '../utils/api';\n\nimport Icon from './icon';\nimport Loader from './loader';\n\nfunction FollowRequestButtons({ accountID, onChange }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [requestState, setRequestState] = useState(null); // accept, reject\n  const [relationship, setRelationship] = useState(null);\n\n  const hasRelationship = relationship !== null;\n\n  return (\n    <p class=\"follow-request-buttons\">\n      <button\n        type=\"button\"\n        disabled={uiState === 'loading' || hasRelationship}\n        onClick={() => {\n          setUIState('loading');\n          setRequestState('accept');\n          (async () => {\n            try {\n              const rel = await masto.v1.followRequests\n                .$select(accountID)\n                .authorize();\n              if (!rel?.followedBy) {\n                throw new Error('Follow request not accepted');\n              }\n              setRelationship(rel);\n              onChange();\n            } catch (e) {\n              console.error(e);\n            }\n            setUIState('default');\n          })();\n        }}\n      >\n        Accept\n      </button>{' '}\n      <button\n        type=\"button\"\n        disabled={uiState === 'loading' || hasRelationship}\n        class=\"light danger\"\n        onClick={() => {\n          setUIState('loading');\n          setRequestState('reject');\n          (async () => {\n            try {\n              const rel = await masto.v1.followRequests\n                .$select(accountID)\n                .reject();\n              if (rel?.followedBy) {\n                throw new Error('Follow request not rejected');\n              }\n              setRelationship(rel);\n              onChange();\n            } catch (e) {\n              console.error(e);\n              setUIState('default');\n            }\n          })();\n        }}\n      >\n        Reject\n      </button>\n      <span class=\"follow-request-states\">\n        {hasRelationship && requestState ? (\n          requestState === 'accept' ? (\n            <Icon icon=\"check-circle\" alt=\"Accepted\" class=\"follow-accepted\" />\n          ) : (\n            <Icon icon=\"x-circle\" alt=\"Rejected\" class=\"follow-rejected\" />\n          )\n        ) : (\n          <Loader hidden={uiState !== 'loading'} />\n        )}\n      </span>\n    </p>\n  );\n}\n\nexport default FollowRequestButtons;\n","import { Fragment } from 'preact';\nimport { memo } from 'preact/compat';\n\nimport shortenNumber from '../utils/shorten-number';\nimport states, { statusKey } from '../utils/states';\nimport store from '../utils/store';\nimport { getCurrentAccountID } from '../utils/store-utils';\nimport useTruncated from '../utils/useTruncated';\n\nimport Avatar from './avatar';\nimport CustomEmoji from './custom-emoji';\nimport FollowRequestButtons from './follow-request-buttons';\nimport Icon from './icon';\nimport Link from './link';\nimport NameText from './name-text';\nimport RelativeTime from './relative-time';\nimport Status from './status';\n\nconst NOTIFICATION_ICONS = {\n  mention: 'comment',\n  status: 'notification',\n  reblog: 'rocket',\n  follow: 'follow',\n  follow_request: 'follow-add',\n  favourite: 'heart',\n  poll: 'poll',\n  update: 'pencil',\n  'admin.signup': 'account-edit',\n  'admin.report': 'account-warning',\n  severed_relationships: 'heart-break',\n  moderation_warning: 'alert',\n  emoji_reaction: 'emoji2',\n  'pleroma:emoji_reaction': 'emoji2',\n};\n\n/*\nNotification types\n==================\nmention = Someone mentioned you in their status\nstatus = Someone you enabled notifications for has posted a status\nreblog = Someone boosted one of your statuses\nfollow = Someone followed you\nfollow_request = Someone requested to follow you\nfavourite = Someone favourited one of your statuses\npoll = A poll you have voted in or created has ended\nupdate = A status you interacted with has been edited\nadmin.sign_up = Someone signed up (optionally sent to admins)\nadmin.report = A new report has been filed\nsevered_relationships = Severed relationships\nmoderation_warning = Moderation warning\n*/\n\nfunction emojiText(emoji, emoji_url) {\n  let url;\n  let staticUrl;\n  if (typeof emoji_url === 'string') {\n    url = emoji_url;\n  } else {\n    url = emoji_url?.url;\n    staticUrl = emoji_url?.staticUrl;\n  }\n  return url ? (\n    <>\n      reacted to your post with{' '}\n      <CustomEmoji url={url} staticUrl={staticUrl} alt={emoji} />\n    </>\n  ) : (\n    `reacted to your post with ${emoji}.`\n  );\n}\nconst contentText = {\n  mention: 'mentioned you in their post.',\n  status: 'published a post.',\n  reblog: 'boosted your post.',\n  'reblog+account': (count) => `boosted ${count} of your posts.`,\n  reblog_reply: 'boosted your reply.',\n  follow: 'followed you.',\n  follow_request: 'requested to follow you.',\n  favourite: 'liked your post.',\n  'favourite+account': (count) => `liked ${count} of your posts.`,\n  favourite_reply: 'liked your reply.',\n  poll: 'A poll you have voted in or created has ended.',\n  'poll-self': 'A poll you have created has ended.',\n  'poll-voted': 'A poll you have voted in has ended.',\n  update: 'A post you interacted with has been edited.',\n  'favourite+reblog': 'boosted & liked your post.',\n  'favourite+reblog+account': (count) =>\n    `boosted & liked ${count} of your posts.`,\n  'favourite+reblog_reply': 'boosted & liked your reply.',\n  'admin.sign_up': 'signed up.',\n  'admin.report': (targetAccount) => <>reported {targetAccount}</>,\n  severed_relationships: (name) => (\n    <>\n      Lost connections with <i>{name}</i>.\n    </>\n  ),\n  moderation_warning: <b>Moderation warning</b>,\n  emoji_reaction: emojiText,\n  'pleroma:emoji_reaction': emojiText,\n};\n\n// account_suspension, domain_block, user_domain_block\nconst SEVERED_RELATIONSHIPS_TEXT = {\n  account_suspension: ({ from, targetName }) => (\n    <>\n      An admin from <i>{from}</i> has suspended <i>{targetName}</i>, which means\n      you can no longer receive updates from them or interact with them.\n    </>\n  ),\n  domain_block: ({ from, targetName, followersCount, followingCount }) => (\n    <>\n      An admin from <i>{from}</i> has blocked <i>{targetName}</i>. Affected\n      followers: {followersCount}, followings: {followingCount}.\n    </>\n  ),\n  user_domain_block: ({ targetName, followersCount, followingCount }) => (\n    <>\n      You have blocked <i>{targetName}</i>. Removed followers: {followersCount},\n      followings: {followingCount}.\n    </>\n  ),\n};\n\nconst MODERATION_WARNING_TEXT = {\n  none: 'Your account has received a moderation warning.',\n  disable: 'Your account has been disabled.',\n  mark_statuses_as_sensitive:\n    'Some of your posts have been marked as sensitive.',\n  delete_statuses: 'Some of your posts have been deleted.',\n  sensitive: 'Your posts will be marked as sensitive from now on.',\n  silence: 'Your account has been limited.',\n  suspend: 'Your account has been suspended.',\n};\n\nconst AVATARS_LIMIT = 30;\n\nfunction Notification({\n  notification,\n  instance,\n  isStatic,\n  disableContextMenu,\n}) {\n  const {\n    id,\n    status,\n    account,\n    report,\n    event,\n    moderation_warning,\n    _accounts,\n    _statuses,\n  } = notification;\n  let { type } = notification;\n\n  // status = Attached when type of the notification is favourite, reblog, status, mention, poll, or update\n  const actualStatus = status?.reblog || status;\n  const actualStatusID = actualStatus?.id;\n\n  const currentAccount = getCurrentAccountID();\n  const isSelf = currentAccount === account?.id;\n  const isVoted = status?.poll?.voted;\n  const isReplyToOthers =\n    !!status?.inReplyToAccountId &&\n    status?.inReplyToAccountId !== currentAccount &&\n    status?.account?.id === currentAccount;\n\n  let favsCount = 0;\n  let reblogsCount = 0;\n  if (type === 'favourite+reblog') {\n    for (const account of _accounts) {\n      if (account._types?.includes('favourite')) {\n        favsCount++;\n      }\n      if (account._types?.includes('reblog')) {\n        reblogsCount++;\n      }\n    }\n    if (!reblogsCount && favsCount) type = 'favourite';\n    if (!favsCount && reblogsCount) type = 'reblog';\n  }\n\n  let text;\n  if (type === 'poll') {\n    text = contentText[isSelf ? 'poll-self' : isVoted ? 'poll-voted' : 'poll'];\n  } else if (\n    type === 'reblog' ||\n    type === 'favourite' ||\n    type === 'favourite+reblog'\n  ) {\n    if (_statuses?.length > 1) {\n      text = contentText[`${type}+account`];\n    } else if (isReplyToOthers) {\n      text = contentText[`${type}_reply`];\n    } else {\n      text = contentText[type];\n    }\n  } else if (contentText[type]) {\n    text = contentText[type];\n  } else {\n    // Anticipate unhandled notification types, possibly from Mastodon forks or non-Mastodon instances\n    // This surfaces the error to the user, hoping that users will report it\n    text = `[Unknown notification type: ${type}]`;\n  }\n\n  if (typeof text === 'function') {\n    const count = _statuses?.length || _accounts?.length;\n    if (type === 'admin.report') {\n      const targetAccount = report?.targetAccount;\n      if (targetAccount) {\n        text = text(<NameText account={targetAccount} showAvatar />);\n      }\n    } else if (type === 'severed_relationships') {\n      const targetName = event?.targetName;\n      if (targetName) {\n        text = text(targetName);\n      }\n    } else if (\n      (type === 'emoji_reaction' || type === 'pleroma:emoji_reaction') &&\n      notification.emoji\n    ) {\n      const emojiURL =\n        notification.emoji_url || // This is string\n        status?.emojis?.find?.(\n          (emoji) =>\n            emoji?.shortcode ===\n            notification.emoji.replace(/^:/, '').replace(/:$/, ''),\n        ); // Emoji object instead of string\n      text = text(notification.emoji, emojiURL);\n    } else if (count) {\n      text = text(count);\n    }\n  }\n\n  if (type === 'mention' && !status) {\n    // Could be deleted\n    return null;\n  }\n\n  const formattedCreatedAt =\n    notification.createdAt && new Date(notification.createdAt).toLocaleString();\n\n  const genericAccountsHeading =\n    {\n      'favourite+reblog': 'Boosted/Liked by…',\n      favourite: 'Liked by…',\n      reblog: 'Boosted by…',\n      follow: 'Followed by…',\n    }[type] || 'Accounts';\n  const handleOpenGenericAccounts = () => {\n    states.showGenericAccounts = {\n      heading: genericAccountsHeading,\n      accounts: _accounts,\n      showReactions: type === 'favourite+reblog',\n      excludeRelationshipAttrs: type === 'follow' ? ['followedBy'] : [],\n      postID: statusKey(actualStatusID, instance),\n    };\n  };\n\n  console.debug('RENDER Notification', notification.id);\n\n  return (\n    <div\n      class={`notification notification-${type}`}\n      data-notification-id={id}\n      tabIndex=\"0\"\n    >\n      <div\n        class={`notification-type notification-${type}`}\n        title={formattedCreatedAt}\n      >\n        {type === 'favourite+reblog' ? (\n          <>\n            <Icon icon=\"rocket\" size=\"xl\" alt={type} class=\"reblog-icon\" />\n            <Icon icon=\"heart\" size=\"xl\" alt={type} class=\"favourite-icon\" />\n          </>\n        ) : (\n          <Icon\n            icon={NOTIFICATION_ICONS[type] || 'notification'}\n            size=\"xl\"\n            alt={type}\n          />\n        )}\n      </div>\n      <div class=\"notification-content\">\n        {type !== 'mention' && (\n          <>\n            <p>\n              {!/poll|update/i.test(type) && (\n                <>\n                  {_accounts?.length > 1 ? (\n                    <>\n                      <b tabIndex=\"0\" onClick={handleOpenGenericAccounts}>\n                        <span title={_accounts.length}>\n                          {shortenNumber(_accounts.length)}\n                        </span>{' '}\n                        people\n                      </b>{' '}\n                    </>\n                  ) : (\n                    account && (\n                      <>\n                        <NameText account={account} showAvatar />{' '}\n                      </>\n                    )\n                  )}\n                </>\n              )}\n              {text}\n              {type === 'mention' && (\n                <span class=\"insignificant\">\n                  {' '}\n                  •{' '}\n                  <RelativeTime\n                    datetime={notification.createdAt}\n                    format=\"micro\"\n                  />\n                </span>\n              )}\n            </p>\n            {type === 'follow_request' && (\n              <FollowRequestButtons accountID={account.id} />\n            )}\n            {type === 'severed_relationships' && (\n              <div>\n                {SEVERED_RELATIONSHIPS_TEXT[event.type]({\n                  from: instance,\n                  ...event,\n                })}\n                <br />\n                <a\n                  href={`https://${instance}/severed_relationships`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  Learn more <Icon icon=\"external\" size=\"s\" />\n                </a>\n                .\n              </div>\n            )}\n            {type === 'moderation_warning' && !!moderation_warning && (\n              <div>\n                {MODERATION_WARNING_TEXT[moderation_warning.action]}\n                <br />\n                <a\n                  href={`/disputes/strikes/${moderation_warning.id}`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  Learn more <Icon icon=\"external\" size=\"s\" />\n                </a>\n                .\n              </div>\n            )}\n          </>\n        )}\n        {_accounts?.length > 1 && (\n          <p class=\"avatars-stack\">\n            {_accounts.slice(0, AVATARS_LIMIT).map((account) => (\n              <Fragment key={account.id}>\n                <a\n                  key={account.id}\n                  href={account.url}\n                  rel=\"noopener noreferrer\"\n                  class=\"account-avatar-stack\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    states.showAccount = account;\n                  }}\n                >\n                  <Avatar\n                    url={account.avatarStatic}\n                    size={\n                      _accounts.length <= 10\n                        ? 'xxl'\n                        : _accounts.length < 20\n                        ? 'xl'\n                        : 'l'\n                    }\n                    key={account.id}\n                    alt={`${account.displayName} @${account.acct}`}\n                    squircle={account?.bot}\n                  />\n                  {type === 'favourite+reblog' && (\n                    <div class=\"account-sub-icons\">\n                      {account._types.map((type) => (\n                        <Icon\n                          icon={NOTIFICATION_ICONS[type]}\n                          size=\"s\"\n                          class={`${type}-icon`}\n                        />\n                      ))}\n                    </div>\n                  )}\n                </a>{' '}\n              </Fragment>\n            ))}\n            <button\n              type=\"button\"\n              class=\"small plain\"\n              onClick={handleOpenGenericAccounts}\n            >\n              {_accounts.length > AVATARS_LIMIT &&\n                `+${_accounts.length - AVATARS_LIMIT}`}\n              <Icon icon=\"chevron-down\" />\n            </button>\n          </p>\n        )}\n        {_statuses?.length > 1 && (\n          <ul class=\"notification-group-statuses\">\n            {_statuses.map((status) => (\n              <li key={status.id}>\n                <TruncatedLink\n                  class={`status-link status-type-${type}`}\n                  to={\n                    instance ? `/${instance}/s/${status.id}` : `/s/${status.id}`\n                  }\n                >\n                  <Status\n                    status={status}\n                    size=\"s\"\n                    previewMode\n                    allowContextMenu\n                  />\n                </TruncatedLink>\n              </li>\n            ))}\n          </ul>\n        )}\n        {status && (!_statuses?.length || _statuses?.length <= 1) && (\n          <TruncatedLink\n            class={`status-link status-type-${type}`}\n            to={\n              instance\n                ? `/${instance}/s/${actualStatusID}`\n                : `/s/${actualStatusID}`\n            }\n            onContextMenu={\n              !disableContextMenu\n                ? (e) => {\n                    const post = e.target.querySelector('.status');\n                    if (post) {\n                      // Fire a custom event to open the context menu\n                      if (e.metaKey) return;\n                      e.preventDefault();\n                      post.dispatchEvent(\n                        new MouseEvent('contextmenu', {\n                          clientX: e.clientX,\n                          clientY: e.clientY,\n                        }),\n                      );\n                    }\n                  }\n                : undefined\n            }\n          >\n            {isStatic ? (\n              <Status\n                status={actualStatus}\n                size=\"s\"\n                readOnly\n                allowContextMenu\n              />\n            ) : (\n              <Status\n                statusID={actualStatusID}\n                size=\"s\"\n                readOnly\n                allowContextMenu\n              />\n            )}\n          </TruncatedLink>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction TruncatedLink(props) {\n  const ref = useTruncated();\n  return <Link {...props} data-read-more=\"Read more →\" ref={ref} />;\n}\n\nexport default memo(Notification, (oldProps, newProps) => {\n  return oldProps.notification?.id === newProps.notification?.id;\n});\n","import { memo } from 'preact/compat';\nimport { useLayoutEffect, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport { api } from '../utils/api';\nimport states from '../utils/states';\nimport {\n  getAccountByAccessToken,\n  getCurrentAccount,\n} from '../utils/store-utils';\nimport usePageVisibility from '../utils/usePageVisibility';\n\nimport Icon from './icon';\nimport Link from './link';\nimport Modal from './modal';\nimport Notification from './notification';\n\n{\n  if ('serviceWorker' in navigator) {\n    console.log('👂👂👂 Listen to message');\n    navigator.serviceWorker.addEventListener('message', (event) => {\n      console.log('💥💥💥 Message event', event);\n      const { type, id, accessToken } = event?.data || {};\n      if (type === 'notification') {\n        states.routeNotification = {\n          id,\n          accessToken,\n        };\n      }\n    });\n  }\n}\n\nexport default memo(function NotificationService() {\n  if (!('serviceWorker' in navigator)) return null;\n\n  const snapStates = useSnapshot(states);\n  const { routeNotification } = snapStates;\n\n  console.log('🛎️ Notification service', routeNotification);\n\n  const { id, accessToken } = routeNotification || {};\n  const [showNotificationSheet, setShowNotificationSheet] = useState(false);\n\n  useLayoutEffect(() => {\n    if (!id || !accessToken) return;\n    const { instance: currentInstance } = api();\n    const { masto, instance } = api({\n      accessToken,\n    });\n    console.log('API', { accessToken, currentInstance, instance });\n    const sameInstance = currentInstance === instance;\n    const account = accessToken\n      ? getAccountByAccessToken(accessToken)\n      : getCurrentAccount();\n    (async () => {\n      const notification = await masto.v1.notifications.$select(id).fetch();\n      if (notification && account) {\n        console.log('🛎️ Notification', { id, notification, account });\n        const accountInstance = account.instanceURL;\n        const { type, status, account: notificationAccount } = notification;\n        const hasModal = !!document.querySelector('#modal-container > *');\n        const isFollow = type === 'follow' && !!notificationAccount?.id;\n        const hasAccount = !!notificationAccount?.id;\n        const hasStatus = !!status?.id;\n        if (isFollow && sameInstance) {\n          // Show account sheet, can handle different instances\n          states.showAccount = {\n            account: notificationAccount,\n            instance: accountInstance,\n          };\n        } else if (hasModal || !sameInstance || (hasAccount && hasStatus)) {\n          // Show sheet of notification, if\n          // - there is a modal open\n          // - the notification is from another instance\n          // - the notification has both account and status, gives choice for users to go to account or status\n          setShowNotificationSheet({\n            id,\n            account,\n            notification,\n            sameInstance,\n          });\n        } else {\n          if (hasStatus) {\n            // Go to status page\n            location.hash = `/${currentInstance}/s/${status.id}`;\n          } else if (isFollow) {\n            // Go to profile page\n            location.hash = `/${currentInstance}/a/${notificationAccount.id}`;\n          } else {\n            // Go to notifications page\n            location.hash = '/notifications';\n          }\n        }\n      } else {\n        console.warn('🛎️ Notification not found', id);\n      }\n    })();\n  }, [id, accessToken]);\n\n  // useLayoutEffect(() => {\n  //   // Listen to message from service worker\n  //   const handleMessage = (event) => {\n  //     console.log('💥💥💥 Message event', event);\n  //     const { type, id, accessToken } = event?.data || {};\n  //     if (type === 'notification') {\n  //       states.routeNotification = {\n  //         id,\n  //         accessToken,\n  //       };\n  //     }\n  //   };\n  //   console.log('👂👂👂 Listen to message');\n  //   navigator.serviceWorker.addEventListener('message', handleMessage);\n  //   return () => {\n  //     console.log('👂👂👂 Remove listen to message');\n  //     navigator.serviceWorker.removeEventListener('message', handleMessage);\n  //   };\n  // }, []);\n\n  useLayoutEffect(() => {\n    if (navigator?.clearAppBadge) {\n      navigator.clearAppBadge();\n    }\n  }, []);\n  usePageVisibility((visible) => {\n    if (visible && navigator?.clearAppBadge) {\n      console.log('🔰 Clear app badge');\n      navigator.clearAppBadge();\n    }\n  });\n\n  const onClose = () => {\n    setShowNotificationSheet(false);\n    states.routeNotification = null;\n\n    // If url is #/notifications?id=123, go to #/notifications\n    if (/\\/notifications\\?id=/i.test(location.hash)) {\n      location.hash = '/notifications';\n    }\n  };\n\n  if (showNotificationSheet) {\n    const { id, account, notification, sameInstance } = showNotificationSheet;\n    return (\n      <Modal\n        onClick={(e) => {\n          if (e.target === e.currentTarget) {\n            onClose();\n          }\n        }}\n      >\n        <div class=\"sheet\" tabIndex=\"-1\">\n          <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n            <Icon icon=\"x\" />\n          </button>\n          <header>\n            <b>Notification</b>\n          </header>\n          <main>\n            {!sameInstance && (\n              <p>This notification is from your other account.</p>\n            )}\n            <div\n              class=\"notification-peek\"\n              // style={{\n              //   pointerEvents: sameInstance ? '' : 'none',\n              // }}\n              onClick={(e) => {\n                const { target } = e;\n                // If button or links\n                if (e.target.tagName === 'BUTTON' || e.target.tagName === 'A') {\n                  onClose();\n                }\n              }}\n            >\n              <Notification\n                instance={account.instanceURL}\n                notification={notification}\n                isStatic\n              />\n            </div>\n            <div\n              style={{\n                textAlign: 'end',\n              }}\n            >\n              <Link to=\"/notifications\" class=\"button light\" onClick={onClose}>\n                <span>View all notifications</span> <Icon icon=\"arrow-right\" />\n              </Link>\n            </div>\n          </main>\n        </div>\n      </Modal>\n    );\n  }\n\n  return null;\n});\n","import { forwardRef } from 'preact/compat';\nimport { useImperativeHandle, useRef, useState } from 'preact/hooks';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { api } from '../utils/api';\n\nimport Icon from './icon';\nimport Link from './link';\n\nconst SearchForm = forwardRef((props, ref) => {\n  const { instance } = api();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [searchMenuOpen, setSearchMenuOpen] = useState(false);\n  const [query, setQuery] = useState(searchParams.get('q') || '');\n  const type = searchParams.get('type');\n  const formRef = useRef(null);\n\n  const searchFieldRef = useRef(null);\n  useImperativeHandle(ref, () => ({\n    setValue: (value) => {\n      setQuery(value);\n    },\n    focus: () => {\n      searchFieldRef.current.focus();\n    },\n    select: () => {\n      searchFieldRef.current.select();\n    },\n    blur: () => {\n      searchFieldRef.current.blur();\n    },\n  }));\n\n  return (\n    <form\n      ref={formRef}\n      class=\"search-popover-container\"\n      onSubmit={(e) => {\n        e.preventDefault();\n\n        const isSearchPage = /\\/search/.test(location.hash);\n        if (isSearchPage) {\n          if (query) {\n            const params = {\n              q: query,\n            };\n            if (type) params.type = type; // Preserve type\n            setSearchParams(params);\n          } else {\n            setSearchParams({});\n          }\n        } else {\n          if (query) {\n            location.hash = `/search?q=${encodeURIComponent(query)}${\n              type ? `&type=${type}` : ''\n            }`;\n          } else {\n            location.hash = `/search`;\n          }\n        }\n\n        props?.onSubmit?.(e);\n      }}\n    >\n      <input\n        ref={searchFieldRef}\n        value={query}\n        name=\"q\"\n        type=\"search\"\n        // autofocus\n        placeholder=\"Search\"\n        dir=\"auto\"\n        autocomplete=\"off\"\n        autocorrect=\"off\"\n        autocapitalize=\"off\"\n        spellCheck=\"false\"\n        onSearch={(e) => {\n          if (!e.target.value) {\n            setSearchParams({});\n          }\n        }}\n        onInput={(e) => {\n          setQuery(e.target.value);\n          setSearchMenuOpen(true);\n        }}\n        onFocus={() => {\n          setSearchMenuOpen(true);\n          formRef.current\n            ?.querySelector('.search-popover-item')\n            ?.classList.add('focus');\n        }}\n        onBlur={() => {\n          setTimeout(() => {\n            setSearchMenuOpen(false);\n          }, 100);\n          formRef.current\n            ?.querySelector('.search-popover-item.focus')\n            ?.classList.remove('focus');\n        }}\n        onKeyDown={(e) => {\n          const { key } = e;\n          switch (key) {\n            case 'Escape':\n              setSearchMenuOpen(false);\n              break;\n            case 'Down':\n            case 'ArrowDown':\n              e.preventDefault();\n              if (searchMenuOpen) {\n                const focusItem = formRef.current.querySelector(\n                  '.search-popover-item.focus',\n                );\n                if (focusItem) {\n                  let nextItem = focusItem.nextElementSibling;\n                  while (nextItem && nextItem.hidden) {\n                    nextItem = nextItem.nextElementSibling;\n                  }\n                  if (nextItem) {\n                    nextItem.classList.add('focus');\n                    const siblings = Array.from(\n                      nextItem.parentElement.children,\n                    ).filter((el) => el !== nextItem);\n                    siblings.forEach((el) => {\n                      el.classList.remove('focus');\n                    });\n                  }\n                } else {\n                  const firstItem = formRef.current.querySelector(\n                    '.search-popover-item',\n                  );\n                  if (firstItem) {\n                    firstItem.classList.add('focus');\n                  }\n                }\n              }\n              break;\n            case 'Up':\n            case 'ArrowUp':\n              e.preventDefault();\n              if (searchMenuOpen) {\n                const focusItem = document.querySelector(\n                  '.search-popover-item.focus',\n                );\n                if (focusItem) {\n                  let prevItem = focusItem.previousElementSibling;\n                  while (prevItem && prevItem.hidden) {\n                    prevItem = prevItem.previousElementSibling;\n                  }\n                  if (prevItem) {\n                    prevItem.classList.add('focus');\n                    const siblings = Array.from(\n                      prevItem.parentElement.children,\n                    ).filter((el) => el !== prevItem);\n                    siblings.forEach((el) => {\n                      el.classList.remove('focus');\n                    });\n                  }\n                } else {\n                  const lastItem = document.querySelector(\n                    '.search-popover-item:last-child',\n                  );\n                  if (lastItem) {\n                    lastItem.classList.add('focus');\n                  }\n                }\n              }\n              break;\n            case 'Enter':\n              if (searchMenuOpen) {\n                const focusItem = document.querySelector(\n                  '.search-popover-item.focus',\n                );\n                if (focusItem) {\n                  e.preventDefault();\n                  focusItem.click();\n                }\n                setSearchMenuOpen(false);\n                props?.onSubmit?.(e);\n              }\n              break;\n          }\n        }}\n      />\n      <div class=\"search-popover\" hidden={!searchMenuOpen || !query}>\n        {/* {!!query && (\n          <Link\n            to={`/search?q=${encodeURIComponent(query)}`}\n            class=\"search-popover-item focus\"\n            onClick={(e) => {\n              props?.onSubmit?.(e);\n            }}\n          >\n            <Icon icon=\"search\" />\n            <span>{query}</span>\n          </Link>\n        )} */}\n        {!!query &&\n          [\n            {\n              label: (\n                <>\n                  {query}{' '}\n                  <small class=\"insignificant\">\n                    ‒ accounts, hashtags &amp; posts\n                  </small>\n                </>\n              ),\n              to: `/search?q=${encodeURIComponent(query)}`,\n              top: !type && !/\\s/.test(query),\n              hidden: !!type,\n            },\n            {\n              label: (\n                <>\n                  Posts with <q>{query}</q>\n                </>\n              ),\n              to: `/search?q=${encodeURIComponent(query)}&type=statuses`,\n              hidden: /^https?:/.test(query),\n              top: /\\s/.test(query),\n              icon: 'document',\n              queryType: 'statuses',\n            },\n            {\n              label: (\n                <>\n                  Posts tagged with <mark>#{query.replace(/^#/, '')}</mark>\n                </>\n              ),\n              to: `/${instance}/t/${query.replace(/^#/, '')}`,\n              hidden:\n                /^@/.test(query) || /^https?:/.test(query) || /\\s/.test(query),\n              top: /^#/.test(query),\n              type: 'link',\n              icon: 'hashtag',\n              queryType: 'hashtags',\n            },\n            {\n              label: (\n                <>\n                  Look up <mark>{query}</mark>\n                </>\n              ),\n              to: `/${query}`,\n              hidden: !/^https?:/.test(query),\n              top: /^https?:/.test(query),\n              type: 'link',\n            },\n            {\n              label: (\n                <>\n                  Accounts with <q>{query}</q>\n                </>\n              ),\n              to: `/search?q=${encodeURIComponent(query)}&type=accounts`,\n              icon: 'group',\n              queryType: 'accounts',\n            },\n          ]\n            .sort((a, b) => {\n              if (type) {\n                if (a.queryType === type) return -1;\n                if (b.queryType === type) return 1;\n              }\n              if (a.top && !b.top) return -1;\n              if (!a.top && b.top) return 1;\n              return 0;\n            })\n            .filter(({ hidden }) => !hidden)\n            .map(({ label, to, icon, type }, i) => (\n              <Link\n                to={to}\n                class={`search-popover-item ${i === 0 ? 'focus' : ''}`}\n                // hidden={hidden}\n                onClick={(e) => {\n                  props?.onSubmit?.(e);\n                }}\n              >\n                <Icon\n                  icon={icon || (type === 'link' ? 'arrow-right' : 'search')}\n                  class=\"more-insignificant\"\n                />\n                <span>{label}</span>{' '}\n              </Link>\n            ))}\n      </div>\n    </form>\n  );\n});\n\nexport default SearchForm;\n","import './search-command.css';\n\nimport { memo } from 'preact/compat';\nimport { useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\n\nimport SearchForm from './search-form';\n\nexport default memo(function SearchCommand({ onClose = () => {} }) {\n  const [showSearch, setShowSearch] = useState(false);\n  const searchFormRef = useRef(null);\n\n  useHotkeys(\n    ['Slash', '/'],\n    (e) => {\n      setShowSearch(true);\n      setTimeout(() => {\n        searchFormRef.current?.focus?.();\n        searchFormRef.current?.select?.();\n      }, 0);\n    },\n    {\n      preventDefault: true,\n      ignoreEventWhen: (e) => {\n        const isSearchPage = /\\/search/.test(location.hash);\n        const hasModal = !!document.querySelector('#modal-container > *');\n        return isSearchPage || hasModal;\n      },\n    },\n  );\n\n  const closeSearch = () => {\n    setShowSearch(false);\n    onClose();\n  };\n\n  useHotkeys(\n    'esc',\n    (e) => {\n      searchFormRef.current?.blur?.();\n      closeSearch();\n    },\n    {\n      enabled: showSearch,\n      enableOnFormTags: true,\n      preventDefault: true,\n    },\n  );\n\n  return (\n    <div\n      id=\"search-command-container\"\n      hidden={!showSearch}\n      onClick={(e) => {\n        console.log(e);\n        if (e.target === e.currentTarget) {\n          closeSearch();\n        }\n      }}\n    >\n      <SearchForm\n        ref={searchFormRef}\n        onSubmit={() => {\n          closeSearch();\n        }}\n      />\n    </div>\n  );\n});\n","import './shortcuts.css';\n\nimport { MenuDivider } from '@szhsin/react-menu';\nimport { memo } from 'preact/compat';\nimport { useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { useNavigate } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport { SHORTCUTS_META } from '../components/shortcuts-settings';\nimport { api } from '../utils/api';\nimport { getLists } from '../utils/lists';\nimport states from '../utils/states';\n\nimport AsyncText from './AsyncText';\nimport Icon from './icon';\nimport Link from './link';\nimport Menu2 from './menu2';\nimport MenuLink from './menu-link';\nimport SubMenu2 from './submenu2';\n\nfunction Shortcuts() {\n  const { instance } = api();\n  const snapStates = useSnapshot(states);\n  const { shortcuts, settings } = snapStates;\n\n  if (!shortcuts.length) {\n    return null;\n  }\n  if (\n    settings.shortcutsViewMode === 'multi-column' ||\n    (!settings.shortcutsViewMode && settings.shortcutsColumnsMode)\n  ) {\n    return null;\n  }\n\n  const menuRef = useRef();\n\n  const hasLists = useRef(false);\n  const formattedShortcuts = shortcuts\n    .map((pin, i) => {\n      const { type, ...data } = pin;\n      if (!SHORTCUTS_META[type]) return null;\n      let { id, path, title, subtitle, icon } = SHORTCUTS_META[type];\n\n      if (typeof id === 'function') {\n        id = id(data, i);\n      }\n      if (typeof path === 'function') {\n        path = path(\n          {\n            ...data,\n            instance: data.instance || instance,\n          },\n          i,\n        );\n      }\n      if (typeof title === 'function') {\n        title = title(data, i);\n      }\n      if (typeof subtitle === 'function') {\n        subtitle = subtitle(data, i);\n      }\n      if (typeof icon === 'function') {\n        icon = icon(data, i);\n      }\n\n      if (id === 'lists') {\n        hasLists.current = true;\n      }\n\n      return {\n        id,\n        path,\n        title,\n        subtitle,\n        icon,\n      };\n    })\n    .filter(Boolean);\n\n  const navigate = useNavigate();\n  useHotkeys(['1', '2', '3', '4', '5', '6', '7', '8', '9'], (e, handler) => {\n    const index = parseInt(handler.keys[0], 10) - 1;\n    if (index < formattedShortcuts.length) {\n      const { path } = formattedShortcuts[index];\n      if (path) {\n        navigate(path);\n        menuRef.current?.closeMenu?.();\n      }\n    }\n  });\n\n  const [lists, setLists] = useState([]);\n\n  return (\n    <div id=\"shortcuts\">\n      {snapStates.settings.shortcutsViewMode === 'tab-menu-bar' ? (\n        <nav\n          class=\"tab-bar\"\n          onContextMenu={(e) => {\n            e.preventDefault();\n            states.showShortcutsSettings = true;\n          }}\n        >\n          <ul>\n            {formattedShortcuts.map(\n              ({ id, path, title, subtitle, icon }, i) => {\n                return (\n                  <li key={`${i}-${id}-${title}-${subtitle}-${path}`}>\n                    <Link\n                      class={subtitle ? 'has-subtitle' : ''}\n                      to={path}\n                      onClick={(e) => {\n                        if (e.target.classList.contains('is-active')) {\n                          e.preventDefault();\n                          const page = document.getElementById(`${id}-page`);\n                          console.log(id, page);\n                          if (page) {\n                            page.scrollTop = 0;\n                            const updatesButton =\n                              page.querySelector('.updates-button');\n                            if (updatesButton) {\n                              updatesButton.click();\n                            }\n                          }\n                        }\n                      }}\n                    >\n                      <Icon icon={icon} size=\"xl\" alt={title} />\n                      <span>\n                        <AsyncText>{title}</AsyncText>\n                        {subtitle && (\n                          <>\n                            <br />\n                            <small>{subtitle}</small>\n                          </>\n                        )}\n                      </span>\n                    </Link>\n                  </li>\n                );\n              },\n            )}\n          </ul>\n        </nav>\n      ) : (\n        <Menu2\n          instanceRef={menuRef}\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          menuClassName=\"glass-menu shortcuts-menu\"\n          gap={8}\n          position=\"anchor\"\n          onMenuChange={(e) => {\n            if (e.open && hasLists.current) {\n              getLists().then(setLists);\n            }\n          }}\n          menuButton={\n            <button\n              type=\"button\"\n              id=\"shortcuts-button\"\n              class=\"plain\"\n              onContextMenu={(e) => {\n                e.preventDefault();\n                states.showShortcutsSettings = true;\n              }}\n              onTransitionStart={(e) => {\n                // Close menu if the button disappears\n                try {\n                  const { target } = e;\n                  if (getComputedStyle(target).pointerEvents === 'none') {\n                    menuRef.current?.closeMenu?.();\n                  }\n                } catch (e) {}\n              }}\n            >\n              <Icon icon=\"shortcut\" size=\"xl\" alt=\"Shortcuts\" />\n            </button>\n          }\n        >\n          {formattedShortcuts.map(({ id, path, title, subtitle, icon }, i) => {\n            if (id === 'lists') {\n              return (\n                <SubMenu2\n                  menuClassName=\"glass-menu\"\n                  overflow=\"auto\"\n                  gap={-8}\n                  label={\n                    <>\n                      <Icon icon={icon} size=\"l\" />\n                      <span class=\"menu-grow\">\n                        <AsyncText>{title}</AsyncText>\n                      </span>\n                      <Icon icon=\"chevron-right\" />\n                    </>\n                  }\n                >\n                  <MenuLink to=\"/l\">\n                    <span>All Lists</span>\n                  </MenuLink>\n                  <MenuDivider />\n                  {lists?.map((list) => (\n                    <MenuLink key={list.id} to={`/l/${list.id}`}>\n                      <span>{list.title}</span>\n                    </MenuLink>\n                  ))}\n                </SubMenu2>\n              );\n            }\n\n            return (\n              <MenuLink\n                to={path}\n                key={`${i}-${id}-${title}-${subtitle}-${path}`}\n                class=\"glass-menu-item\"\n              >\n                <Icon icon={icon} size=\"l\" />{' '}\n                <span class=\"menu-grow\">\n                  <span>\n                    <AsyncText>{title}</AsyncText>\n                  </span>\n                  {subtitle && (\n                    <>\n                      {' '}\n                      <small class=\"more-insignificant\">{subtitle}</small>\n                    </>\n                  )}\n                </span>\n                <span class=\"menu-shortcut hide-until-focus-visible\">\n                  {i + 1}\n                </span>\n              </MenuLink>\n            );\n          })}\n        </Menu2>\n      )}\n    </div>\n  );\n}\n\nexport default memo(Shortcuts);\n","import { api } from './api';\nimport { extractTagsFromStatus, getFollowedTags } from './followed-tags';\nimport pmem from './pmem';\nimport { fetchRelationships } from './relationships';\nimport states, { saveStatus, statusKey } from './states';\nimport store from './store';\nimport supports from './supports';\n\nexport function groupBoosts(values) {\n  let newValues = [];\n  let boostStash = [];\n  let serialBoosts = 0;\n  for (let i = 0; i < values.length; i++) {\n    const item = values[i];\n    if (item.reblog && !item.account?.group) {\n      boostStash.push(item);\n      serialBoosts++;\n    } else {\n      newValues.push(item);\n      if (serialBoosts < 3) {\n        serialBoosts = 0;\n      }\n    }\n  }\n  // if boostStash is more than quarter of values\n  // or if there are 3 or more boosts in a row\n  if (\n    values.length > 10 &&\n    (boostStash.length > values.length / 4 || serialBoosts >= 3)\n  ) {\n    // if boostStash is more than 3 quarter of values\n    const boostStashID = boostStash.map((status) => status.id);\n    if (boostStash.length > (values.length * 3) / 4) {\n      // insert boost array at the end of specialHome list\n      newValues = [\n        ...newValues,\n        { id: boostStashID, items: boostStash, type: 'boosts' },\n      ];\n    } else {\n      // insert boosts array in the middle of specialHome list\n      const half = Math.floor(newValues.length / 2);\n      newValues = [\n        ...newValues.slice(0, half),\n        {\n          id: boostStashID,\n          items: boostStash,\n          type: 'boosts',\n        },\n        ...newValues.slice(half),\n      ];\n    }\n    return newValues;\n  } else {\n    return values;\n  }\n}\n\nexport function dedupeBoosts(items, instance) {\n  const boostedStatusIDs = store.account.get('boostedStatusIDs') || {};\n  const filteredItems = items.filter((item) => {\n    if (!item.reblog) return true;\n    const statusKey = `${instance}-${item.reblog.id}`;\n    const boosterID = boostedStatusIDs[statusKey];\n    if (boosterID && boosterID !== item.id) {\n      console.warn(\n        `🚫 Duplicate boost by ${item.account.displayName}`,\n        item,\n        item.reblog,\n      );\n      return false;\n    } else {\n      boostedStatusIDs[statusKey] = item.id;\n    }\n    return true;\n  });\n  // Limit to 50\n  const keys = Object.keys(boostedStatusIDs);\n  if (keys.length > 50) {\n    keys.slice(0, keys.length - 50).forEach((key) => {\n      delete boostedStatusIDs[key];\n    });\n  }\n  store.account.set('boostedStatusIDs', boostedStatusIDs);\n  return filteredItems;\n}\n\nexport function groupContext(items, instance) {\n  const contexts = [];\n  let contextIndex = 0;\n  items.forEach((item) => {\n    for (let i = 0; i < contexts.length; i++) {\n      if (contexts[i].find((t) => t.id === item.id)) return;\n      if (\n        contexts[i].find((t) => t.id === item.inReplyToId) ||\n        contexts[i].find((t) => t.inReplyToId === item.id)\n      ) {\n        contexts[i].push(item);\n        return;\n      }\n    }\n    const repliedItem = items.find((i) => i.id === item.inReplyToId);\n    if (repliedItem) {\n      contexts[contextIndex++] = [item, repliedItem];\n    }\n  });\n\n  // Check for cross-item contexts\n  // Merge contexts into one if they have a common item (same id)\n  for (let i = 0; i < contexts.length; i++) {\n    for (let j = i + 1; j < contexts.length; j++) {\n      const commonItem = contexts[i].find((t) => contexts[j].includes(t));\n      if (commonItem) {\n        contexts[i] = [...contexts[i], ...contexts[j]];\n        // Remove duplicate items\n        contexts[i] = contexts[i].filter(\n          (item, index, self) =>\n            self.findIndex((t) => t.id === item.id) === index,\n        );\n        contexts.splice(j, 1);\n        j--;\n      }\n    }\n  }\n\n  // Sort items by checking inReplyToId\n  contexts.forEach((context) => {\n    context.sort((a, b) => {\n      if (!a.inReplyToId && !b.inReplyToId) {\n        return new Date(a.createdAt) - new Date(b.createdAt);\n      }\n      if (a.inReplyToId === b.id) return 1;\n      if (b.inReplyToId === a.id) return -1;\n      if (!a.inReplyToId) return -1;\n      if (!b.inReplyToId) return 1;\n      return new Date(a.createdAt) - new Date(b.createdAt);\n    });\n  });\n\n  // Tag items that has different author than first post's author\n  contexts.forEach((context) => {\n    const firstItemAccountID = context[0].account.id;\n    context.forEach((item) => {\n      if (item.account.id !== firstItemAccountID) {\n        item._differentAuthor = true;\n      }\n    });\n  });\n\n  if (contexts.length) console.log('🧵 Contexts', contexts);\n\n  const newItems = [];\n  const appliedContextIndices = [];\n  const inReplyToIds = [];\n  items.forEach((item) => {\n    if (item.reblog) {\n      newItems.push(item);\n      return;\n    }\n    for (let i = 0; i < contexts.length; i++) {\n      if (contexts[i].find((t) => t.id === item.id)) {\n        if (appliedContextIndices.includes(i)) return;\n        const contextItems = contexts[i];\n        contextItems.sort((a, b) => {\n          const aDate = new Date(a.createdAt);\n          const bDate = new Date(b.createdAt);\n          return aDate - bDate;\n        });\n        const firstItemAccountID = contextItems[0].account.id;\n        newItems.push({\n          id: contextItems.map((i) => i.id),\n          items: contextItems,\n          type: contextItems.every((it) => it.account.id === firstItemAccountID)\n            ? 'thread'\n            : 'conversation',\n        });\n        appliedContextIndices.push(i);\n        return;\n      }\n    }\n\n    // PREPARE FOR REPLY HINTS\n    if (item.inReplyToId && item.inReplyToAccountId !== item.account.id) {\n      const sKey = statusKey(item.id, instance);\n      if (!states.statusReply[sKey]) {\n        // If it's a reply and not a thread\n        inReplyToIds.push({\n          sKey,\n          inReplyToId: item.inReplyToId,\n        });\n        // queueMicrotask(async () => {\n        //   try {\n        //     const { masto } = api({ instance });\n        //     // const replyToStatus = await masto.v1.statuses\n        //     //   .$select(item.inReplyToId)\n        //     //   .fetch();\n        //     const replyToStatus = await fetchStatus(item.inReplyToId, masto);\n        //     saveStatus(replyToStatus, instance, {\n        //       skipThreading: true,\n        //       skipUnfurling: true,\n        //     });\n        //     states.statusReply[sKey] = {\n        //       id: replyToStatus.id,\n        //       instance,\n        //     };\n        //   } catch (e) {\n        //     // Silently fail\n        //     console.error(e);\n        //   }\n        // });\n      }\n    }\n\n    newItems.push(item);\n  });\n\n  // FETCH AND SHOW REPLY HINTS\n  if (inReplyToIds?.length) {\n    queueMicrotask(() => {\n      const { masto } = api({ instance });\n      console.log('REPLYHINT', inReplyToIds);\n\n      // Fallback if batch fetch fails or returns nothing or not supported\n      async function fallbackFetch() {\n        for (let i = 0; i < inReplyToIds.length; i++) {\n          const { sKey, inReplyToId } = inReplyToIds[i];\n          try {\n            const replyToStatus = await fetchStatus(inReplyToId, masto);\n            saveStatus(replyToStatus, instance, {\n              skipThreading: true,\n              skipUnfurling: true,\n            });\n            states.statusReply[sKey] = {\n              id: replyToStatus.id,\n              instance,\n            };\n            // Pause 1s\n            await new Promise((resolve) => setTimeout(resolve, 1000));\n          } catch (e) {\n            // Silently fail\n            console.error(e);\n          }\n        }\n      }\n\n      if (supports('@mastodon/fetch-multiple-statuses')) {\n        // This is batch fetching yooo, woot\n        // Limit 20, returns 422 if exceeded https://github.com/mastodon/mastodon/pull/27871\n        const ids = inReplyToIds.map(({ inReplyToId }) => inReplyToId);\n        (async () => {\n          try {\n            const replyToStatuses = await masto.v1.statuses.list({ id: ids });\n            if (replyToStatuses?.length) {\n              for (const replyToStatus of replyToStatuses) {\n                saveStatus(replyToStatus, instance, {\n                  skipThreading: true,\n                  skipUnfurling: true,\n                });\n                const sKey = inReplyToIds.find(\n                  ({ inReplyToId }) => inReplyToId === replyToStatus.id,\n                )?.sKey;\n                if (sKey) {\n                  states.statusReply[sKey] = {\n                    id: replyToStatus.id,\n                    instance,\n                  };\n                }\n              }\n            } else {\n              fallbackFetch();\n            }\n          } catch (e) {\n            // Silently fail\n            console.error(e);\n            fallbackFetch();\n          }\n        })();\n      } else {\n        fallbackFetch();\n      }\n    });\n  }\n\n  return newItems;\n}\n\nconst fetchStatus = pmem((statusID, masto) => {\n  return masto.v1.statuses.$select(statusID).fetch();\n});\n\nexport async function assignFollowedTags(items, instance) {\n  const followedTags = await getFollowedTags(); // [{name: 'tag'}, {...}]\n  if (!followedTags.length) return;\n  const { statusFollowedTags } = states;\n  console.log('statusFollowedTags', statusFollowedTags);\n  const statusWithFollowedTags = [];\n  items.forEach((item) => {\n    if (item.reblog) return;\n    const { id, content, tags = [] } = item;\n    const sKey = statusKey(id, instance);\n    if (statusFollowedTags[sKey]?.length) return;\n    const extractedTags = extractTagsFromStatus(content);\n    if (!extractedTags.length && !tags.length) return;\n    const itemFollowedTags = followedTags.reduce((acc, tag) => {\n      if (\n        extractedTags.some((t) => t.toLowerCase() === tag.name.toLowerCase()) ||\n        tags.some((t) => t.name.toLowerCase() === tag.name.toLowerCase())\n      ) {\n        acc.push(tag.name);\n      }\n      return acc;\n    }, []);\n    if (itemFollowedTags.length) {\n      // statusFollowedTags[sKey] = itemFollowedTags;\n      statusWithFollowedTags.push({\n        item,\n        sKey,\n        followedTags: itemFollowedTags,\n      });\n    }\n  });\n\n  if (statusWithFollowedTags.length) {\n    const accounts = statusWithFollowedTags.map((s) => s.item.account);\n    const relationships = await fetchRelationships(accounts);\n    if (!relationships) return;\n\n    statusWithFollowedTags.forEach((s) => {\n      const { item, sKey, followedTags } = s;\n      const r = relationships[item.account.id];\n      if (r && !r.following) {\n        statusFollowedTags[sKey] = followedTags;\n      }\n    });\n  }\n}\n\nexport function clearFollowedTagsState() {\n  states.statusFollowedTags = {};\n}\n","import { useLayoutEffect, useState } from 'preact/hooks';\n\nexport default function useScroll({\n  scrollableRef,\n  distanceFromStart = 1, // ratio of clientHeight/clientWidth\n  distanceFromEnd = 1, // ratio of clientHeight/clientWidth\n  scrollThresholdStart = 10,\n  scrollThresholdEnd = 10,\n  direction = 'vertical',\n  distanceFromStartPx: _distanceFromStartPx,\n  distanceFromEndPx: _distanceFromEndPx,\n} = {}) {\n  const [scrollDirection, setScrollDirection] = useState(null);\n  const [reachStart, setReachStart] = useState(false);\n  const [reachEnd, setReachEnd] = useState(false);\n  const [nearReachStart, setNearReachStart] = useState(false);\n  const [nearReachEnd, setNearReachEnd] = useState(false);\n  const isVertical = direction === 'vertical';\n\n  useLayoutEffect(() => {\n    const scrollableElement = scrollableRef.current;\n    if (!scrollableElement) return {};\n    let previousScrollStart = isVertical\n      ? scrollableElement.scrollTop\n      : scrollableElement.scrollLeft;\n\n    function onScroll() {\n      const {\n        scrollTop,\n        scrollLeft,\n        scrollHeight,\n        scrollWidth,\n        clientHeight,\n        clientWidth,\n      } = scrollableElement;\n      const scrollStart = isVertical ? scrollTop : scrollLeft;\n      const scrollDimension = isVertical ? scrollHeight : scrollWidth;\n      const clientDimension = isVertical ? clientHeight : clientWidth;\n      const scrollDistance = Math.abs(scrollStart - previousScrollStart);\n      const distanceFromStartPx =\n        _distanceFromStartPx ||\n        Math.min(\n          clientDimension * distanceFromStart,\n          scrollDimension,\n          scrollStart,\n        );\n      const distanceFromEndPx =\n        _distanceFromEndPx ||\n        Math.min(\n          clientDimension * distanceFromEnd,\n          scrollDimension,\n          scrollDimension - scrollStart - clientDimension,\n        );\n\n      if (\n        scrollDistance >=\n        (previousScrollStart < scrollStart\n          ? scrollThresholdEnd\n          : scrollThresholdStart)\n      ) {\n        setScrollDirection(previousScrollStart < scrollStart ? 'end' : 'start');\n        previousScrollStart = scrollStart;\n      }\n\n      setReachStart(scrollStart <= 0);\n      setReachEnd(scrollStart + clientDimension >= scrollDimension);\n      setNearReachStart(scrollStart <= distanceFromStartPx);\n      setNearReachEnd(\n        scrollStart + clientDimension >= scrollDimension - distanceFromEndPx,\n      );\n    }\n\n    scrollableElement.addEventListener('scroll', onScroll, { passive: true });\n\n    return () => scrollableElement.removeEventListener('scroll', onScroll);\n  }, [\n    distanceFromStart,\n    distanceFromEnd,\n    scrollThresholdStart,\n    scrollThresholdEnd,\n  ]);\n\n  return {\n    scrollDirection,\n    reachStart,\n    reachEnd,\n    nearReachStart,\n    nearReachEnd,\n    init: () => {\n      if (scrollableRef.current) {\n        scrollableRef.current.dispatchEvent(new Event('scroll'));\n      }\n    },\n  };\n}\n","import { useEffect, useLayoutEffect, useRef, useState } from 'preact/hooks';\nimport { useThrottledCallback } from 'use-debounce';\n\nexport default function useScrollFn(\n  {\n    scrollableRef,\n    distanceFromStart = 1, // ratio of clientHeight/clientWidth\n    distanceFromEnd = 1, // ratio of clientHeight/clientWidth\n    scrollThresholdStart = 10,\n    scrollThresholdEnd = 10,\n    direction = 'vertical',\n    distanceFromStartPx: _distanceFromStartPx,\n    distanceFromEndPx: _distanceFromEndPx,\n    init,\n  } = {},\n  callback,\n  deps,\n) {\n  if (!callback) return;\n  // const [scrollDirection, setScrollDirection] = useState(null);\n  // const [reachStart, setReachStart] = useState(false);\n  // const [reachEnd, setReachEnd] = useState(false);\n  // const [nearReachStart, setNearReachStart] = useState(false);\n  // const [nearReachEnd, setNearReachEnd] = useState(false);\n  const isVertical = direction === 'vertical';\n  const previousScrollStart = useRef(null);\n  const scrollDirection = useRef(null);\n\n  const onScroll = useThrottledCallback(() => {\n    // let scrollDirection = null;\n    let reachStart = false;\n    let reachEnd = false;\n    let nearReachStart = false;\n    let nearReachEnd = false;\n\n    const scrollableElement = scrollableRef.current;\n    const {\n      scrollTop,\n      scrollLeft,\n      scrollHeight,\n      scrollWidth,\n      clientHeight,\n      clientWidth,\n    } = scrollableElement;\n    const scrollStart = isVertical ? scrollTop : scrollLeft;\n    const scrollDimension = isVertical ? scrollHeight : scrollWidth;\n    const clientDimension = isVertical ? clientHeight : clientWidth;\n    const scrollDistance = Math.abs(scrollStart - previousScrollStart.current);\n    const distanceFromStartPx =\n      _distanceFromStartPx ||\n      Math.min(\n        clientDimension * distanceFromStart,\n        scrollDimension,\n        scrollStart,\n      );\n    const distanceFromEndPx =\n      _distanceFromEndPx ||\n      Math.min(\n        clientDimension * distanceFromEnd,\n        scrollDimension,\n        scrollDimension - scrollStart - clientDimension,\n      );\n\n    if (\n      scrollDistance >=\n      (previousScrollStart.current < scrollStart\n        ? scrollThresholdEnd\n        : scrollThresholdStart)\n    ) {\n      // setScrollDirection(\n      //   previousScrollStart.current < scrollStart ? 'end' : 'start',\n      // );\n      scrollDirection.current =\n        previousScrollStart.current < scrollStart ? 'end' : 'start';\n      previousScrollStart.current = scrollStart;\n    }\n\n    // setReachStart(scrollStart <= 0);\n    // setReachEnd(scrollStart + clientDimension >= scrollDimension);\n    // setNearReachStart(scrollStart <= distanceFromStartPx);\n    // setNearReachEnd(\n    //   scrollStart + clientDimension >= scrollDimension - distanceFromEndPx,\n    // );\n    reachStart = scrollStart <= 0;\n    reachEnd = scrollStart + clientDimension >= scrollDimension;\n    nearReachStart = scrollStart <= distanceFromStartPx;\n    nearReachEnd =\n      scrollStart + clientDimension >= scrollDimension - distanceFromEndPx;\n\n    callback({\n      scrollDirection: scrollDirection.current,\n      reachStart,\n      reachEnd,\n      nearReachStart,\n      nearReachEnd,\n    });\n  }, 500);\n\n  useLayoutEffect(() => {\n    const scrollableElement = scrollableRef.current;\n    if (!scrollableElement) return {};\n    previousScrollStart.current =\n      scrollableElement[isVertical ? 'scrollTop' : 'scrollLeft'];\n\n    scrollableElement.addEventListener('scroll', onScroll, { passive: true });\n\n    return () => scrollableElement.removeEventListener('scroll', onScroll);\n  }, [\n    distanceFromStart,\n    distanceFromEnd,\n    scrollThresholdStart,\n    scrollThresholdEnd,\n    ...deps,\n  ]);\n\n  // useEffect(() => {\n  //   callback({\n  //     scrollDirection,\n  //     reachStart,\n  //     reachEnd,\n  //     nearReachStart,\n  //     nearReachEnd,\n  //   });\n  // }, [\n  //   scrollDirection,\n  //   reachStart,\n  //   reachEnd,\n  //   nearReachStart,\n  //   nearReachEnd,\n  //   ...deps,\n  // ]);\n\n  useEffect(() => {\n    if (init && scrollableRef.current) {\n      queueMicrotask(() => {\n        scrollableRef.current.dispatchEvent(new Event('scroll'));\n      });\n    }\n  }, [init]);\n\n  // return {\n  //   scrollDirection,\n  //   reachStart,\n  //   reachEnd,\n  //   nearReachStart,\n  //   nearReachEnd,\n  //   init: () => {\n  //     if (scrollableRef.current) {\n  //       scrollableRef.current.dispatchEvent(new Event('scroll'));\n  //     }\n  //   },\n  // };\n}\n","import './media-post.css';\n\nimport { memo } from 'preact/compat';\nimport { useContext, useMemo } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport FilterContext from '../utils/filter-context';\nimport { isFiltered } from '../utils/filters';\nimport states, { statusKey } from '../utils/states';\nimport store from '../utils/store';\nimport { getCurrentAccountID } from '../utils/store-utils';\n\nimport Media from './media';\n\nfunction MediaPost({\n  class: className,\n  statusID,\n  status,\n  instance,\n  parent,\n  // allowFilters,\n  onMediaClick,\n}) {\n  let sKey = statusKey(statusID, instance);\n  const snapStates = useSnapshot(states);\n  if (!status) {\n    status = snapStates.statuses[sKey] || snapStates.statuses[statusID];\n    sKey = statusKey(status?.id, instance);\n  }\n  if (!status) {\n    return null;\n  }\n\n  const {\n    account: {\n      acct,\n      avatar,\n      avatarStatic,\n      id: accountId,\n      url: accountURL,\n      displayName,\n      username,\n      emojis: accountEmojis,\n      bot,\n      group,\n    },\n    id,\n    repliesCount,\n    reblogged,\n    reblogsCount,\n    favourited,\n    favouritesCount,\n    bookmarked,\n    poll,\n    muted,\n    sensitive,\n    spoilerText,\n    visibility, // public, unlisted, private, direct\n    language,\n    editedAt,\n    filtered,\n    card,\n    createdAt,\n    inReplyToId,\n    inReplyToAccountId,\n    content,\n    mentions,\n    mediaAttachments,\n    reblog,\n    uri,\n    url,\n    emojis,\n    // Non-API props\n    _deleted,\n    _pinned,\n    // _filtered,\n  } = status;\n\n  if (!mediaAttachments?.length) {\n    return null;\n  }\n\n  const debugHover = (e) => {\n    if (e.shiftKey) {\n      console.log({\n        ...status,\n      });\n    }\n  };\n\n  const currentAccount = useMemo(() => {\n    return getCurrentAccountID();\n  }, []);\n  const isSelf = useMemo(() => {\n    return currentAccount && currentAccount === accountId;\n  }, [accountId, currentAccount]);\n\n  const filterContext = useContext(FilterContext);\n  const filterInfo = !isSelf && isFiltered(filtered, filterContext);\n\n  if (filterInfo?.action === 'hide') {\n    return null;\n  }\n\n  console.debug('RENDER Media post', id, status?.account.displayName);\n\n  const hasSpoiler = sensitive;\n  const readingExpandMedia = useMemo(() => {\n    // default | show_all | hide_all\n    const prefs = store.account.get('preferences') || {};\n    return prefs['reading:expand:media'] || 'default';\n  }, []);\n  const showSpoilerMedia = readingExpandMedia === 'show_all';\n\n  const Parent = parent || 'div';\n\n  return mediaAttachments.map((media, i) => {\n    const mediaKey = `${sKey}-${media.id}`;\n    const filterTitleStr = filterInfo?.titlesStr;\n    return (\n      <Parent\n        data-state-post-id={sKey}\n        onMouseEnter={debugHover}\n        key={mediaKey}\n        data-spoiler-text={\n          spoilerText || (sensitive ? 'Sensitive media' : undefined)\n        }\n        data-filtered-text={\n          filterInfo\n            ? `Filtered${filterTitleStr ? `: ${filterTitleStr}` : ''}`\n            : undefined\n        }\n        class={`\n          media-post\n          ${filterInfo ? 'filtered' : ''}\n          ${hasSpoiler ? 'has-spoiler' : ''}\n          ${showSpoilerMedia ? 'show-media' : ''}\n        `}\n      >\n        <Media\n          class={className}\n          media={media}\n          lang={language}\n          to={`/${instance}/s/${id}?media-only=${i + 1}`}\n          onClick={\n            onMediaClick ? (e) => onMediaClick(e, i, media, status) : undefined\n          }\n        />\n      </Parent>\n    );\n  });\n}\n\nexport default memo(MediaPost);\n","import './nav-menu.css';\n\nimport { ControlledMenu, MenuDivider, MenuItem } from '@szhsin/react-menu';\nimport { memo } from 'preact/compat';\nimport { useEffect, useMemo, useRef, useState } from 'preact/hooks';\nimport { useLongPress } from 'use-long-press';\nimport { useSnapshot } from 'valtio';\n\nimport { api } from '../utils/api';\nimport { getLists } from '../utils/lists';\nimport safeBoundingBoxPadding from '../utils/safe-bounding-box-padding';\nimport states from '../utils/states';\nimport store from '../utils/store';\nimport { getCurrentAccountID } from '../utils/store-utils';\nimport supports from '../utils/supports';\n\nimport Avatar from './avatar';\nimport Icon from './icon';\nimport MenuLink from './menu-link';\nimport SubMenu2 from './submenu2';\n\nfunction NavMenu(props) {\n  const snapStates = useSnapshot(states);\n  const { masto, instance, authenticated } = api();\n\n  const [currentAccount, moreThanOneAccount] = useMemo(() => {\n    const accounts = store.local.getJSON('accounts') || [];\n    const acc =\n      accounts.find((account) => account.info.id === getCurrentAccountID()) ||\n      accounts[0];\n    return [acc, accounts.length > 1];\n  }, []);\n\n  // Home = Following\n  // But when in multi-column mode, Home becomes columns of anything\n  // User may choose pin or not to pin Following\n  // If user doesn't pin Following, we show it in the menu\n  const showFollowing =\n    (snapStates.settings.shortcutsViewMode === 'multi-column' ||\n      (!snapStates.settings.shortcutsViewMode &&\n        snapStates.settings.shortcutsColumnsMode)) &&\n    !snapStates.shortcuts.find((pin) => pin.type === 'following');\n\n  const bindLongPress = useLongPress(\n    () => {\n      states.showAccounts = true;\n    },\n    {\n      threshold: 600,\n      detect: 'touch',\n      cancelOnMovement: true,\n    },\n  );\n\n  const buttonRef = useRef();\n  const [menuState, setMenuState] = useState(undefined);\n\n  const boundingBoxPadding = safeBoundingBoxPadding([\n    0,\n    0,\n    snapStates.settings.shortcutsViewMode === 'tab-menu-bar' ? 50 : 0,\n    0,\n  ]);\n\n  const mutesIterator = useRef();\n  async function fetchMutes(firstLoad) {\n    if (firstLoad || !mutesIterator.current) {\n      mutesIterator.current = masto.v1.mutes.list({\n        limit: 80,\n      });\n    }\n    const results = await mutesIterator.current.next();\n    return results;\n  }\n\n  const blocksIterator = useRef();\n  async function fetchBlocks(firstLoad) {\n    if (firstLoad || !blocksIterator.current) {\n      blocksIterator.current = masto.v1.blocks.list({\n        limit: 80,\n      });\n    }\n    const results = await blocksIterator.current.next();\n    return results;\n  }\n\n  const supportsLists = supports('@mastodon/lists');\n  const [lists, setLists] = useState([]);\n  useEffect(() => {\n    if (!supportsLists) return;\n    if (menuState === 'open') {\n      getLists().then(setLists);\n    }\n  }, [menuState === 'open']);\n\n  const buttonClickTS = useRef();\n  return (\n    <>\n      <button\n        ref={buttonRef}\n        type=\"button\"\n        class={`button plain nav-menu-button ${\n          moreThanOneAccount ? 'with-avatar' : ''\n        } ${menuState === 'open' ? 'active' : ''}`}\n        style={{ position: 'relative' }}\n        onClick={() => {\n          buttonClickTS.current = Date.now();\n          setMenuState((state) => (!state ? 'open' : undefined));\n        }}\n        onContextMenu={(e) => {\n          e.preventDefault();\n          states.showAccounts = true;\n        }}\n        {...bindLongPress()}\n      >\n        {moreThanOneAccount && (\n          <Avatar\n            url={\n              currentAccount?.info?.avatar || currentAccount?.info?.avatarStatic\n            }\n            size=\"l\"\n            squircle={currentAccount?.info?.bot}\n          />\n        )}\n        <Icon icon=\"menu\" size={moreThanOneAccount ? 's' : 'l'} />\n      </button>\n      <ControlledMenu\n        menuClassName=\"nav-menu\"\n        state={menuState}\n        anchorRef={buttonRef}\n        onClose={() => {\n          setMenuState(undefined);\n        }}\n        containerProps={{\n          style: {\n            zIndex: 10,\n          },\n          onClick: () => {\n            if (Date.now() - buttonClickTS.current < 300) {\n              return;\n            }\n            // setMenuState(undefined);\n          },\n        }}\n        portal={{\n          target: document.body,\n        }}\n        {...props}\n        overflow=\"auto\"\n        viewScroll=\"close\"\n        position=\"anchor\"\n        align=\"center\"\n        boundingBoxPadding={boundingBoxPadding}\n        unmountOnClose\n      >\n        {!!snapStates.appVersion?.commitHash &&\n          __COMMIT_HASH__ !== snapStates.appVersion.commitHash && (\n            <div class=\"top-menu\">\n              <MenuItem\n                onClick={() => {\n                  const yes = confirm('Reload page now to update?');\n                  if (yes) {\n                    (async () => {\n                      try {\n                        location.reload();\n                      } catch (e) {}\n                    })();\n                  }\n                }}\n              >\n                <Icon icon=\"sparkles\" class=\"sparkle-icon\" size=\"l\" />{' '}\n                <span>New update available…</span>\n              </MenuItem>\n              <MenuDivider />\n            </div>\n          )}\n        <section>\n          <MenuLink to=\"/\">\n            <Icon icon=\"home\" size=\"l\" /> <span>Home</span>\n          </MenuLink>\n          {authenticated ? (\n            <>\n              {showFollowing && (\n                <MenuLink to=\"/following\">\n                  <Icon icon=\"following\" size=\"l\" /> <span>Following</span>\n                </MenuLink>\n              )}\n              <MenuLink to=\"/catchup\">\n                <Icon icon=\"history2\" size=\"l\" />\n                <span>Catch-up</span>\n              </MenuLink>\n              {supports('@mastodon/mentions') && (\n                <MenuLink to=\"/mentions\">\n                  <Icon icon=\"at\" size=\"l\" /> <span>Mentions</span>\n                </MenuLink>\n              )}\n              <MenuLink to=\"/notifications\">\n                <Icon icon=\"notification\" size=\"l\" /> <span>Notifications</span>\n                {snapStates.notificationsShowNew && (\n                  <sup title=\"New\" style={{ opacity: 0.5 }}>\n                    {' '}\n                    &bull;\n                  </sup>\n                )}\n              </MenuLink>\n              <MenuDivider />\n              {currentAccount?.info?.id && (\n                <MenuLink to={`/${instance}/a/${currentAccount.info.id}`}>\n                  <Icon icon=\"user\" size=\"l\" /> <span>Profile</span>\n                </MenuLink>\n              )}\n              {lists?.length > 0 ? (\n                <SubMenu2\n                  menuClassName=\"nav-submenu\"\n                  overflow=\"auto\"\n                  gap={-8}\n                  label={\n                    <>\n                      <Icon icon=\"list\" size=\"l\" />\n                      <span class=\"menu-grow\">Lists</span>\n                      <Icon icon=\"chevron-right\" />\n                    </>\n                  }\n                >\n                  <MenuLink to=\"/l\">\n                    <span>All Lists</span>\n                  </MenuLink>\n                  {lists?.length > 0 && (\n                    <>\n                      <MenuDivider />\n                      {lists.map((list) => (\n                        <MenuLink key={list.id} to={`/l/${list.id}`}>\n                          <span>{list.title}</span>\n                        </MenuLink>\n                      ))}\n                    </>\n                  )}\n                </SubMenu2>\n              ) : (\n                supportsLists && (\n                  <MenuLink to=\"/l\">\n                    <Icon icon=\"list\" size=\"l\" />\n                    <span>Lists</span>\n                  </MenuLink>\n                )\n              )}\n              <MenuLink to=\"/b\">\n                <Icon icon=\"bookmark\" size=\"l\" /> <span>Bookmarks</span>\n              </MenuLink>\n              <SubMenu2\n                menuClassName=\"nav-submenu\"\n                overflow=\"auto\"\n                gap={-8}\n                label={\n                  <>\n                    <Icon icon=\"more\" size=\"l\" />\n                    <span class=\"menu-grow\">More…</span>\n                    <Icon icon=\"chevron-right\" />\n                  </>\n                }\n              >\n                <MenuLink to=\"/f\">\n                  <Icon icon=\"heart\" size=\"l\" /> <span>Likes</span>\n                </MenuLink>\n                <MenuLink to=\"/fh\">\n                  <Icon icon=\"hashtag\" size=\"l\" />{' '}\n                  <span>Followed Hashtags</span>\n                </MenuLink>\n                <MenuDivider />\n                {supports('@mastodon/filters') && (\n                  <MenuLink to=\"/ft\">\n                    <Icon icon=\"filters\" size=\"l\" />\n                    Filters\n                  </MenuLink>\n                )}\n                <MenuItem\n                  onClick={() => {\n                    states.showGenericAccounts = {\n                      id: 'mute',\n                      heading: 'Muted users',\n                      fetchAccounts: fetchMutes,\n                      excludeRelationshipAttrs: ['muting'],\n                    };\n                  }}\n                >\n                  <Icon icon=\"mute\" size=\"l\" /> Muted users&hellip;\n                </MenuItem>\n                <MenuItem\n                  onClick={() => {\n                    states.showGenericAccounts = {\n                      id: 'block',\n                      heading: 'Blocked users',\n                      fetchAccounts: fetchBlocks,\n                      excludeRelationshipAttrs: ['blocking'],\n                    };\n                  }}\n                >\n                  <Icon icon=\"block\" size=\"l\" />\n                  Blocked users&hellip;\n                </MenuItem>{' '}\n              </SubMenu2>\n              <MenuDivider />\n              <MenuItem\n                onClick={() => {\n                  states.showAccounts = true;\n                }}\n              >\n                <Icon icon=\"group\" size=\"l\" /> <span>Accounts&hellip;</span>\n              </MenuItem>\n            </>\n          ) : (\n            <>\n              <MenuDivider />\n              <MenuLink to=\"/login\">\n                <Icon icon=\"user\" size=\"l\" /> <span>Log in</span>\n              </MenuLink>\n            </>\n          )}\n        </section>\n        <section>\n          <MenuDivider />\n          <MenuLink to={`/search`}>\n            <Icon icon=\"search\" size=\"l\" /> <span>Search</span>\n          </MenuLink>\n          <MenuLink to={`/${instance}/trending`}>\n            <Icon icon=\"chart\" size=\"l\" /> <span>Trending</span>\n          </MenuLink>\n          <MenuLink to={`/${instance}/p/l`}>\n            <Icon icon=\"building\" size=\"l\" /> <span>Local</span>\n          </MenuLink>\n          <MenuLink to={`/${instance}/p`}>\n            <Icon icon=\"earth\" size=\"l\" /> <span>Federated</span>\n          </MenuLink>\n          {authenticated ? (\n            <>\n              <MenuDivider className=\"divider-grow\" />\n              <MenuItem\n                onClick={() => {\n                  states.showKeyboardShortcutsHelp = true;\n                }}\n              >\n                <Icon icon=\"keyboard\" size=\"l\" />{' '}\n                <span>Keyboard shortcuts</span>\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  states.showShortcutsSettings = true;\n                }}\n              >\n                <Icon icon=\"shortcut\" size=\"l\" />{' '}\n                <span>Shortcuts / Columns&hellip;</span>\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  states.showSettings = true;\n                }}\n              >\n                <Icon icon=\"gear\" size=\"l\" /> <span>Settings&hellip;</span>\n              </MenuItem>\n            </>\n          ) : (\n            <>\n              <MenuDivider />\n              <MenuItem\n                onClick={() => {\n                  states.showSettings = true;\n                }}\n              >\n                <Icon icon=\"gear\" size=\"l\" /> <span>Settings&hellip;</span>\n              </MenuItem>\n            </>\n          )}\n        </section>\n      </ControlledMenu>\n    </>\n  );\n}\n\nexport default memo(NavMenu);\n","import { memo } from 'preact/compat';\nimport {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { InView } from 'react-intersection-observer';\nimport { useDebouncedCallback } from 'use-debounce';\nimport { useSnapshot } from 'valtio';\n\nimport FilterContext from '../utils/filter-context';\nimport { filteredItems, isFiltered } from '../utils/filters';\nimport states, { statusKey } from '../utils/states';\nimport statusPeek from '../utils/status-peek';\nimport { isMediaFirstInstance } from '../utils/store-utils';\nimport { groupBoosts, groupContext } from '../utils/timeline-utils';\nimport useInterval from '../utils/useInterval';\nimport usePageVisibility from '../utils/usePageVisibility';\nimport useScroll from '../utils/useScroll';\nimport useScrollFn from '../utils/useScrollFn';\n\nimport Icon from './icon';\nimport Link from './link';\nimport MediaPost from './media-post';\nimport NavMenu from './nav-menu';\nimport Status from './status';\n\nconst scrollIntoViewOptions = {\n  block: 'nearest',\n  inline: 'center',\n  behavior: 'smooth',\n};\n\nfunction Timeline({\n  title,\n  titleComponent,\n  id,\n  instance,\n  emptyText,\n  errorText,\n  useItemID, // use statusID instead of status object, assuming it's already in states\n  boostsCarousel,\n  fetchItems = () => {},\n  checkForUpdates = () => {},\n  checkForUpdatesInterval = 15_000, // 15 seconds\n  headerStart,\n  headerEnd,\n  timelineStart,\n  // allowFilters,\n  refresh,\n  view,\n  filterContext,\n  showFollowedTags,\n  showReplyParent,\n}) {\n  const snapStates = useSnapshot(states);\n  const [items, setItems] = useState([]);\n  const [uiState, setUIState] = useState('start');\n  const [showMore, setShowMore] = useState(false);\n  const [showNew, setShowNew] = useState(false);\n  const [visible, setVisible] = useState(true);\n  const scrollableRef = useRef();\n\n  console.debug('RENDER Timeline', id, refresh);\n\n  const mediaFirst = useMemo(() => isMediaFirstInstance(), []);\n\n  const allowGrouping = view !== 'media';\n  const loadItems = useDebouncedCallback(\n    (firstLoad) => {\n      setShowNew(false);\n      if (uiState === 'loading') return;\n      setUIState('loading');\n      (async () => {\n        try {\n          let { done, value } = await fetchItems(firstLoad);\n          if (Array.isArray(value)) {\n            // Avoid grouping for pinned posts\n            const [pinnedPosts, otherPosts] = value.reduce(\n              (acc, item) => {\n                if (item._pinned) {\n                  acc[0].push(item);\n                } else {\n                  acc[1].push(item);\n                }\n                return acc;\n              },\n              [[], []],\n            );\n            value = otherPosts;\n            if (allowGrouping) {\n              if (boostsCarousel) {\n                value = groupBoosts(value);\n              }\n              value = groupContext(value, instance);\n            }\n            if (pinnedPosts.length) {\n              value = pinnedPosts.concat(value);\n            }\n            console.log(value);\n            if (firstLoad) {\n              setItems(value);\n            } else {\n              setItems((items) => [...items, ...value]);\n            }\n            if (!value.length) done = true;\n            setShowMore(!done);\n          } else {\n            setShowMore(false);\n          }\n          setUIState('default');\n        } catch (e) {\n          console.error(e);\n          setUIState('error');\n        } finally {\n          loadItems.cancel();\n        }\n      })();\n    },\n    1500,\n    {\n      leading: true,\n      trailing: false,\n    },\n  );\n\n  const itemsSelector = '.timeline-item, .timeline-item-alt';\n\n  const jRef = useHotkeys('j, shift+j', (_, handler) => {\n    // focus on next status after active item\n    const activeItem = document.activeElement.closest(itemsSelector);\n    const activeItemRect = activeItem?.getBoundingClientRect();\n    const allItems = Array.from(\n      scrollableRef.current.querySelectorAll(itemsSelector),\n    );\n    if (\n      activeItem &&\n      activeItemRect.top < scrollableRef.current.clientHeight &&\n      activeItemRect.bottom > 0\n    ) {\n      const activeItemIndex = allItems.indexOf(activeItem);\n      let nextItem = allItems[activeItemIndex + 1];\n      if (handler.shift) {\n        // get next status that's not .timeline-item-alt\n        nextItem = allItems.find(\n          (item, index) =>\n            index > activeItemIndex &&\n            !item.classList.contains('timeline-item-alt'),\n        );\n      }\n      if (nextItem) {\n        nextItem.focus();\n        nextItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostItem = allItems.find((item) => {\n        const itemRect = item.getBoundingClientRect();\n        return itemRect.top >= 44 && itemRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostItem) {\n        topmostItem.focus();\n        topmostItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    }\n  });\n\n  const kRef = useHotkeys('k, shift+k', (_, handler) => {\n    // focus on previous status after active item\n    const activeItem = document.activeElement.closest(itemsSelector);\n    const activeItemRect = activeItem?.getBoundingClientRect();\n    const allItems = Array.from(\n      scrollableRef.current.querySelectorAll(itemsSelector),\n    );\n    if (\n      activeItem &&\n      activeItemRect.top < scrollableRef.current.clientHeight &&\n      activeItemRect.bottom > 0\n    ) {\n      const activeItemIndex = allItems.indexOf(activeItem);\n      let prevItem = allItems[activeItemIndex - 1];\n      if (handler.shift) {\n        // get prev status that's not .timeline-item-alt\n        prevItem = allItems.findLast(\n          (item, index) =>\n            index < activeItemIndex &&\n            !item.classList.contains('timeline-item-alt'),\n        );\n      }\n      if (prevItem) {\n        prevItem.focus();\n        prevItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostItem = allItems.find((item) => {\n        const itemRect = item.getBoundingClientRect();\n        return itemRect.top >= 44 && itemRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostItem) {\n        topmostItem.focus();\n        topmostItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    }\n  });\n\n  const oRef = useHotkeys(['enter', 'o'], () => {\n    // open active status\n    const activeItem = document.activeElement;\n    if (activeItem?.matches(itemsSelector)) {\n      activeItem.click();\n    }\n  });\n\n  const showNewPostsIndicator =\n    items.length > 0 && uiState !== 'loading' && showNew;\n  const handleLoadNewPosts = useCallback(() => {\n    if (showNewPostsIndicator) loadItems(true);\n    scrollableRef.current?.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  }, [loadItems, showNewPostsIndicator]);\n  const dotRef = useHotkeys('.', handleLoadNewPosts);\n\n  // const {\n  //   scrollDirection,\n  //   nearReachStart,\n  //   nearReachEnd,\n  //   reachStart,\n  //   reachEnd,\n  // } = useScroll({\n  //   scrollableRef,\n  //   distanceFromEnd: 2,\n  //   scrollThresholdStart: 44,\n  // });\n  const headerRef = useRef();\n  // const [hiddenUI, setHiddenUI] = useState(false);\n  const [nearReachStart, setNearReachStart] = useState(false);\n  useScrollFn(\n    {\n      scrollableRef,\n      distanceFromEnd: 2,\n      scrollThresholdStart: 44,\n    },\n    ({\n      scrollDirection,\n      nearReachStart,\n      // nearReachEnd,\n      reachStart,\n      // reachEnd,\n    }) => {\n      // setHiddenUI(scrollDirection === 'end' && !nearReachEnd);\n      if (headerRef.current) {\n        const hiddenUI = scrollDirection === 'end' && !nearReachStart;\n        headerRef.current.hidden = hiddenUI;\n      }\n      setNearReachStart(nearReachStart);\n      if (reachStart) {\n        loadItems(true);\n      }\n      // else if (nearReachEnd || (reachEnd && showMore)) {\n      //   loadItems();\n      // }\n    },\n    [],\n  );\n\n  useEffect(() => {\n    scrollableRef.current?.scrollTo({ top: 0 });\n    loadItems(true);\n  }, []);\n  useEffect(() => {\n    loadItems(true);\n  }, [refresh]);\n\n  // useEffect(() => {\n  //   if (reachStart) {\n  //     loadItems(true);\n  //   }\n  // }, [reachStart]);\n\n  // useEffect(() => {\n  //   if (nearReachEnd || (reachEnd && showMore)) {\n  //     loadItems();\n  //   }\n  // }, [nearReachEnd, showMore]);\n\n  const prevView = useRef(view);\n  useEffect(() => {\n    if (prevView.current !== view) {\n      prevView.current = view;\n      setItems([]);\n    }\n  }, [view]);\n\n  const loadOrCheckUpdates = useCallback(\n    async ({ disableIdleCheck = false } = {}) => {\n      const noPointers = scrollableRef.current\n        ? getComputedStyle(scrollableRef.current).pointerEvents === 'none'\n        : false;\n      console.log('✨ Load or check updates', id, {\n        autoRefresh: snapStates.settings.autoRefresh,\n        scrollTop: scrollableRef.current.scrollTop,\n        disableIdleCheck,\n        idle: window.__IDLE__,\n        inBackground: inBackground(),\n        noPointers,\n      });\n      if (\n        snapStates.settings.autoRefresh &&\n        scrollableRef.current.scrollTop < 16 &&\n        (disableIdleCheck || window.__IDLE__) &&\n        !inBackground() &&\n        !noPointers\n      ) {\n        console.log('✨ Load updates', id, snapStates.settings.autoRefresh);\n        loadItems(true);\n      } else {\n        console.log('✨ Check updates', id, snapStates.settings.autoRefresh);\n        const hasUpdate = await checkForUpdates();\n        if (hasUpdate) {\n          console.log('✨ Has new updates', id);\n          setShowNew(true);\n        }\n      }\n    },\n    [id, loadItems, checkForUpdates, snapStates.settings.autoRefresh],\n  );\n\n  const lastHiddenTime = useRef();\n  usePageVisibility(\n    (visible) => {\n      if (visible) {\n        const timeDiff = Date.now() - lastHiddenTime.current;\n        if (!lastHiddenTime.current || timeDiff > 1000 * 3) {\n          // 3 seconds\n          loadOrCheckUpdates({\n            disableIdleCheck: true,\n          });\n        }\n      } else {\n        lastHiddenTime.current = Date.now();\n      }\n      setVisible(visible);\n    },\n    [checkForUpdates, loadOrCheckUpdates, snapStates.settings.autoRefresh],\n  );\n\n  // checkForUpdates interval\n  useInterval(\n    loadOrCheckUpdates,\n    visible && !showNew\n      ? checkForUpdatesInterval * (nearReachStart ? 1 : 2)\n      : null,\n  );\n\n  // const hiddenUI = scrollDirection === 'end' && !nearReachStart;\n\n  return (\n    <FilterContext.Provider value={filterContext}>\n      <div\n        id={`${id}-page`}\n        class={`deck-container ${\n          mediaFirst ? 'deck-container-media-first' : ''\n        }`}\n        ref={(node) => {\n          scrollableRef.current = node;\n          jRef.current = node;\n          kRef.current = node;\n          oRef.current = node;\n          dotRef.current = node;\n        }}\n        tabIndex=\"-1\"\n      >\n        <div class=\"timeline-deck deck\">\n          <header\n            ref={headerRef}\n            // hidden={hiddenUI}\n            onClick={(e) => {\n              if (!e.target.closest('a, button')) {\n                scrollableRef.current?.scrollTo({\n                  top: 0,\n                  behavior: 'smooth',\n                });\n              }\n            }}\n            onDblClick={(e) => {\n              if (!e.target.closest('a, button')) {\n                loadItems(true);\n              }\n            }}\n            class={uiState === 'loading' ? 'loading' : ''}\n          >\n            <div class=\"header-grid\">\n              <div class=\"header-side\">\n                <NavMenu />\n                {headerStart !== null && headerStart !== undefined ? (\n                  headerStart\n                ) : (\n                  <Link to=\"/\" class=\"button plain home-button\">\n                    <Icon icon=\"home\" size=\"l\" />\n                  </Link>\n                )}\n              </div>\n              {title && (titleComponent ? titleComponent : <h1>{title}</h1>)}\n              <div class=\"header-side\">\n                {/* <Loader hidden={uiState !== 'loading'} /> */}\n                {!!headerEnd && headerEnd}\n              </div>\n            </div>\n            {showNewPostsIndicator && (\n              <button\n                class=\"updates-button shiny-pill\"\n                type=\"button\"\n                onClick={handleLoadNewPosts}\n              >\n                <Icon icon=\"arrow-up\" /> New posts\n              </button>\n            )}\n          </header>\n          {!!timelineStart && (\n            <div\n              class={`timeline-start ${uiState === 'loading' ? 'loading' : ''}`}\n            >\n              {timelineStart}\n            </div>\n          )}\n          {!!items.length ? (\n            <>\n              <ul class={`timeline ${view ? `timeline-${view}` : ''}`}>\n                {items.map((status) => (\n                  <TimelineItem\n                    status={status}\n                    instance={instance}\n                    useItemID={useItemID}\n                    // allowFilters={allowFilters}\n                    filterContext={filterContext}\n                    key={status.id + status?._pinned + view}\n                    view={view}\n                    showFollowedTags={showFollowedTags}\n                    showReplyParent={showReplyParent}\n                    mediaFirst={mediaFirst}\n                  />\n                ))}\n                {showMore &&\n                  uiState === 'loading' &&\n                  (view === 'media' ? null : (\n                    <>\n                      <li\n                        style={{\n                          height: '20vh',\n                        }}\n                      >\n                        <Status skeleton mediaFirst={mediaFirst} />\n                      </li>\n                      <li\n                        style={{\n                          height: '25vh',\n                        }}\n                      >\n                        <Status skeleton mediaFirst={mediaFirst} />\n                      </li>\n                    </>\n                  ))}\n              </ul>\n              {uiState === 'default' &&\n                (showMore ? (\n                  <InView\n                    root={scrollableRef.current}\n                    rootMargin={`0px 0px ${screen.height * 1.5}px 0px`}\n                    onChange={(inView) => {\n                      if (inView) {\n                        loadItems();\n                      }\n                    }}\n                  >\n                    <button\n                      type=\"button\"\n                      class=\"plain block\"\n                      onClick={() => loadItems()}\n                      style={{ marginBlockEnd: '6em' }}\n                    >\n                      Show more&hellip;\n                    </button>\n                  </InView>\n                ) : (\n                  <p class=\"ui-state insignificant\">The end.</p>\n                ))}\n            </>\n          ) : uiState === 'loading' ? (\n            <ul class=\"timeline\">\n              {Array.from({ length: 5 }).map((_, i) =>\n                view === 'media' ? (\n                  <div\n                    style={{\n                      height: '50vh',\n                    }}\n                  />\n                ) : (\n                  <li key={i}>\n                    <Status skeleton mediaFirst={mediaFirst} />\n                  </li>\n                ),\n              )}\n            </ul>\n          ) : (\n            uiState !== 'error' &&\n            uiState !== 'start' && <p class=\"ui-state\">{emptyText}</p>\n          )}\n          {uiState === 'error' && (\n            <p class=\"ui-state\">\n              {errorText}\n              <br />\n              <br />\n              <button type=\"button\" onClick={() => loadItems(!items.length)}>\n                Try again\n              </button>\n            </p>\n          )}\n        </div>\n      </div>\n    </FilterContext.Provider>\n  );\n}\n\nconst TimelineItem = memo(\n  ({\n    status,\n    instance,\n    useItemID,\n    // allowFilters,\n    filterContext,\n    view,\n    showFollowedTags,\n    showReplyParent,\n    mediaFirst,\n  }) => {\n    console.debug('RENDER TimelineItem', status.id);\n    const { id: statusID, reblog, items, type, _pinned } = status;\n    if (_pinned) useItemID = false;\n    const actualStatusID = reblog?.id || statusID;\n    const url = instance\n      ? `/${instance}/s/${actualStatusID}`\n      : `/s/${actualStatusID}`;\n\n    if (items) {\n      const fItems = filteredItems(items, filterContext);\n      let title = '';\n      if (type === 'boosts') {\n        title = `${fItems.length} Boosts`;\n      } else if (type === 'pinned') {\n        title = 'Pinned posts';\n      }\n      const isCarousel = type === 'boosts' || type === 'pinned';\n      if (isCarousel) {\n        // Here, we don't hide filtered posts, but we sort them last\n        fItems.sort((a, b) => {\n          // if (a._filtered && !b._filtered) {\n          //   return 1;\n          // }\n          // if (!a._filtered && b._filtered) {\n          //   return -1;\n          // }\n          const aFiltered = isFiltered(a.filtered, filterContext);\n          const bFiltered = isFiltered(b.filtered, filterContext);\n          if (aFiltered && !bFiltered) {\n            return 1;\n          }\n          if (!aFiltered && bFiltered) {\n            return -1;\n          }\n          return 0;\n        });\n        return (\n          <li key={`timeline-${statusID}`} class=\"timeline-item-carousel\">\n            <StatusCarousel title={title} class={`${type}-carousel`}>\n              {fItems.map((item) => {\n                const { id: statusID, reblog, _pinned } = item;\n                const actualStatusID = reblog?.id || statusID;\n                const url = instance\n                  ? `/${instance}/s/${actualStatusID}`\n                  : `/s/${actualStatusID}`;\n                if (_pinned) useItemID = false;\n                return (\n                  <li key={statusID}>\n                    <Link\n                      class=\"status-carousel-link timeline-item-alt\"\n                      to={url}\n                    >\n                      {useItemID ? (\n                        <Status\n                          statusID={statusID}\n                          instance={instance}\n                          size=\"s\"\n                          contentTextWeight\n                          enableCommentHint\n                          // allowFilters={allowFilters}\n                          mediaFirst={mediaFirst}\n                        />\n                      ) : (\n                        <Status\n                          status={item}\n                          instance={instance}\n                          size=\"s\"\n                          contentTextWeight\n                          enableCommentHint\n                          // allowFilters={allowFilters}\n                          mediaFirst={mediaFirst}\n                        />\n                      )}\n                    </Link>\n                  </li>\n                );\n              })}\n            </StatusCarousel>\n          </li>\n        );\n      }\n      const manyItems = fItems.length > 3;\n      return fItems.map((item, i) => {\n        const { id: statusID, _differentAuthor } = item;\n        const url = instance ? `/${instance}/s/${statusID}` : `/s/${statusID}`;\n        const isMiddle = i > 0 && i < fItems.length - 1;\n        const isSpoiler = item.sensitive && !!item.spoilerText;\n        const showCompact =\n          (!_differentAuthor && isSpoiler && i > 0) ||\n          (manyItems &&\n            isMiddle &&\n            (type === 'thread' ||\n              (type === 'conversation' &&\n                !_differentAuthor &&\n                !fItems[i - 1]._differentAuthor &&\n                !fItems[i + 1]._differentAuthor)));\n        const isStart = i === 0;\n        const isEnd = i === fItems.length - 1;\n        return (\n          <li\n            key={`timeline-${statusID}`}\n            class={`timeline-item-container timeline-item-container-type-${type} timeline-item-container-${\n              isStart ? 'start' : isEnd ? 'end' : 'middle'\n            } ${_differentAuthor ? 'timeline-item-diff-author' : ''}`}\n          >\n            <Link class=\"status-link timeline-item\" to={url}>\n              {showCompact ? (\n                <TimelineStatusCompact\n                  status={item}\n                  instance={instance}\n                  filterContext={filterContext}\n                />\n              ) : useItemID ? (\n                <Status\n                  statusID={statusID}\n                  instance={instance}\n                  enableCommentHint={isEnd}\n                  showFollowedTags={showFollowedTags}\n                  // allowFilters={allowFilters}\n                />\n              ) : (\n                <Status\n                  status={item}\n                  instance={instance}\n                  enableCommentHint={isEnd}\n                  showFollowedTags={showFollowedTags}\n                  // allowFilters={allowFilters}\n                />\n              )}\n            </Link>\n          </li>\n        );\n      });\n    }\n\n    const itemKey = `timeline-${statusID + _pinned}`;\n\n    if (view === 'media') {\n      return useItemID ? (\n        <MediaPost\n          class=\"timeline-item\"\n          parent=\"li\"\n          key={itemKey}\n          statusID={statusID}\n          instance={instance}\n          // allowFilters={allowFilters}\n        />\n      ) : (\n        <MediaPost\n          class=\"timeline-item\"\n          parent=\"li\"\n          key={itemKey}\n          status={status}\n          instance={instance}\n          // allowFilters={allowFilters}\n        />\n      );\n    }\n\n    return (\n      <li key={itemKey}>\n        <Link class=\"status-link timeline-item\" to={url}>\n          {useItemID ? (\n            <Status\n              statusID={statusID}\n              instance={instance}\n              enableCommentHint\n              showFollowedTags={showFollowedTags}\n              showReplyParent={showReplyParent}\n              // allowFilters={allowFilters}\n              mediaFirst={mediaFirst}\n            />\n          ) : (\n            <Status\n              status={status}\n              instance={instance}\n              enableCommentHint\n              showFollowedTags={showFollowedTags}\n              showReplyParent={showReplyParent}\n              // allowFilters={allowFilters}\n              mediaFirst={mediaFirst}\n            />\n          )}\n        </Link>\n      </li>\n    );\n  },\n  (oldProps, newProps) => {\n    const oldID = (oldProps.status?.id || '').toString();\n    const newID = (newProps.status?.id || '').toString();\n    return (\n      oldID === newID &&\n      oldProps.instance === newProps.instance &&\n      oldProps.view === newProps.view\n    );\n  },\n);\n\nfunction StatusCarousel({ title, class: className, children }) {\n  const carouselRef = useRef();\n  // const { reachStart, reachEnd, init } = useScroll({\n  //   scrollableRef: carouselRef,\n  //   direction: 'horizontal',\n  // });\n  const startButtonRef = useRef();\n  const endButtonRef = useRef();\n  // useScrollFn(\n  //   {\n  //     scrollableRef: carouselRef,\n  //     direction: 'horizontal',\n  //     init: true,\n  //   },\n  //   ({ reachStart, reachEnd }) => {\n  //     if (startButtonRef.current) startButtonRef.current.disabled = reachStart;\n  //     if (endButtonRef.current) endButtonRef.current.disabled = reachEnd;\n  //   },\n  //   [],\n  // );\n  // useEffect(() => {\n  //   init?.();\n  // }, []);\n\n  const [render, setRender] = useState(false);\n  useEffect(() => {\n    setTimeout(() => {\n      setRender(true);\n    }, 1);\n  }, []);\n\n  return (\n    <div class={`status-carousel ${className}`}>\n      <header>\n        <h3>{title}</h3>\n        <span>\n          <button\n            ref={startButtonRef}\n            type=\"button\"\n            class=\"small plain2\"\n            // disabled={reachStart}\n            onClick={() => {\n              carouselRef.current?.scrollBy({\n                left: -Math.min(320, carouselRef.current?.offsetWidth),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"chevron-left\" />\n          </button>{' '}\n          <button\n            ref={endButtonRef}\n            type=\"button\"\n            class=\"small plain2\"\n            // disabled={reachEnd}\n            onClick={() => {\n              carouselRef.current?.scrollBy({\n                left: Math.min(320, carouselRef.current?.offsetWidth),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"chevron-right\" />\n          </button>\n        </span>\n      </header>\n      <ul ref={carouselRef}>\n        <InView\n          class=\"status-carousel-beacon\"\n          onChange={(inView) => {\n            if (startButtonRef.current)\n              startButtonRef.current.disabled = inView;\n          }}\n        />\n        {children[0]}\n        {render && children.slice(1)}\n        <InView\n          class=\"status-carousel-beacon\"\n          onChange={(inView) => {\n            if (endButtonRef.current) endButtonRef.current.disabled = inView;\n          }}\n        />\n      </ul>\n    </div>\n  );\n}\n\nfunction TimelineStatusCompact({ status, instance, filterContext }) {\n  const snapStates = useSnapshot(states);\n  const { id, visibility, language } = status;\n  const statusPeekText = statusPeek(status);\n  const sKey = statusKey(id, instance);\n  const filterInfo = isFiltered(status.filtered, filterContext);\n  return (\n    <article\n      class={`status compact-thread ${\n        visibility === 'direct' ? 'visibility-direct' : ''\n      }`}\n      tabindex=\"-1\"\n    >\n      {!!snapStates.statusThreadNumber[sKey] ? (\n        <div class=\"status-thread-badge\">\n          <Icon icon=\"thread\" size=\"s\" />\n          {snapStates.statusThreadNumber[sKey]\n            ? ` ${snapStates.statusThreadNumber[sKey]}/X`\n            : ''}\n        </div>\n      ) : (\n        <div class=\"status-thread-badge\">\n          <Icon icon=\"thread\" size=\"s\" />\n        </div>\n      )}\n      <div\n        class=\"content-compact\"\n        title={statusPeekText}\n        lang={language}\n        dir=\"auto\"\n      >\n        {!!filterInfo ? (\n          <b\n            class=\"status-filtered-badge badge-meta horizontal\"\n            title={filterInfo?.titlesStr || ''}\n          >\n            <span>Filtered</span>: <span>{filterInfo?.titlesStr || ''}</span>\n          </b>\n        ) : (\n          <>\n            {statusPeekText}\n            {status.sensitive && status.spoilerText && (\n              <>\n                {' '}\n                <span class=\"spoiler-badge\">\n                  <Icon icon=\"eye-close\" size=\"s\" />\n                </span>\n              </>\n            )}\n          </>\n        )}\n      </div>\n    </article>\n  );\n}\n\nfunction inBackground() {\n  return !!document.querySelector('.deck-backdrop, #modal-container > *');\n}\n\nexport default Timeline;\n","import { MenuItem } from '@szhsin/react-menu';\nimport {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'preact/hooks';\nimport punycode from 'punycode';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport AccountInfo from '../components/account-info';\nimport EmojiText from '../components/emoji-text';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Menu2 from '../components/menu2';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport pmem from '../utils/pmem';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\nimport { saveStatus } from '../utils/states';\nimport { isMediaFirstInstance } from '../utils/store-utils';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\nconst MIN_YEAR = 1983;\nconst MIN_YEAR_MONTH = `${MIN_YEAR}-01`; // Birth of the Internet\n\nconst supportsInputMonth = (() => {\n  try {\n    const input = document.createElement('input');\n    input.setAttribute('type', 'month');\n    return input.type === 'month';\n  } catch (e) {\n    return false;\n  }\n})();\n\nasync function _isSearchEnabled(instance) {\n  const { masto } = api({ instance });\n  const results = await masto.v2.search.fetch({\n    q: 'from:me',\n    type: 'statuses',\n    limit: 1,\n  });\n  return !!results?.statuses?.length;\n}\nconst isSearchEnabled = pmem(_isSearchEnabled);\n\nfunction AccountStatuses() {\n  const snapStates = useSnapshot(states);\n  const { id, ...params } = useParams();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const month = searchParams.get('month');\n  const excludeReplies = !searchParams.get('replies');\n  const excludeBoosts = !!searchParams.get('boosts');\n  const tagged = searchParams.get('tagged');\n  const media = !!searchParams.get('media');\n  const { masto, instance, authenticated } = api({ instance: params.instance });\n  const { masto: currentMasto, instance: currentInstance } = api();\n  const accountStatusesIterator = useRef();\n\n  const allSearchParams = [month, excludeReplies, excludeBoosts, tagged, media];\n  const [account, setAccount] = useState();\n  const searchOffsetRef = useRef(0);\n  useEffect(() => {\n    searchOffsetRef.current = 0;\n  }, allSearchParams);\n\n  const mediaFirst = useMemo(() => isMediaFirstInstance(), []);\n\n  const sameCurrentInstance = useMemo(\n    () => instance === currentInstance,\n    [instance, currentInstance],\n  );\n  const [searchEnabled, setSearchEnabled] = useState(false);\n  useEffect(() => {\n    // Only enable for current logged-in instance\n    // Most remote instances don't allow unauthenticated searches\n    if (!sameCurrentInstance) return;\n    if (!account?.acct) return;\n    (async () => {\n      const enabled = await isSearchEnabled(instance);\n      console.log({ enabled });\n      setSearchEnabled(enabled);\n    })();\n  }, [instance, sameCurrentInstance, account?.acct]);\n\n  async function fetchAccountStatuses(firstLoad) {\n    const isValidMonth = /^\\d{4}-[01]\\d$/.test(month);\n    const isValidYear = month?.split?.('-')?.[0] >= MIN_YEAR;\n    if (isValidMonth && isValidYear) {\n      if (!account) {\n        return {\n          value: [],\n          done: true,\n        };\n      }\n      const [_year, _month] = month.split('-');\n      const monthIndex = parseInt(_month, 10) - 1;\n      // YYYY-MM (no day)\n      // Search options:\n      // - from:account\n      // - after:YYYY-MM-DD (non-inclusive)\n      // - before:YYYY-MM-DD (non-inclusive)\n\n      // Last day of previous month\n      const after = new Date(_year, monthIndex, 0);\n      const afterStr = `${after.getFullYear()}-${(after.getMonth() + 1)\n        .toString()\n        .padStart(2, '0')}-${after.getDate().toString().padStart(2, '0')}`;\n      // First day of next month\n      const before = new Date(_year, monthIndex + 1, 1);\n      const beforeStr = `${before.getFullYear()}-${(before.getMonth() + 1)\n        .toString()\n        .padStart(2, '0')}-${before.getDate().toString().padStart(2, '0')}`;\n      console.log({\n        month,\n        _year,\n        _month,\n        monthIndex,\n        after,\n        before,\n        afterStr,\n        beforeStr,\n      });\n\n      let limit;\n      if (firstLoad) {\n        limit = LIMIT + 1;\n        searchOffsetRef.current = 0;\n      } else {\n        limit = LIMIT + searchOffsetRef.current + 1;\n        searchOffsetRef.current += LIMIT;\n      }\n\n      const searchResults = await masto.v2.search.fetch({\n        q: `from:${account.acct} after:${afterStr} before:${beforeStr}`,\n        type: 'statuses',\n        limit,\n        offset: searchOffsetRef.current,\n      });\n      if (searchResults?.statuses?.length) {\n        const value = searchResults.statuses.slice(0, LIMIT);\n        value.forEach((item) => {\n          saveStatus(item, instance);\n        });\n        const done = searchResults.statuses.length <= LIMIT;\n        return { value, done };\n      } else {\n        return { value: [], done: true };\n      }\n    }\n\n    let results = [];\n    if (firstLoad) {\n      const { value } = await masto.v1.accounts\n        .$select(id)\n        .statuses.list({\n          pinned: true,\n        })\n        .next();\n      if (value?.length && !tagged && !media) {\n        const pinnedStatuses = value.map((status) => {\n          saveStatus(status, instance);\n          return {\n            ...status,\n            _pinned: true,\n          };\n        });\n        if (pinnedStatuses.length >= 3) {\n          const pinnedStatusesIds = pinnedStatuses.map((status) => status.id);\n          results.push({\n            id: pinnedStatusesIds,\n            items: pinnedStatuses,\n            type: 'pinned',\n          });\n        } else {\n          results.push(...pinnedStatuses);\n        }\n      }\n    }\n    if (firstLoad || !accountStatusesIterator.current) {\n      accountStatusesIterator.current = masto.v1.accounts\n        .$select(id)\n        .statuses.list({\n          limit: LIMIT,\n          exclude_replies: excludeReplies,\n          exclude_reblogs: excludeBoosts,\n          only_media: media || undefined,\n          tagged,\n        });\n    }\n    const { value, done } = await accountStatusesIterator.current.next();\n    if (value?.length) {\n      // Check if value is same as pinned post (results)\n      // If the index for every post is the same, means API might not support pinned posts\n      if (results.length) {\n        let pinnedStatusesIds = [];\n        if (results[0]?.type === 'pinned') {\n          pinnedStatusesIds = results[0].id;\n        } else {\n          pinnedStatusesIds = results\n            .filter((status) => status._pinned)\n            .map((status) => status.id);\n        }\n        const containsAllPinned = pinnedStatusesIds.every((postId) =>\n          value.some((status) => status.id === postId),\n        );\n        if (containsAllPinned) {\n          // Remove pinned posts\n          results = [];\n        }\n      }\n\n      results.push(...value);\n\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      value: results,\n      done,\n    };\n  }\n\n  const [featuredTags, setFeaturedTags] = useState([]);\n  useTitle(\n    account?.acct\n      ? `${\n          account?.displayName\n            ? `${account.displayName} (${/@/.test(account.acct) ? '' : '@'}${\n                account.acct\n              })`\n            : `${/@/.test(account.acct) ? '' : '@'}${account.acct}`\n        }${\n          !excludeReplies\n            ? ' (+ Replies)'\n            : excludeBoosts\n            ? ' (- Boosts)'\n            : tagged\n            ? ` (#${tagged})`\n            : media\n            ? ' (Media)'\n            : month\n            ? ` (${new Date(month).toLocaleString('default', {\n                month: 'long',\n                year: 'numeric',\n              })})`\n            : ''\n        }`\n      : 'Account posts',\n    '/:instance?/a/:id',\n  );\n\n  const fetchAccountPromiseRef = useRef();\n  const fetchAccount = useCallback(() => {\n    const fetchPromise =\n      fetchAccountPromiseRef.current || masto.v1.accounts.$select(id).fetch();\n    fetchAccountPromiseRef.current = fetchPromise;\n    return fetchPromise;\n  }, [id, masto]);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const acc = await fetchAccount();\n        console.log(acc);\n        setAccount(acc);\n      } catch (e) {\n        console.error(e);\n      }\n      // No need, because the whole filter bar is hidden\n      // TODO: Revisit this\n      if (!mediaFirst) {\n        try {\n          const featuredTags = await masto.v1.accounts\n            .$select(id)\n            .featuredTags.list();\n          console.log({ featuredTags });\n          setFeaturedTags(featuredTags);\n        } catch (e) {\n          console.error(e);\n        }\n      }\n    })();\n  }, [id, mediaFirst]);\n\n  const { displayName, acct, emojis } = account || {};\n\n  const filterBarRef = useRef();\n  const TimelineStart = useMemo(() => {\n    const filtered =\n      !excludeReplies || excludeBoosts || tagged || media || !!month;\n    const cachedAccount = snapStates.accounts[`${id}@${instance}`];\n\n    return (\n      <>\n        <AccountInfo\n          instance={instance}\n          account={cachedAccount || id}\n          fetchAccount={fetchAccount}\n          authenticated={authenticated}\n          standalone\n        />\n        {!mediaFirst && (\n          <div\n            class=\"filter-bar\"\n            ref={filterBarRef}\n            style={{\n              position: 'relative',\n            }}\n          >\n            {filtered ? (\n              <Link\n                to={`/${instance}/a/${id}`}\n                class=\"insignificant filter-clear\"\n                title=\"Clear filters\"\n                key=\"clear-filters\"\n              >\n                <Icon icon=\"x\" size=\"l\" />\n              </Link>\n            ) : (\n              <Icon icon=\"filter\" class=\"insignificant\" size=\"l\" />\n            )}\n            <Link\n              to={`/${instance}/a/${id}${excludeReplies ? '?replies=1' : ''}`}\n              onClick={() => {\n                if (excludeReplies) {\n                  showToast('Showing post with replies');\n                }\n              }}\n              class={excludeReplies ? '' : 'is-active'}\n            >\n              + Replies\n            </Link>\n            <Link\n              to={`/${instance}/a/${id}${excludeBoosts ? '' : '?boosts=0'}`}\n              onClick={() => {\n                if (!excludeBoosts) {\n                  showToast('Showing posts without boosts');\n                }\n              }}\n              class={!excludeBoosts ? '' : 'is-active'}\n            >\n              - Boosts\n            </Link>\n            <Link\n              to={`/${instance}/a/${id}${media ? '' : '?media=1'}`}\n              onClick={() => {\n                if (!media) {\n                  showToast('Showing posts with media');\n                }\n              }}\n              class={media ? 'is-active' : ''}\n            >\n              Media\n            </Link>\n            {featuredTags.map((tag) => (\n              <Link\n                key={tag.id}\n                to={`/${instance}/a/${id}${\n                  tagged === tag.name\n                    ? ''\n                    : `?tagged=${encodeURIComponent(tag.name)}`\n                }`}\n                onClick={() => {\n                  if (tagged !== tag.name) {\n                    showToast(`Showing posts tagged with #${tag.name}`);\n                  }\n                }}\n                class={tagged === tag.name ? 'is-active' : ''}\n              >\n                <span>\n                  <span class=\"more-insignificant\">#</span>\n                  {tag.name}\n                </span>\n                {\n                  // The count differs based on instance 😅\n                }\n                {/* <span class=\"filter-count\">{tag.statusesCount}</span> */}\n              </Link>\n            ))}\n            {searchEnabled &&\n              (supportsInputMonth ? (\n                <label class={`filter-field ${month ? 'is-active' : ''}`}>\n                  <Icon icon=\"month\" size=\"l\" />\n                  <input\n                    type=\"month\"\n                    disabled={!account?.acct}\n                    value={month || ''}\n                    min={MIN_YEAR_MONTH}\n                    max={new Date().toISOString().slice(0, 7)}\n                    onInput={(e) => {\n                      const { value, validity } = e.currentTarget;\n                      if (!validity.valid) return;\n                      setSearchParams(\n                        value\n                          ? {\n                              month: value,\n                            }\n                          : {},\n                      );\n                      const [year, month] = value.split('-');\n                      const monthIndex = parseInt(month, 10) - 1;\n                      const date = new Date(year, monthIndex);\n                      showToast(\n                        `Showing posts in ${date.toLocaleString('default', {\n                          month: 'long',\n                          year: 'numeric',\n                        })}`,\n                      );\n                    }}\n                  />\n                </label>\n              ) : (\n                // Fallback to <select> for month and <input type=\"number\"> for year\n                <MonthPicker\n                  class={`filter-field ${month ? 'is-active' : ''}`}\n                  disabled={!account?.acct}\n                  value={month || ''}\n                  min={MIN_YEAR_MONTH}\n                  max={new Date().toISOString().slice(0, 7)}\n                  onInput={(e) => {\n                    const { value, validity } = e;\n                    if (!validity.valid) return;\n                    setSearchParams(\n                      value\n                        ? {\n                            month: value,\n                          }\n                        : {},\n                    );\n                  }}\n                />\n              ))}\n          </div>\n        )}\n      </>\n    );\n  }, [\n    id,\n    instance,\n    authenticated,\n    featuredTags,\n    fetchAccount,\n    searchEnabled,\n    ...allSearchParams,\n  ]);\n\n  useEffect(() => {\n    // Focus on .is-active\n    const active = filterBarRef.current?.querySelector('.is-active');\n    if (active) {\n      console.log('active', active, active.offsetLeft);\n      filterBarRef.current.scrollTo({\n        behavior: 'smooth',\n        left:\n          active.offsetLeft -\n          (filterBarRef.current.offsetWidth - active.offsetWidth) / 2,\n      });\n    }\n  }, [featuredTags, searchEnabled, ...allSearchParams]);\n\n  const accountInstance = useMemo(() => {\n    if (!account?.url) return null;\n    const domain = new URL(account.url).hostname;\n    return domain;\n  }, [account]);\n  const sameInstance = instance === accountInstance;\n  const allowSwitch = !!account && !sameInstance;\n\n  return (\n    <Timeline\n      key={id}\n      title={`${account?.acct ? '@' + account.acct : 'Posts'}`}\n      titleComponent={\n        <h1\n          class=\"header-double-lines header-account\"\n          // onClick={() => {\n          //   states.showAccount = {\n          //     account,\n          //     instance,\n          //   };\n          // }}\n        >\n          <b>\n            <EmojiText text={displayName} emojis={emojis} />\n          </b>\n          <div>\n            <span>@{acct}</span>\n          </div>\n        </h1>\n      }\n      id=\"account-statuses\"\n      instance={instance}\n      emptyText=\"Nothing to see here yet.\"\n      errorText=\"Unable to load posts\"\n      fetchItems={fetchAccountStatuses}\n      useItemID\n      view={media || mediaFirst ? 'media' : undefined}\n      boostsCarousel={snapStates.settings.boostsCarousel}\n      timelineStart={TimelineStart}\n      refresh={[\n        excludeReplies,\n        excludeBoosts,\n        tagged,\n        media,\n        month + account?.acct,\n      ].toString()}\n      headerEnd={\n        <Menu2\n          portal\n          // setDownOverflow\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          position=\"anchor\"\n          menuButton={\n            <button type=\"button\" class=\"plain\">\n              <Icon icon=\"more\" size=\"l\" />\n            </button>\n          }\n        >\n          <MenuItem\n            disabled={!allowSwitch}\n            onClick={() => {\n              (async () => {\n                try {\n                  const { masto } = api({\n                    instance: accountInstance,\n                  });\n                  const acc = await masto.v1.accounts.lookup({\n                    acct: account.acct,\n                  });\n                  const { id } = acc;\n                  location.hash = `/${accountInstance}/a/${id}`;\n                } catch (e) {\n                  console.error(e);\n                  alert('Unable to fetch account info');\n                }\n              })();\n            }}\n          >\n            <Icon icon=\"transfer\" />{' '}\n            <small class=\"menu-double-lines\">\n              Switch to account's instance{' '}\n              {accountInstance ? (\n                <>\n                  {' '}\n                  (<b>{punycode.toUnicode(accountInstance)}</b>)\n                </>\n              ) : null}\n            </small>\n          </MenuItem>\n          {!sameCurrentInstance && (\n            <MenuItem\n              onClick={() => {\n                (async () => {\n                  try {\n                    const acc = await currentMasto.v1.accounts.lookup({\n                      acct: account.acct + '@' + instance,\n                    });\n                    const { id } = acc;\n                    location.hash = `/${currentInstance}/a/${id}`;\n                  } catch (e) {\n                    console.error(e);\n                    alert('Unable to fetch account info');\n                  }\n                })();\n              }}\n            >\n              <Icon icon=\"transfer\" />{' '}\n              <small class=\"menu-double-lines\">\n                Switch to my instance (<b>{currentInstance}</b>)\n              </small>\n            </MenuItem>\n          )}\n        </Menu2>\n      }\n    />\n  );\n}\n\nfunction MonthPicker(props) {\n  const {\n    class: className,\n    disabled,\n    value,\n    min,\n    max,\n    onInput = () => {},\n  } = props;\n  const [_year, _month] = value?.split('-') || [];\n  const monthFieldRef = useRef();\n  const yearFieldRef = useRef();\n\n  const checkValidity = (month, year) => {\n    const [minYear, minMonth] = min?.split('-') || [];\n    const [maxYear, maxMonth] = max?.split('-') || [];\n    if (year < minYear) return false;\n    if (year > maxYear) return false;\n    if (year === minYear && month < minMonth) return false;\n    if (year === maxYear && month > maxMonth) return false;\n    return true;\n  };\n\n  return (\n    <div class={className}>\n      <Icon icon=\"month\" size=\"l\" />\n      <select\n        ref={monthFieldRef}\n        disabled={disabled}\n        value={_month || ''}\n        onInput={(e) => {\n          const { value: month } = e.currentTarget;\n          const year = yearFieldRef.current.value;\n          if (!checkValidity(month, year))\n            return {\n              value: '',\n              validity: {\n                valid: false,\n              },\n            };\n          onInput({\n            value: month ? `${year}-${month}` : '',\n            validity: {\n              valid: true,\n            },\n          });\n        }}\n      >\n        <option value=\"\">Month</option>\n        <option disabled>-----</option>\n        {Array.from({ length: 12 }, (_, i) => (\n          <option\n            value={\n              // Month is 1-indexed\n              (i + 1).toString().padStart(2, '0')\n            }\n            key={i}\n          >\n            {new Date(0, i).toLocaleString('default', {\n              month: 'long',\n            })}\n          </option>\n        ))}\n      </select>{' '}\n      <input\n        ref={yearFieldRef}\n        type=\"number\"\n        disabled={disabled}\n        value={_year || new Date().getFullYear()}\n        min={min?.slice(0, 4) || MIN_YEAR}\n        max={max?.slice(0, 4) || new Date().getFullYear()}\n        onInput={(e) => {\n          const { value: year, validity } = e.currentTarget;\n          const month = monthFieldRef.current.value;\n          if (!validity.valid || !checkValidity(month, year))\n            return {\n              value: '',\n              validity: {\n                valid: false,\n              },\n            };\n          onInput({\n            value: year ? `${year}-${month}` : '',\n            validity: {\n              valid: true,\n            },\n          });\n        }}\n        style={{\n          width: '4.5em',\n        }}\n      />\n    </div>\n  );\n}\n\nexport default AccountStatuses;\n","import { useRef } from 'preact/hooks';\n\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Bookmarks() {\n  useTitle('Bookmarks', '/b');\n  const { masto, instance } = api();\n  const bookmarksIterator = useRef();\n  async function fetchBookmarks(firstLoad) {\n    if (firstLoad || !bookmarksIterator.current) {\n      bookmarksIterator.current = masto.v1.bookmarks.list({ limit: LIMIT });\n    }\n    return await bookmarksIterator.current.next();\n  }\n\n  return (\n    <Timeline\n      title=\"Bookmarks\"\n      id=\"bookmarks\"\n      emptyText=\"No bookmarks yet. Go bookmark something!\"\n      errorText=\"Unable to load bookmarks\"\n      instance={instance}\n      fetchItems={fetchBookmarks}\n    />\n  );\n}\n\nexport default Bookmarks;\n","export default \"__VITE_ASSET__S_9SYp01__\"","import '../components/links-bar.css';\nimport './catchup.css';\n\nimport autoAnimate from '@formkit/auto-animate';\nimport { getBlurHashAverageColor } from 'fast-blurhash';\nimport { Fragment } from 'preact';\nimport { memo } from 'preact/compat';\nimport {\n  useCallback,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n} from 'preact/hooks';\nimport punycode from 'punycode';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { useSearchParams } from 'react-router-dom';\nimport { uid } from 'uid/single';\n\nimport catchupUrl from '../assets/features/catch-up.png';\n\nimport Avatar from '../components/avatar';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport Modal from '../components/modal';\nimport NameText from '../components/name-text';\nimport NavMenu from '../components/nav-menu';\nimport RelativeTime from '../components/relative-time';\nimport { api } from '../utils/api';\nimport { oklab2rgb, rgb2oklab } from '../utils/color-utils';\nimport db from '../utils/db';\nimport emojifyText from '../utils/emojify-text';\nimport { isFiltered } from '../utils/filters';\nimport htmlContentLength from '../utils/html-content-length';\nimport niceDateTime from '../utils/nice-date-time';\nimport shortenNumber from '../utils/shorten-number';\nimport showToast from '../utils/show-toast';\nimport states, { statusKey } from '../utils/states';\nimport statusPeek from '../utils/status-peek';\nimport store from '../utils/store';\nimport { getCurrentAccountID, getCurrentAccountNS } from '../utils/store-utils';\nimport supports from '../utils/supports';\nimport { assignFollowedTags } from '../utils/timeline-utils';\nimport useTitle from '../utils/useTitle';\n\nconst FILTER_CONTEXT = 'home';\n\nconst RANGES = [\n  { label: 'last 1 hour', value: 1 },\n  { label: 'last 2 hours', value: 2 },\n  { label: 'last 3 hours', value: 3 },\n  { label: 'last 4 hours', value: 4 },\n  { label: 'last 5 hours', value: 5 },\n  { label: 'last 6 hours', value: 6 },\n  { label: 'last 7 hours', value: 7 },\n  { label: 'last 8 hours', value: 8 },\n  { label: 'last 9 hours', value: 9 },\n  { label: 'last 10 hours', value: 10 },\n  { label: 'last 11 hours', value: 11 },\n  { label: 'last 12 hours', value: 12 },\n  { label: 'beyond 12 hours', value: 13 },\n];\n\nconst FILTER_LABELS = [\n  'Original',\n  'Replies',\n  'Boosts',\n  'Followed tags',\n  'Groups',\n  'Filtered',\n];\nconst FILTER_SORTS = [\n  'createdAt',\n  'repliesCount',\n  'favouritesCount',\n  'reblogsCount',\n  'density',\n];\nconst FILTER_GROUPS = [null, 'account'];\nconst FILTER_VALUES = {\n  Filtered: 'filtered',\n  Groups: 'group',\n  Boosts: 'boost',\n  Replies: 'reply',\n  'Followed tags': 'followedTags',\n  Original: 'original',\n};\nconst FILTER_CATEGORY_TEXT = {\n  Filtered: 'filtered posts',\n  Groups: 'group posts',\n  Boosts: 'boosts',\n  Replies: 'replies',\n  'Followed tags': 'followed-tag posts',\n  Original: 'original posts',\n};\nconst SORT_BY_TEXT = {\n  // asc, desc\n  createdAt: ['oldest', 'latest'],\n  repliesCount: ['fewest replies', 'most replies'],\n  favouritesCount: ['fewest likes', 'most likes'],\n  reblogsCount: ['fewest boosts', 'most boosts'],\n  density: ['least dense', 'most dense'],\n};\n\nfunction Catchup() {\n  useTitle('Catch-up', '/catchup');\n  const { masto, instance } = api();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const id = searchParams.get('id');\n  const [uiState, setUIState] = useState('start');\n  const [showTopLinks, setShowTopLinks] = useState(false);\n\n  const currentAccount = useMemo(() => {\n    return getCurrentAccountID();\n  }, []);\n  const isSelf = (accountID) => accountID === currentAccount;\n\n  const supportsPixelfed = supports('@pixelfed/home-include-reblogs');\n\n  async function fetchHome({ maxCreatedAt }) {\n    const maxCreatedAtDate = maxCreatedAt ? new Date(maxCreatedAt) : null;\n    console.debug('fetchHome', maxCreatedAtDate);\n    const allResults = [];\n    const homeIterator = masto.v1.timelines.home.list({ limit: 40 });\n    mainloop: while (true) {\n      try {\n        if (supportsPixelfed && homeIterator.nextParams) {\n          if (typeof homeIterator.nextParams === 'string') {\n            homeIterator.nextParams += '&include_reblogs=true';\n          } else {\n            homeIterator.nextParams.include_reblogs = true;\n          }\n        }\n        const results = await homeIterator.next();\n        const { value } = results;\n        if (value?.length) {\n          // This ignores maxCreatedAt filter, but it's ok for now\n          await assignFollowedTags(value, instance);\n          let addedResults = false;\n          for (let i = 0; i < value.length; i++) {\n            const item = value[i];\n            const createdAtDate = new Date(item.createdAt);\n            if (!maxCreatedAtDate || createdAtDate >= maxCreatedAtDate) {\n              // Filtered\n              const selfPost = isSelf(\n                item.reblog?.account?.id || item.account.id,\n              );\n              const filterInfo =\n                !selfPost &&\n                isFiltered(\n                  item.reblog?.filtered || item.filtered,\n                  FILTER_CONTEXT,\n                );\n              if (filterInfo?.action === 'hide') continue;\n              item._filtered = filterInfo;\n\n              // Followed tags\n              const sKey = statusKey(item.id, instance);\n              item._followedTags = states.statusFollowedTags[sKey]\n                ? [...states.statusFollowedTags[sKey]]\n                : [];\n\n              allResults.push(item);\n              addedResults = true;\n            } else {\n              // Don't immediately stop, still add the other items that might still be within range\n              // break mainloop;\n            }\n            // Only stop when ALL items are outside of range\n            if (!addedResults) {\n              break mainloop;\n            }\n          }\n        } else {\n          break mainloop;\n        }\n        // Pause 1s\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      } catch (e) {\n        console.error(e);\n        break mainloop;\n      }\n    }\n\n    // Post-process all results\n    // 1. Threadify - tag 1st-post in a thread\n    allResults.forEach((status) => {\n      if (status?.inReplyToId) {\n        const replyToStatus = allResults.find(\n          (s) => s.id === status.inReplyToId,\n        );\n        if (replyToStatus && !replyToStatus.inReplyToId) {\n          replyToStatus._thread = true;\n        }\n      }\n    });\n\n    return allResults;\n  }\n\n  const [posts, setPosts] = useState([]);\n  const catchupRangeRef = useRef();\n  const catchupLastRef = useRef();\n  const NS = useMemo(() => getCurrentAccountNS(), []);\n  const handleCatchupClick = useCallback(async ({ duration } = {}) => {\n    const now = Date.now();\n    const maxCreatedAt = duration ? now - duration : null;\n    setUIState('loading');\n    const results = await fetchHome({ maxCreatedAt });\n    // Namespaced by account ID\n    // Possible conflict if ID matches between different accounts from different instances\n    const catchupID = `${NS}-${uid()}`;\n    try {\n      await db.catchup.set(catchupID, {\n        id: catchupID,\n        posts: results,\n        count: results.length,\n        startAt: maxCreatedAt,\n        endAt: now,\n      });\n      setSearchParams({ id: catchupID });\n    } catch (e) {\n      console.error(e, results);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (id) {\n      (async () => {\n        const catchup = await db.catchup.get(id);\n        if (catchup) {\n          catchup.posts.sort((a, b) => (a.createdAt > b.createdAt ? 1 : -1));\n          setPosts(catchup.posts);\n          setUIState('results');\n        }\n      })();\n    } else if (uiState === 'results') {\n      setPosts([]);\n      setUIState('start');\n    }\n  }, [id]);\n\n  const [reloadCatchupsCount, reloadCatchups] = useReducer((c) => c + 1, 0);\n  const [lastCatchupEndAt, setLastCatchupEndAt] = useState(null);\n  const [prevCatchups, setPrevCatchups] = useState([]);\n  useEffect(() => {\n    (async () => {\n      try {\n        const catchups = await db.catchup.keys();\n        if (catchups.length) {\n          const ns = getCurrentAccountNS();\n          const ownKeys = catchups.filter((key) => key.startsWith(`${ns}-`));\n          if (ownKeys.length) {\n            let ownCatchups = await db.catchup.getMany(ownKeys);\n            ownCatchups.sort((a, b) => b.endAt - a.endAt);\n\n            // Split to 1st 3 last catchups, and the rest\n            let lastCatchups = ownCatchups.slice(0, 3);\n            let restCatchups = ownCatchups.slice(3);\n\n            const trimmedCatchups = lastCatchups.map((c) => {\n              const { id, count, startAt, endAt } = c;\n              return {\n                id,\n                count,\n                startAt,\n                endAt,\n              };\n            });\n            setPrevCatchups(trimmedCatchups);\n            setLastCatchupEndAt(lastCatchups[0].endAt);\n\n            // GC time\n            ownCatchups = null;\n            lastCatchups = null;\n\n            queueMicrotask(() => {\n              if (restCatchups.length) {\n                // delete them\n                db.catchup\n                  .delMany(restCatchups.map((c) => c.id))\n                  .then(() => {\n                    // GC time\n                    restCatchups = null;\n                  })\n                  .catch((e) => {\n                    console.error(e);\n                  });\n              }\n            });\n\n            return;\n          }\n        }\n      } catch (e) {\n        console.error(e);\n      }\n      setPrevCatchups([]);\n    })();\n  }, [reloadCatchupsCount]);\n  useEffect(() => {\n    if (uiState === 'start') {\n      reloadCatchups();\n    }\n  }, [uiState === 'start']);\n\n  const [filterCounts, links] = useMemo(() => {\n    let filtereds = 0,\n      groups = 0,\n      boosts = 0,\n      replies = 0,\n      followedTags = 0,\n      originals = 0;\n    const links = {};\n    for (const post of posts) {\n      if (post._filtered) {\n        filtereds++;\n        post.__FILTER = 'filtered';\n      } else if (post.group) {\n        groups++;\n        post.__FILTER = 'group';\n      } else if (post.reblog) {\n        boosts++;\n        post.__FILTER = 'boost';\n      } else if (post._followedTags?.length) {\n        followedTags++;\n        post.__FILTER = 'followedTags';\n      } else if (\n        post.inReplyToId &&\n        post.inReplyToAccountId !== post.account?.id\n      ) {\n        replies++;\n        post.__FILTER = 'reply';\n      } else {\n        originals++;\n        post.__FILTER = 'original';\n      }\n\n      const thePost = post.reblog || post;\n      if (\n        post.__FILTER !== 'filtered' &&\n        thePost.card?.url &&\n        thePost.card?.image &&\n        thePost.card?.type === 'link'\n      ) {\n        const { card, favouritesCount, reblogsCount } = thePost;\n        let { url } = card;\n        url = url.replace(/\\/$/, '');\n        if (!links[url]) {\n          links[url] = {\n            postID: thePost.id,\n            card,\n            shared: 1,\n            sharers: [post.account],\n            likes: favouritesCount,\n            boosts: reblogsCount,\n          };\n        } else {\n          if (links[url].sharers.find((a) => a.id === post.account.id)) {\n            continue;\n          }\n          links[url].shared++;\n          links[url].sharers.push(post.account);\n          if (links[url].postID !== thePost.id) {\n            links[url].likes += favouritesCount;\n            links[url].boosts += reblogsCount;\n          }\n        }\n      }\n    }\n\n    let topLinks = [];\n    for (const link in links) {\n      topLinks.push({\n        url: link,\n        ...links[link],\n      });\n    }\n    topLinks.sort((a, b) => {\n      if (a.shared > b.shared) return -1;\n      if (a.shared < b.shared) return 1;\n      if (a.boosts > b.boosts) return -1;\n      if (a.boosts < b.boosts) return 1;\n      if (a.likes > b.likes) return -1;\n      if (a.likes < b.likes) return 1;\n      return 0;\n    });\n\n    // Slice links to shared > 1 but min 10 links\n    if (topLinks.length > 10) {\n      linksLoop: for (let i = 10; i < topLinks.length; i++) {\n        const { shared } = topLinks[i];\n        if (shared <= 1) {\n          topLinks = topLinks.slice(0, i);\n          break linksLoop;\n        }\n      }\n    }\n\n    return [\n      {\n        Filtered: filtereds,\n        Groups: groups,\n        Boosts: boosts,\n        Replies: replies,\n        'Followed tags': followedTags,\n        Original: originals,\n      },\n      topLinks,\n    ];\n  }, [posts]);\n\n  const [selectedFilterCategory, setSelectedFilterCategory] = useState('All');\n  const [selectedAuthor, setSelectedAuthor] = useState(null);\n\n  const [range, setRange] = useState(1);\n\n  const [sortBy, setSortBy] = useState('createdAt');\n  const [sortOrder, setSortOrder] = useState('asc');\n  const [groupBy, setGroupBy] = useState(null);\n\n  const [filteredPosts, authors, authorCounts] = useMemo(() => {\n    const authorsHash = {};\n    const authorCountsMap = new Map();\n\n    let filteredPosts = posts.filter((post) => {\n      const postFilterMatches =\n        selectedFilterCategory === 'All' ||\n        post.__FILTER === FILTER_VALUES[selectedFilterCategory];\n\n      if (postFilterMatches) {\n        authorsHash[post.account.id] = post.account;\n        authorCountsMap.set(\n          post.account.id,\n          (authorCountsMap.get(post.account.id) || 0) + 1,\n        );\n      }\n\n      return postFilterMatches;\n    });\n\n    // Deduplicate boosts\n    const boostedPosts = {};\n    filteredPosts.forEach((post) => {\n      if (post.reblog) {\n        if (boostedPosts[post.reblog.id]) {\n          if (boostedPosts[post.reblog.id].__BOOSTERS) {\n            boostedPosts[post.reblog.id].__BOOSTERS.add(post.account);\n          } else {\n            boostedPosts[post.reblog.id].__BOOSTERS = new Set([post.account]);\n          }\n          post.__HIDDEN = true;\n        } else {\n          boostedPosts[post.reblog.id] = post;\n        }\n      }\n    });\n\n    if (selectedAuthor && authorCountsMap.has(selectedAuthor)) {\n      filteredPosts = filteredPosts.filter(\n        (post) =>\n          post.account.id === selectedAuthor ||\n          [...(post.__BOOSTERS || [])].find((a) => a.id === selectedAuthor),\n      );\n    }\n\n    return [filteredPosts, authorsHash, Object.fromEntries(authorCountsMap)];\n  }, [selectedFilterCategory, selectedAuthor, posts]);\n\n  const filteredPostsMap = useMemo(() => {\n    const map = {};\n    filteredPosts.forEach((post) => {\n      map[post.id] = post;\n    });\n    return map;\n  }, [filteredPosts]);\n\n  const authorCountsList = useMemo(\n    () =>\n      Object.keys(authorCounts).sort(\n        (a, b) => authorCounts[b] - authorCounts[a],\n      ),\n    [authorCounts],\n  );\n\n  const sortedFilteredPosts = useMemo(() => {\n    const authorIndices = {};\n    authorCountsList.forEach((authorID, index) => {\n      authorIndices[authorID] = index;\n    });\n    return filteredPosts\n      .filter((post) => !post.__HIDDEN)\n      .sort((a, b) => {\n        if (groupBy === 'account') {\n          const aAccountID = a.account.id;\n          const bAccountID = b.account.id;\n          const aIndex = authorIndices[aAccountID];\n          const bIndex = authorIndices[bAccountID];\n          const order = aIndex - bIndex;\n          if (order !== 0) {\n            return order;\n          }\n        }\n        if (sortBy !== 'createdAt') {\n          a = a.reblog || a;\n          b = b.reblog || b;\n          if (sortBy !== 'density' && a[sortBy] === b[sortBy]) {\n            return a.createdAt > b.createdAt ? 1 : -1;\n          }\n        }\n        if (sortBy === 'density') {\n          const aDensity = postDensity(a);\n          const bDensity = postDensity(b);\n          if (sortOrder === 'asc') {\n            return aDensity > bDensity ? 1 : -1;\n          } else {\n            return bDensity > aDensity ? 1 : -1;\n          }\n        }\n        if (sortOrder === 'asc') {\n          return a[sortBy] > b[sortBy] ? 1 : -1;\n        } else {\n          return b[sortBy] > a[sortBy] ? 1 : -1;\n        }\n      });\n  }, [filteredPosts, sortBy, sortOrder, groupBy, authorCountsList]);\n\n  const prevGroup = useRef(null);\n\n  const authorsListParent = useRef(null);\n  const autoAnimated = useRef(false);\n  useEffect(() => {\n    if (posts.length > 100 || autoAnimated.current) return;\n    if (authorsListParent.current) {\n      autoAnimate(authorsListParent.current, {\n        duration: 200,\n      });\n      autoAnimated.current = true;\n    }\n  }, [posts, authorsListParent]);\n\n  const postsBarType = posts.length > 160 ? '3d' : '2d';\n\n  const postsBar = useMemo(() => {\n    if (postsBarType !== '2d') return null;\n    return posts.map((post) => {\n      // If part of filteredPosts\n      const isFiltered = filteredPostsMap[post.id];\n      return (\n        <span\n          key={post.id}\n          class={`post-dot ${isFiltered ? 'post-dot-highlight' : ''}`}\n        />\n      );\n    });\n  }, [filteredPostsMap]);\n\n  const postsBins = useMemo(() => {\n    if (postsBarType !== '3d') return null;\n    if (!posts?.length) return null;\n    const bins = binByTime(posts, 'createdAt', 320);\n    return bins.map((posts, i) => {\n      return (\n        <div class=\"posts-bin\" key={i}>\n          {posts.map((post) => {\n            const isFiltered = filteredPostsMap[post.id];\n            return (\n              <span\n                key={post.id}\n                class={`post-dot ${isFiltered ? 'post-dot-highlight' : ''}`}\n              />\n            );\n          })}\n        </div>\n      );\n    });\n  }, [filteredPostsMap]);\n\n  const scrollableRef = useRef(null);\n\n  // if range value exceeded lastCatchupEndAt, show error\n  const lastCatchupRange = useMemo(() => {\n    // return hour, not ms\n    if (!lastCatchupEndAt) return null;\n    return (Date.now() - lastCatchupEndAt) / 1000 / 60 / 60;\n  }, [lastCatchupEndAt, range]);\n\n  useEffect(() => {\n    if (uiState !== 'results') return;\n    const authorUsername =\n      selectedAuthor && authors[selectedAuthor]\n        ? authors[selectedAuthor].username\n        : '';\n    const sortOrderIndex = sortOrder === 'asc' ? 0 : 1;\n    const groupByText = {\n      account: 'authors',\n    };\n    let toast = showToast({\n      duration: 5_000, // 5 seconds\n      text: `Showing ${\n        FILTER_CATEGORY_TEXT[selectedFilterCategory] || 'all posts'\n      }${authorUsername ? ` by @${authorUsername}` : ''}, ${\n        SORT_BY_TEXT[sortBy][sortOrderIndex]\n      } first${\n        !!groupBy\n          ? `, grouped by ${groupBy === 'account' ? groupByText[groupBy] : ''}`\n          : ''\n      }`,\n    });\n    return () => {\n      toast?.hideToast?.();\n    };\n  }, [\n    uiState,\n    selectedFilterCategory,\n    selectedAuthor,\n    sortBy,\n    sortOrder,\n    groupBy,\n    authors,\n  ]);\n\n  useEffect(() => {\n    if (selectedAuthor) {\n      if (authors[selectedAuthor]) {\n        // Check if author is visible and within the scrollable area viewport\n        const authorElement = authorsListParent.current.querySelector(\n          `[data-author=\"${selectedAuthor}\"]`,\n        );\n        const scrollableRect =\n          authorsListParent.current?.getBoundingClientRect();\n        const authorRect = authorElement?.getBoundingClientRect();\n        console.log({\n          sLeft: scrollableRect.left,\n          sRight: scrollableRect.right,\n          aLeft: authorRect.left,\n          aRight: authorRect.right,\n        });\n        if (\n          authorRect.left < scrollableRect.left ||\n          authorRect.right > scrollableRect.right\n        ) {\n          authorElement.scrollIntoView({\n            block: 'nearest',\n            inline: 'center',\n            behavior: 'smooth',\n          });\n        } else if (authorRect.top < 0) {\n          authorElement.scrollIntoView({\n            block: 'nearest',\n            inline: 'nearest',\n            behavior: 'smooth',\n          });\n        }\n      }\n    }\n  }, [selectedAuthor, authors]);\n\n  const [showHelp, setShowHelp] = useState(false);\n\n  const itemsSelector = '.catchup-list > li > a';\n  const jRef = useHotkeys(\n    'j',\n    () => {\n      const activeItem = document.activeElement.closest(itemsSelector);\n      const activeItemRect = activeItem?.getBoundingClientRect();\n      const allItems = Array.from(\n        scrollableRef.current.querySelectorAll(itemsSelector),\n      );\n      if (\n        activeItem &&\n        activeItemRect.top < scrollableRef.current.clientHeight &&\n        activeItemRect.bottom > 0\n      ) {\n        const activeItemIndex = allItems.indexOf(activeItem);\n        const nextItem = allItems[activeItemIndex + 1];\n        if (nextItem) {\n          nextItem.focus();\n          nextItem.scrollIntoView({\n            block: 'center',\n            inline: 'center',\n            behavior: 'smooth',\n          });\n        }\n      } else {\n        const topmostItem = allItems.find((item) => {\n          const itemRect = item.getBoundingClientRect();\n          return itemRect.top >= 0;\n        });\n        if (topmostItem) {\n          topmostItem.focus();\n          topmostItem.scrollIntoView({\n            block: 'nearest',\n            inline: 'center',\n            behavior: 'smooth',\n          });\n        }\n      }\n    },\n    {\n      preventDefault: true,\n      ignoreModifiers: true,\n    },\n  );\n\n  const kRef = useHotkeys(\n    'k',\n    () => {\n      const activeItem = document.activeElement.closest(itemsSelector);\n      const activeItemRect = activeItem?.getBoundingClientRect();\n      const allItems = Array.from(\n        scrollableRef.current.querySelectorAll(itemsSelector),\n      );\n      if (\n        activeItem &&\n        activeItemRect.top < scrollableRef.current.clientHeight &&\n        activeItemRect.bottom > 0\n      ) {\n        const activeItemIndex = allItems.indexOf(activeItem);\n        let prevItem = allItems[activeItemIndex - 1];\n        if (prevItem) {\n          prevItem.focus();\n          prevItem.scrollIntoView({\n            block: 'center',\n            inline: 'center',\n            behavior: 'smooth',\n          });\n        }\n      } else {\n        const topmostItem = allItems.find((item) => {\n          const itemRect = item.getBoundingClientRect();\n          return itemRect.top >= 44 && itemRect.left >= 0;\n        });\n        if (topmostItem) {\n          topmostItem.focus();\n          topmostItem.scrollIntoView({\n            block: 'nearest',\n            inline: 'center',\n            behavior: 'smooth',\n          });\n        }\n      }\n    },\n    {\n      preventDefault: true,\n      ignoreModifiers: true,\n    },\n  );\n\n  const hlRef = useHotkeys(\n    'h, l',\n    (_, handler) => {\n      // Go next/prev selectedAuthor in authorCountsList list\n      const key = handler.keys[0];\n      if (selectedAuthor) {\n        const index = authorCountsList.indexOf(selectedAuthor);\n        if (key === 'h') {\n          if (index > 0 && index < authorCountsList.length) {\n            setSelectedAuthor(authorCountsList[index - 1]);\n            scrollableRef.current?.focus();\n          }\n        } else if (key === 'l') {\n          if (index < authorCountsList.length - 1 && index >= 0) {\n            setSelectedAuthor(authorCountsList[index + 1]);\n            scrollableRef.current?.focus();\n          }\n        }\n      } else if (key === 'l') {\n        setSelectedAuthor(authorCountsList[0]);\n        scrollableRef.current?.focus();\n      }\n    },\n    {\n      preventDefault: true,\n      ignoreModifiers: true,\n      enableOnFormTags: ['input'],\n    },\n  );\n\n  const escRef = useHotkeys(\n    'esc',\n    () => {\n      setSelectedAuthor(null);\n      scrollableRef.current?.focus();\n    },\n    {\n      preventDefault: true,\n      ignoreModifiers: true,\n      enableOnFormTags: ['input'],\n    },\n  );\n\n  const dotRef = useHotkeys(\n    '.',\n    () => {\n      scrollableRef.current?.scrollTo({\n        top: 0,\n        behavior: 'smooth',\n      });\n    },\n    {\n      preventDefault: true,\n      ignoreModifiers: true,\n      enableOnFormTags: ['input'],\n    },\n  );\n\n  return (\n    <div\n      ref={(node) => {\n        scrollableRef.current = node;\n        jRef.current = node;\n        kRef.current = node;\n        hlRef.current = node;\n        escRef.current = node;\n      }}\n      id=\"catchup-page\"\n      class=\"deck-container\"\n      tabIndex=\"-1\"\n    >\n      <div class=\"timeline-deck deck wide\">\n        <header\n          class={`${uiState === 'loading' ? 'loading' : ''}`}\n          onClick={(e) => {\n            if (!e.target.closest('a, button')) {\n              scrollableRef.current?.scrollTo({\n                top: 0,\n                behavior: 'smooth',\n              });\n            }\n          }}\n        >\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n              {uiState === 'results' && (\n                <Link to=\"/catchup\" class=\"button plain\">\n                  <Icon icon=\"history2\" size=\"l\" />\n                </Link>\n              )}\n              {uiState === 'start' && (\n                <Link to=\"/\" class=\"button plain\">\n                  <Icon icon=\"home\" size=\"l\" />\n                </Link>\n              )}\n            </div>\n            <h1>\n              {uiState !== 'start' && (\n                <>\n                  Catch-up <sup>beta</sup>\n                </>\n              )}\n            </h1>\n            <div class=\"header-side\">\n              {uiState !== 'start' && uiState !== 'loading' && (\n                <button\n                  type=\"button\"\n                  class=\"plain\"\n                  onClick={() => {\n                    setShowHelp(true);\n                  }}\n                >\n                  Help\n                </button>\n              )}\n            </div>\n          </div>\n        </header>\n        <main>\n          {uiState === 'start' && (\n            <div class=\"catchup-start\">\n              <h1>\n                Catch-up <sup>beta</sup>\n              </h1>\n              <details>\n                <summary>What is this?</summary>\n                <p>\n                  Catch-up is a separate timeline for your followings, offering\n                  a high-level view at a glance, with a simple, email-inspired\n                  interface to effortlessly sort and filter through posts.\n                </p>\n                <img\n                  src={catchupUrl}\n                  width=\"1200\"\n                  height=\"900\"\n                  alt=\"Preview of Catch-up UI\"\n                />\n                <p>\n                  <button\n                    type=\"button\"\n                    onClick={(e) => {\n                      e.target.closest('details').open = false;\n                    }}\n                  >\n                    Let's catch up\n                  </button>\n                </p>\n              </details>\n              <p>Let's catch up on the posts from your followings.</p>\n              <p>\n                <b>Show me all posts from…</b>\n              </p>\n              <div class=\"catchup-form\">\n                <input\n                  ref={catchupRangeRef}\n                  type=\"range\"\n                  value={range}\n                  min={RANGES[0].value}\n                  max={RANGES[RANGES.length - 1].value}\n                  step=\"1\"\n                  list=\"catchup-ranges\"\n                  onChange={(e) => setRange(+e.target.value)}\n                />{' '}\n                <span\n                  style={{\n                    width: '8em',\n                  }}\n                >\n                  {RANGES[range - 1].label}\n                  <br />\n                  <small class=\"insignificant\">\n                    {range == RANGES[RANGES.length - 1].value\n                      ? 'until the max'\n                      : niceDateTime(\n                          new Date(Date.now() - range * 60 * 60 * 1000),\n                        )}\n                  </small>\n                </span>\n                <datalist id=\"catchup-ranges\">\n                  {RANGES.map(({ label, value }) => (\n                    <option value={value} label={label} />\n                  ))}\n                </datalist>{' '}\n                <button\n                  type=\"button\"\n                  onClick={() => {\n                    if (range < RANGES[RANGES.length - 1].value) {\n                      let duration;\n                      if (\n                        range === RANGES[RANGES.length - 1].value &&\n                        catchupLastRef.current?.checked\n                      ) {\n                        duration = Date.now() - lastCatchupEndAt;\n                      } else {\n                        duration = range * 60 * 60 * 1000;\n                      }\n                      handleCatchupClick({ duration });\n                    } else {\n                      handleCatchupClick();\n                    }\n                  }}\n                >\n                  Catch up\n                </button>\n              </div>\n              {lastCatchupRange && range > lastCatchupRange ? (\n                <p class=\"catchup-info\">\n                  <Icon icon=\"info\" /> Overlaps with your last catch-up\n                </p>\n              ) : range === RANGES[RANGES.length - 1].value &&\n                lastCatchupEndAt ? (\n                <p class=\"catchup-info\">\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      switch\n                      checked\n                      ref={catchupLastRef}\n                    />{' '}\n                    Until the last catch-up (\n                    {dtf.format(new Date(lastCatchupEndAt))})\n                  </label>\n                </p>\n              ) : null}\n              <p class=\"insignificant\">\n                <small>\n                  Note: your instance might only show a maximum of 800 posts in\n                  the Home timeline regardless of the time range. Could be less\n                  or more.\n                </small>\n              </p>\n              {!!prevCatchups?.length && (\n                <div class=\"catchup-prev\">\n                  <p>Previously…</p>\n                  <ul>\n                    {prevCatchups.map((pc) => (\n                      <li key={pc.id}>\n                        <Link to={`/catchup?id=${pc.id}`}>\n                          <Icon icon=\"history2\" />{' '}\n                          <span>\n                            {pc.startAt\n                              ? dtf.formatRange(\n                                  new Date(pc.startAt),\n                                  new Date(pc.endAt),\n                                )\n                              : `… – ${dtf.format(new Date(pc.endAt))}`}\n                          </span>\n                        </Link>{' '}\n                        <span>\n                          <small class=\"ib insignificant\">\n                            {pc.count} posts\n                          </small>{' '}\n                          <button\n                            type=\"button\"\n                            class=\"light danger small\"\n                            onClick={async () => {\n                              const yes = confirm('Remove this catch-up?');\n                              if (yes) {\n                                let t = showToast(`Removing Catch-up ${pc.id}`);\n                                await db.catchup.del(pc.id);\n                                t?.hideToast?.();\n                                showToast(`Catch-up ${pc.id} removed`);\n                                reloadCatchups();\n                              }\n                            }}\n                          >\n                            <Icon icon=\"x\" />\n                          </button>\n                        </span>\n                      </li>\n                    ))}\n                  </ul>\n                  {prevCatchups.length >= 3 && (\n                    <p>\n                      <small>\n                        Note: Only max 3 will be stored. The rest will be\n                        automatically removed.\n                      </small>\n                    </p>\n                  )}\n                </div>\n              )}\n            </div>\n          )}\n          {uiState === 'loading' && (\n            <div class=\"ui-state catchup-start\">\n              <Loader abrupt />\n              <p class=\"insignificant\">Fetching posts…</p>\n              <p class=\"insignificant\">This might take a while.</p>\n            </div>\n          )}\n          {uiState === 'results' && (\n            <>\n              <div class=\"catchup-header\">\n                {posts.length > 0 && (\n                  <p>\n                    <b class=\"ib\">\n                      {dtf.formatRange(\n                        new Date(posts[0].createdAt),\n                        new Date(posts[posts.length - 1].createdAt),\n                      )}\n                    </b>\n                  </p>\n                )}\n                <aside>\n                  <button\n                    hidden={\n                      selectedFilterCategory === 'All' &&\n                      !selectedAuthor &&\n                      sortBy === 'createdAt' &&\n                      sortOrder === 'asc'\n                    }\n                    type=\"button\"\n                    class=\"plain4 small\"\n                    onClick={() => {\n                      setSelectedFilterCategory('All');\n                      setSelectedAuthor(null);\n                      setSortBy('createdAt');\n                      setGroupBy(null);\n                      setSortOrder('asc');\n                    }}\n                  >\n                    Reset filters\n                  </button>\n                  {links?.length > 0 && (\n                    <button\n                      type=\"button\"\n                      class=\"plain small\"\n                      onClick={() => setShowTopLinks(!showTopLinks)}\n                    >\n                      Top links{' '}\n                      <Icon\n                        icon=\"chevron-down\"\n                        style={{\n                          transform: showTopLinks\n                            ? 'rotate(180deg)'\n                            : 'rotate(0deg)',\n                        }}\n                      />\n                    </button>\n                  )}\n                </aside>\n              </div>\n              <div class=\"shazam-container no-animation\" hidden={!showTopLinks}>\n                <div class=\"shazam-container-inner\">\n                  <div class=\"catchup-top-links links-bar\">\n                    {links.map((link) => {\n                      const { card, shared, sharers, likes, boosts } = link;\n                      const {\n                        blurhash,\n                        title,\n                        description,\n                        url,\n                        image,\n                        imageDescription,\n                        language,\n                        width,\n                        height,\n                        publishedAt,\n                      } = card;\n                      const domain = punycode.toUnicode(\n                        new URL(url).hostname\n                          .replace(/^www\\./, '')\n                          .replace(/\\/$/, ''),\n                      );\n                      let accentColor;\n                      if (blurhash) {\n                        const averageColor = getBlurHashAverageColor(blurhash);\n                        const labAverageColor = rgb2oklab(averageColor);\n                        accentColor = oklab2rgb([\n                          0.6,\n                          labAverageColor[1],\n                          labAverageColor[2],\n                        ]);\n                      }\n\n                      return (\n                        <a\n                          key={url}\n                          href={url}\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                          style={\n                            accentColor\n                              ? {\n                                  '--accent-color': `rgb(${accentColor.join(\n                                    ',',\n                                  )})`,\n                                  '--accent-alpha-color': `rgba(${accentColor.join(\n                                    ',',\n                                  )}, 0.4)`,\n                                }\n                              : {}\n                          }\n                        >\n                          <article>\n                            <figure>\n                              <img\n                                src={image}\n                                alt={imageDescription}\n                                width={width}\n                                height={height}\n                                loading=\"lazy\"\n                              />\n                            </figure>\n                            <div class=\"article-body\">\n                              <header>\n                                <div class=\"article-meta\">\n                                  <span class=\"domain\">{domain}</span>{' '}\n                                  {!!publishedAt && <>&middot; </>}\n                                  {!!publishedAt && (\n                                    <>\n                                      <RelativeTime\n                                        datetime={publishedAt}\n                                        format=\"micro\"\n                                      />\n                                    </>\n                                  )}\n                                </div>\n                                {!!title && (\n                                  <h1\n                                    class=\"title\"\n                                    lang={language}\n                                    dir=\"auto\"\n                                    title={title}\n                                  >\n                                    {title}\n                                  </h1>\n                                )}\n                              </header>\n                              {!!description && (\n                                <p\n                                  class=\"description\"\n                                  lang={language}\n                                  dir=\"auto\"\n                                  title={description}\n                                >\n                                  {description}\n                                </p>\n                              )}\n                              <hr />\n                              <p\n                                style={{\n                                  whiteSpace: 'nowrap',\n                                }}\n                              >\n                                Shared by{' '}\n                                {sharers.map((s) => {\n                                  const { avatarStatic, displayName } = s;\n                                  return (\n                                    <Avatar\n                                      url={avatarStatic}\n                                      size=\"s\"\n                                      alt={displayName}\n                                    />\n                                  );\n                                })}\n                              </p>\n                            </div>\n                          </article>\n                        </a>\n                      );\n                    })}\n                  </div>\n                </div>\n              </div>\n              {posts.length >= 5 &&\n                (postsBarType === '3d' ? (\n                  <div class=\"catchup-posts-viz-time-bar\">{postsBins}</div>\n                ) : (\n                  <div class=\"catchup-posts-viz-bar\">{postsBar}</div>\n                ))}\n              {posts.length >= 2 && (\n                <div class=\"catchup-filters\">\n                  <label class=\"filter-cat\">\n                    <input\n                      type=\"radio\"\n                      name=\"filter-cat\"\n                      checked={selectedFilterCategory.toLowerCase() === 'all'}\n                      onChange={() => {\n                        setSelectedFilterCategory('All');\n                      }}\n                    />\n                    All <span class=\"count\">{posts.length}</span>\n                  </label>\n                  {FILTER_LABELS.map(\n                    (label) =>\n                      !!filterCounts[label] && (\n                        <label\n                          class=\"filter-cat\"\n                          key={label}\n                          title={\n                            (\n                              (filterCounts[label] / posts.length) *\n                              100\n                            ).toFixed(2) + '%'\n                          }\n                        >\n                          <input\n                            type=\"radio\"\n                            name=\"filter-cat\"\n                            checked={\n                              selectedFilterCategory.toLowerCase() ===\n                              label.toLowerCase()\n                            }\n                            onChange={() => {\n                              setSelectedFilterCategory(label);\n                              // setSelectedAuthor(null);\n                            }}\n                          />\n                          {label}{' '}\n                          <span class=\"count\">{filterCounts[label]}</span>\n                        </label>\n                      ),\n                  )}\n                </div>\n              )}\n              {posts.length >= 2 && !!authorCounts && (\n                <div\n                  class=\"catchup-filters authors-filters\"\n                  ref={authorsListParent}\n                >\n                  {authorCountsList.map((author) => (\n                    <label\n                      class=\"filter-author\"\n                      data-author={author}\n                      key={`${author}-${authorCounts[author]}`}\n                      // Preact messed up the order sometimes, need additional key besides just `author`\n                      // https://github.com/preactjs/preact/issues/2849\n                    >\n                      <input\n                        type=\"radio\"\n                        name=\"filter-author\"\n                        checked={selectedAuthor === author}\n                        onChange={() => {\n                          setSelectedAuthor(author);\n                          // setGroupBy(null);\n                        }}\n                        onClick={() => {\n                          if (selectedAuthor === author) {\n                            setSelectedAuthor(null);\n                          }\n                        }}\n                      />\n                      <Avatar\n                        url={\n                          authors[author].avatarStatic || authors[author].avatar\n                        }\n                        size=\"xxl\"\n                        alt={`${authors[author].displayName} (@${authors[author].acct})`}\n                      />{' '}\n                      <span class=\"count\">{authorCounts[author]}</span>\n                      <span class=\"username\">{authors[author].username}</span>\n                    </label>\n                  ))}\n                  {authorCountsList.length > 5 && (\n                    <small\n                      key=\"authors-count\"\n                      style={{\n                        whiteSpace: 'nowrap',\n                        paddingInline: '1em',\n                        opacity: 0.33,\n                      }}\n                    >\n                      {authorCountsList.length} authors\n                    </small>\n                  )}\n                </div>\n              )}\n              {posts.length >= 2 && (\n                <div class=\"catchup-filters\">\n                  <span class=\"filter-label\">Sort</span>{' '}\n                  <fieldset class=\"radio-field-group\">\n                    {FILTER_SORTS.map((key) => (\n                      <label\n                        class=\"filter-sort\"\n                        key={key}\n                        onClick={(e) => {\n                          if (sortBy === key) {\n                            e.preventDefault();\n                            e.stopPropagation();\n                            setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');\n                          }\n                        }}\n                      >\n                        <input\n                          type=\"radio\"\n                          name=\"filter-sort-cat\"\n                          checked={sortBy === key}\n                          onChange={() => {\n                            setSortBy(key);\n                            const order = /(replies|favourites|reblogs)/.test(\n                              key,\n                            )\n                              ? 'desc'\n                              : 'asc';\n                            setSortOrder(order);\n                          }}\n                        />\n                        {\n                          {\n                            createdAt: 'Date',\n                            repliesCount: 'Replies',\n                            favouritesCount: 'Likes',\n                            reblogsCount: 'Boosts',\n                            density: 'Density',\n                          }[key]\n                        }\n                        {sortBy === key && (sortOrder === 'asc' ? ' ↑' : ' ↓')}\n                      </label>\n                    ))}\n                  </fieldset>\n                  {/* <fieldset class=\"radio-field-group\">\n                    {['asc', 'desc'].map((key) => (\n                      <label class=\"filter-sort\" key={key}>\n                        <input\n                          type=\"radio\"\n                          name=\"filter-sort-dir\"\n                          checked={sortOrder === key}\n                          onChange={() => {\n                            setSortOrder(key);\n                          }}\n                        />\n                        {key === 'asc' ? '↑' : '↓'}\n                      </label>\n                    ))}\n                  </fieldset> */}\n                  <span class=\"filter-label\">Group</span>{' '}\n                  <fieldset class=\"radio-field-group\">\n                    {FILTER_GROUPS.map((key) => (\n                      <label class=\"filter-group\" key={key || 'none'}>\n                        <input\n                          type=\"radio\"\n                          name=\"filter-group\"\n                          checked={groupBy === key}\n                          onChange={() => {\n                            setGroupBy(key);\n                          }}\n                          disabled={key === 'account' && selectedAuthor}\n                        />\n                        {{\n                          account: 'Authors',\n                        }[key] || 'None'}\n                      </label>\n                    ))}\n                  </fieldset>\n                  {\n                    selectedAuthor && authorCountsList.length > 1 ? (\n                      <button\n                        type=\"button\"\n                        class=\"plain6 small\"\n                        onClick={() => {\n                          setSelectedAuthor(null);\n                        }}\n                        style={{\n                          whiteSpace: 'nowrap',\n                        }}\n                      >\n                        Show all authors\n                      </button>\n                    ) : null\n                    // <button\n                    //   type=\"button\"\n                    //   class=\"plain4 small\"\n                    //   onClick={() => {}}\n                    // >\n                    //   Group by authors\n                    // </button>\n                  }\n                </div>\n              )}\n              <ul\n                class={`catchup-list catchup-filter-${\n                  FILTER_VALUES[selectedFilterCategory] || ''\n                } ${sortBy ? `catchup-sort-${sortBy}` : ''} ${\n                  selectedAuthor && authors[selectedAuthor]\n                    ? `catchup-selected-author`\n                    : ''\n                } ${groupBy ? `catchup-group-${groupBy}` : ''}`}\n              >\n                {sortedFilteredPosts.map((post, i) => {\n                  const id = post.reblog?.id || post.id;\n                  let showSeparator = false;\n                  if (groupBy === 'account') {\n                    if (\n                      prevGroup.current &&\n                      post.account.id !== prevGroup.current &&\n                      i > 0\n                    ) {\n                      showSeparator = true;\n                    }\n                    prevGroup.current = post.account.id;\n                  }\n                  return (\n                    <Fragment key={`${post.id}-${showSeparator}`}>\n                      {showSeparator && <li class=\"separator\" />}\n                      <IntersectionPostLineItem\n                        to={`/${instance}/s/${id}`}\n                        post={post}\n                        root={scrollableRef.current}\n                      />\n                    </Fragment>\n                  );\n                })}\n              </ul>\n              <footer>\n                {filteredPosts.length > 5 && (\n                  <p>\n                    {selectedFilterCategory === 'Boosts'\n                      ? \"You don't have to read everything.\"\n                      : \"That's all.\"}{' '}\n                    <button\n                      type=\"button\"\n                      class=\"textual\"\n                      onClick={() => {\n                        scrollableRef.current.scrollTop = 0;\n                      }}\n                    >\n                      Back to top\n                    </button>\n                    .\n                  </p>\n                )}\n              </footer>\n            </>\n          )}\n        </main>\n      </div>\n      {showHelp && (\n        <Modal onClose={() => setShowHelp(false)}>\n          <div class=\"sheet\" id=\"catchup-help-sheet\">\n            <button\n              type=\"button\"\n              class=\"sheet-close\"\n              onClick={() => setShowHelp(false)}\n            >\n              <Icon icon=\"x\" />\n            </button>\n            <header>\n              <h2>Help</h2>\n            </header>\n            <main>\n              <dl>\n                <dt>Top links</dt>\n                <dd>\n                  Links shared by followings, sorted by shared counts, boosts\n                  and likes.\n                </dd>\n                <dt>Sort: Density</dt>\n                <dd>\n                  Posts are sorted by information density or depth. Shorter\n                  posts are \"lighter\" while longer posts are \"heavier\". Posts\n                  with photos are \"heavier\" than posts without photos.\n                </dd>\n                <dt>Group: Authors</dt>\n                <dd>\n                  Posts are grouped by authors, sorted by posts count per\n                  author.\n                </dd>\n                <dt>Keyboard shortcuts</dt>\n                <dd>\n                  <kbd>j</kbd>: Next post\n                </dd>\n                <dd>\n                  <kbd>k</kbd>: Previous post\n                </dd>\n                <dd>\n                  <kbd>l</kbd>: Next author\n                </dd>\n                <dd>\n                  <kbd>h</kbd>: Previous author\n                </dd>\n                <dd>\n                  <kbd>Enter</kbd>: Open post details\n                </dd>\n                <dd>\n                  <kbd>.</kbd>: Scroll to top\n                </dd>\n              </dl>\n            </main>\n          </div>\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nconst PostLine = memo(\n  function ({ post }) {\n    const {\n      id,\n      account,\n      group,\n      reblog,\n      inReplyToId,\n      inReplyToAccountId,\n      _followedTags: isFollowedTags,\n      _filtered: filterInfo,\n      visibility,\n      __BOOSTERS,\n    } = post;\n    const isReplyTo = inReplyToId && inReplyToAccountId !== account.id;\n    const isFiltered = !!filterInfo;\n\n    const debugHover = (e) => {\n      if (e.shiftKey) {\n        console.log({\n          ...post,\n        });\n      }\n    };\n\n    return (\n      <article\n        class={`post-line ${\n          group\n            ? 'group'\n            : reblog\n            ? 'reblog'\n            : isFollowedTags?.length\n            ? 'followed-tags'\n            : ''\n        } ${isReplyTo ? 'reply-to' : ''} ${\n          isFiltered ? 'filtered' : ''\n        } visibility-${visibility}`}\n        onMouseEnter={debugHover}\n      >\n        <span class=\"post-author\">\n          {reblog ? (\n            <span class=\"post-reblog-avatar\">\n              <Avatar\n                url={account.avatarStatic || account.avatar}\n                squircle={account.bot}\n              />\n              {__BOOSTERS?.size > 0\n                ? [...__BOOSTERS].map((b) => (\n                    <Avatar url={b.avatarStatic || b.avatar} squircle={b.bot} />\n                  ))\n                : ''}{' '}\n              <Icon icon=\"rocket\" />{' '}\n              {/* <Avatar\n              url={reblog.account.avatarStatic || reblog.account.avatar}\n              squircle={reblog.account.bot}\n            /> */}\n              <NameText account={reblog.account} showAvatar />\n            </span>\n          ) : (\n            <NameText account={account} showAvatar />\n          )}\n        </span>\n        <PostPeek post={reblog || post} filterInfo={filterInfo} />\n        <span class=\"post-meta\">\n          <PostStats post={reblog || post} />{' '}\n          <RelativeTime\n            datetime={new Date(reblog?.createdAt || post.createdAt)}\n            format=\"micro\"\n          />\n        </span>\n      </article>\n    );\n  },\n  (oldProps, newProps) => {\n    return oldProps?.post?.id === newProps?.post?.id;\n  },\n);\n\nconst IntersectionPostLineItem = ({ root, to, ...props }) => {\n  const ref = useRef();\n  const [show, setShow] = useState(false);\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      (entries) => {\n        const entry = entries[0];\n        if (entry.isIntersecting) {\n          queueMicrotask(() => setShow(true));\n          observer.unobserve(ref.current);\n        }\n      },\n      {\n        root,\n        rootMargin: `${Math.max(320, screen.height * 0.75)}px`,\n      },\n    );\n    if (ref.current) observer.observe(ref.current);\n    return () => {\n      if (ref.current) observer.unobserve(ref.current);\n    };\n  }, []);\n\n  return show ? (\n    <li>\n      <Link to={to}>\n        <PostLine {...props} />\n      </Link>\n    </li>\n  ) : (\n    <li ref={ref} style={{ height: '4em' }} />\n  );\n};\n\n// A media speak a thousand words\nconst MEDIA_DENSITY = 8;\nconst CARD_DENSITY = 8;\nfunction postDensity(post) {\n  const { spoilerText, content, poll, mediaAttachments, card } = post;\n  const pollContent = poll?.options?.length\n    ? poll.options.reduce((acc, cur) => acc + cur.title, '')\n    : '';\n  const density =\n    (spoilerText.length + htmlContentLength(content) + pollContent.length) /\n      140 +\n    (mediaAttachments?.length\n      ? MEDIA_DENSITY * mediaAttachments.length\n      : card?.image\n      ? CARD_DENSITY\n      : 0);\n  return density;\n}\n\nconst MEDIA_SIZE = 48;\n\nfunction PostPeek({ post, filterInfo }) {\n  const {\n    spoilerText,\n    sensitive,\n    content,\n    emojis,\n    poll,\n    mediaAttachments,\n    card,\n    inReplyToId,\n    inReplyToAccountId,\n    account,\n    _thread,\n  } = post;\n  const isThread =\n    (inReplyToId && inReplyToAccountId === account.id) || !!_thread;\n\n  const readingExpandSpoilers = useMemo(() => {\n    const prefs = store.account.get('preferences') || {};\n    return !!prefs['reading:expand:spoilers'];\n  }, []);\n  // const readingExpandSpoilers = true;\n  const showMedia = readingExpandSpoilers || (!spoilerText && !sensitive);\n  const postText = content ? statusPeek(post) : '';\n\n  const showPostContent = !spoilerText || readingExpandSpoilers;\n\n  return (\n    <div class=\"post-peek\" title={!spoilerText ? postText : ''}>\n      <span class=\"post-peek-content\">\n        {isThread && !showPostContent && (\n          <>\n            <span class=\"post-peek-tag post-peek-thread\">Thread</span>{' '}\n          </>\n        )}\n        {!!filterInfo ? (\n          <span class=\"post-peek-filtered\">\n            Filtered{filterInfo?.titlesStr ? `: ${filterInfo.titlesStr}` : ''}\n          </span>\n        ) : (\n          <>\n            {!!spoilerText && (\n              <span class=\"post-peek-spoiler\">\n                <Icon\n                  icon={`${readingExpandSpoilers ? 'eye-open' : 'eye-close'}`}\n                />{' '}\n                {spoilerText}\n              </span>\n            )}\n            {showPostContent && (\n              <div class=\"post-peek-html\">\n                {isThread && (\n                  <>\n                    <span class=\"post-peek-tag post-peek-thread\">Thread</span>{' '}\n                  </>\n                )}\n                {!!content && (\n                  <div\n                    dangerouslySetInnerHTML={{\n                      __html: emojifyText(content, emojis),\n                    }}\n                  />\n                )}\n                {!!poll?.options?.length &&\n                  poll.options.map((o) => (\n                    <div>\n                      {poll.multiple ? '▪️' : '•'} {o.title}\n                    </div>\n                  ))}\n                {!content &&\n                  mediaAttachments?.length === 1 &&\n                  mediaAttachments[0].description && (\n                    <>\n                      <span class=\"post-peek-tag post-peek-alt\">ALT</span>{' '}\n                      <div>{mediaAttachments[0].description}</div>\n                    </>\n                  )}\n              </div>\n            )}\n          </>\n        )}\n      </span>\n      {!filterInfo && (\n        <span class=\"post-peek-post-content\">\n          {!!poll && (\n            <span class=\"post-peek-tag post-peek-poll\">\n              <Icon icon=\"poll\" size=\"s\" />\n              Poll\n            </span>\n          )}\n          {!!mediaAttachments?.length\n            ? mediaAttachments.map((m) => {\n                const mediaURL = m.previewUrl || m.url;\n                const remoteMediaURL = m.previewRemoteUrl || m.remoteUrl;\n                return (\n                  <span key={m.id} class=\"post-peek-media\">\n                    {{\n                      image:\n                        (mediaURL || remoteMediaURL) && showMedia ? (\n                          <img\n                            src={mediaURL}\n                            width={MEDIA_SIZE}\n                            height={MEDIA_SIZE}\n                            alt={m.description}\n                            loading=\"lazy\"\n                            onError={(e) => {\n                              const { src } = e.target;\n                              if (src === mediaURL) {\n                                e.target.src = remoteMediaURL;\n                              }\n                            }}\n                          />\n                        ) : (\n                          <span class=\"post-peek-faux-media\">🖼</span>\n                        ),\n                      gifv:\n                        (mediaURL || remoteMediaURL) && showMedia ? (\n                          <img\n                            src={mediaURL}\n                            width={MEDIA_SIZE}\n                            height={MEDIA_SIZE}\n                            alt={m.description}\n                            loading=\"lazy\"\n                            onError={(e) => {\n                              const { src } = e.target;\n                              if (src === mediaURL) {\n                                e.target.src = remoteMediaURL;\n                              }\n                            }}\n                          />\n                        ) : (\n                          <span class=\"post-peek-faux-media\">🎞️</span>\n                        ),\n                      video:\n                        (mediaURL || remoteMediaURL) && showMedia ? (\n                          <img\n                            src={mediaURL}\n                            width={MEDIA_SIZE}\n                            height={MEDIA_SIZE}\n                            alt={m.description}\n                            loading=\"lazy\"\n                            onError={(e) => {\n                              const { src } = e.target;\n                              if (src === mediaURL) {\n                                e.target.src = remoteMediaURL;\n                              }\n                            }}\n                          />\n                        ) : (\n                          <span class=\"post-peek-faux-media\">📹</span>\n                        ),\n                      audio: <span class=\"post-peek-faux-media\">🎵</span>,\n                    }[m.type] || null}\n                  </span>\n                );\n              })\n            : !!card &&\n              card.image &&\n              showMedia && (\n                <span\n                  class={`post-peek-media post-peek-card card-${\n                    card.type || ''\n                  }`}\n                >\n                  {card.image ? (\n                    <img\n                      src={card.image}\n                      width={MEDIA_SIZE}\n                      height={MEDIA_SIZE}\n                      alt={\n                        card.title || card.description || card.imageDescription\n                      }\n                      loading=\"lazy\"\n                    />\n                  ) : (\n                    <span class=\"post-peek-faux-media\">🔗</span>\n                  )}\n                </span>\n              )}\n        </span>\n      )}\n    </div>\n  );\n}\n\nfunction PostStats({ post }) {\n  const { reblogsCount, repliesCount, favouritesCount } = post;\n  return (\n    <span class=\"post-stats\">\n      {repliesCount > 0 && (\n        <span class=\"post-stat-replies\">\n          <Icon icon=\"comment2\" size=\"s\" /> {shortenNumber(repliesCount)}\n        </span>\n      )}\n      {favouritesCount > 0 && (\n        <span class=\"post-stat-likes\">\n          <Icon icon=\"heart\" size=\"s\" /> {shortenNumber(favouritesCount)}\n        </span>\n      )}\n      {reblogsCount > 0 && (\n        <span class=\"post-stat-boosts\">\n          <Icon icon=\"rocket\" size=\"s\" /> {shortenNumber(reblogsCount)}\n        </span>\n      )}\n    </span>\n  );\n}\n\nconst { locale } = new Intl.DateTimeFormat().resolvedOptions();\nconst dtf = new Intl.DateTimeFormat(locale, {\n  year: 'numeric',\n  month: 'short',\n  day: 'numeric',\n  hour: 'numeric',\n  minute: 'numeric',\n});\n\nfunction binByTime(data, key, numBins) {\n  // Extract dates from data objects\n  const dates = data.map((item) => new Date(item[key]));\n\n  // Find minimum and maximum dates directly (avoiding Math.min/max)\n  const minDate = dates.reduce(\n    (acc, date) => (date < acc ? date : acc),\n    dates[0],\n  );\n  const maxDate = dates.reduce(\n    (acc, date) => (date > acc ? date : acc),\n    dates[0],\n  );\n\n  // Calculate the time span in milliseconds\n  const range = maxDate.getTime() - minDate.getTime();\n\n  // Create empty bins and loop through data\n  const bins = Array.from({ length: numBins }, () => []);\n  data.forEach((item) => {\n    const date = new Date(item[key]);\n    const normalized = (date.getTime() - minDate.getTime()) / range;\n    const binIndex = Math.floor(normalized * (numBins - 1));\n    bins[binIndex].push(item);\n  });\n\n  return bins;\n}\n\nexport default Catchup;\n","import { useRef } from 'preact/hooks';\n\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Favourites() {\n  useTitle('Likes', '/f');\n  const { masto, instance } = api();\n  const favouritesIterator = useRef();\n  async function fetchFavourites(firstLoad) {\n    if (firstLoad || !favouritesIterator.current) {\n      favouritesIterator.current = masto.v1.favourites.list({ limit: LIMIT });\n    }\n    return await favouritesIterator.current.next();\n  }\n\n  return (\n    <Timeline\n      title=\"Likes\"\n      id=\"favourites\"\n      emptyText=\"No likes yet. Go like something!\"\n      errorText=\"Unable to load likes\"\n      instance={instance}\n      fetchItems={fetchFavourites}\n    />\n  );\n}\n\nexport default Favourites;\n","import './filters.css';\n\nimport { useEffect, useReducer, useRef, useState } from 'preact/hooks';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport MenuConfirm from '../components/menu-confirm';\nimport Modal from '../components/modal';\nimport NavMenu from '../components/nav-menu';\nimport RelativeTime from '../components/relative-time';\nimport { api } from '../utils/api';\nimport useInterval from '../utils/useInterval';\nimport useTitle from '../utils/useTitle';\n\nconst FILTER_CONTEXT = ['home', 'public', 'notifications', 'thread', 'account'];\nconst FILTER_CONTEXT_UNIMPLEMENTED = ['notifications', 'thread', 'account'];\nconst FILTER_CONTEXT_LABELS = {\n  home: 'Home and lists',\n  notifications: 'Notifications',\n  public: 'Public timelines',\n  thread: 'Conversations',\n  account: 'Profiles',\n};\n\nconst EXPIRY_DURATIONS = [\n  0, // forever\n  30 * 60, // 30 minutes\n  60 * 60, // 1 hour\n  6 * 60 * 60, // 6 hours\n  12 * 60 * 60, // 12 hours\n  60 * 60 * 24, // 24 hours\n  60 * 60 * 24 * 7, // 7 days\n  60 * 60 * 24 * 30, // 30 days\n];\nconst EXPIRY_DURATIONS_LABELS = {\n  0: 'Never',\n  1800: '30 minutes',\n  3600: '1 hour',\n  21600: '6 hours',\n  43200: '12 hours',\n  86_400: '24 hours',\n  604_800: '7 days',\n  2_592_000: '30 days',\n};\n\nfunction Filters() {\n  const { masto } = api();\n  useTitle(`Filters`, `/ft`);\n  const [uiState, setUIState] = useState('default');\n  const [showFiltersAddEditModal, setShowFiltersAddEditModal] = useState(false);\n\n  const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n  const [filters, setFilters] = useState([]);\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const filters = await masto.v2.filters.list();\n        filters.sort((a, b) => a.title.localeCompare(b.title));\n        filters.forEach((filter) => {\n          if (filter.keywords?.length) {\n            filter.keywords.sort((a, b) => a.id - b.id);\n          }\n        });\n        console.log(filters);\n        setFilters(filters);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, [reloadCount]);\n\n  return (\n    <div id=\"filters-page\" class=\"deck-container\" tabIndex=\"-1\">\n      <div class=\"timeline-deck deck\">\n        <header>\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n              <Link to=\"/\" class=\"button plain\">\n                <Icon icon=\"home\" size=\"l\" />\n              </Link>\n            </div>\n            <h1>Filters</h1>\n            <div class=\"header-side\">\n              <button\n                type=\"button\"\n                class=\"plain\"\n                onClick={() => {\n                  setShowFiltersAddEditModal(true);\n                }}\n              >\n                <Icon icon=\"plus\" size=\"l\" alt=\"New filter\" />\n              </button>\n            </div>\n          </div>\n        </header>\n        <main>\n          {filters.length > 0 ? (\n            <>\n              <ul class=\"filters-list\">\n                {filters.map((filter) => {\n                  const { id, title, expiresAt, keywords } = filter;\n                  return (\n                    <li key={id}>\n                      <div>\n                        <h2>{title}</h2>\n                        {keywords?.length > 0 && (\n                          <div>\n                            {keywords.map((k) => (\n                              <>\n                                <span class=\"tag collapsed insignificant\">\n                                  {k.wholeWord ? `“${k.keyword}”` : k.keyword}\n                                </span>{' '}\n                              </>\n                            ))}\n                          </div>\n                        )}\n                        <small class=\"insignificant\">\n                          <ExpiryStatus expiresAt={expiresAt} />\n                        </small>\n                      </div>\n                      <button\n                        type=\"button\"\n                        class=\"plain\"\n                        onClick={() => {\n                          setShowFiltersAddEditModal({\n                            filter,\n                          });\n                        }}\n                      >\n                        <Icon icon=\"pencil\" size=\"l\" alt=\"Edit filter\" />\n                      </button>\n                    </li>\n                  );\n                })}\n              </ul>\n              {filters.length > 1 && (\n                <footer class=\"ui-state\">\n                  <small class=\"insignificant\">\n                    {filters.length} filter\n                    {filters.length === 1 ? '' : 's'}\n                  </small>\n                </footer>\n              )}\n            </>\n          ) : uiState === 'loading' ? (\n            <p class=\"ui-state\">\n              <Loader />\n            </p>\n          ) : uiState === 'error' ? (\n            <p class=\"ui-state\">Unable to load filters.</p>\n          ) : (\n            <p class=\"ui-state\">No filters yet.</p>\n          )}\n        </main>\n      </div>\n      {!!showFiltersAddEditModal && (\n        <Modal\n          title=\"Add filter\"\n          onClose={() => {\n            setShowFiltersAddEditModal(false);\n          }}\n        >\n          <FiltersAddEdit\n            filter={showFiltersAddEditModal?.filter}\n            onClose={(result) => {\n              if (result.state === 'success') {\n                reload();\n              }\n              setShowFiltersAddEditModal(false);\n            }}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nlet _id = 1;\nconst incID = () => _id++;\nfunction FiltersAddEdit({ filter, onClose }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const editMode = !!filter;\n  const { context, expiresAt, id, keywords, title, filterAction } =\n    filter || {};\n  const hasExpiry = !!expiresAt;\n  const expiresAtDate = hasExpiry && new Date(expiresAt);\n  const [editKeywords, setEditKeywords] = useState(keywords || []);\n  const keywordsRef = useRef();\n\n  // Hacky way of handling removed keywords for both existing and new ones\n  const [removedKeywordIDs, setRemovedKeywordIDs] = useState([]);\n  const [removedKeyword_IDs, setRemovedKeyword_IDs] = useState([]);\n\n  const filteredEditKeywords = editKeywords.filter(\n    (k) =>\n      !removedKeywordIDs.includes(k.id) && !removedKeyword_IDs.includes(k._id),\n  );\n\n  return (\n    <div class=\"sheet\" id=\"filters-add-edit-modal\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>{editMode ? 'Edit filter' : 'New filter'}</h2>\n      </header>\n      <main>\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const title = formData.get('title');\n            const keywordIDs = formData.getAll('keyword_attributes[][id]');\n            const keywordKeywords = formData.getAll(\n              'keyword_attributes[][keyword]',\n            );\n            // const keywordWholeWords = formData.getAll(\n            //   'keyword_attributes[][whole_word]',\n            // );\n            // Not using getAll because it skips the empty checkboxes\n            const keywordWholeWords = [\n              ...keywordsRef.current.querySelectorAll(\n                'input[name=\"keyword_attributes[][whole_word]\"]',\n              ),\n            ].map((i) => i.checked);\n            const keywordsAttributes = keywordKeywords.map((k, i) => ({\n              id: keywordIDs[i] || undefined,\n              keyword: k,\n              wholeWord: keywordWholeWords[i],\n            }));\n            // if (editMode && keywords?.length) {\n            //   // Find which one got deleted and add to keywordsAttributes\n            //   keywords.forEach((k) => {\n            //     if (!keywordsAttributes.find((ka) => ka.id === k.id)) {\n            //       keywordsAttributes.push({\n            //         ...k,\n            //         _destroy: true,\n            //       });\n            //     }\n            //   });\n            // }\n            if (editMode && removedKeywordIDs?.length) {\n              removedKeywordIDs.forEach((id) => {\n                keywordsAttributes.push({\n                  id,\n                  _destroy: true,\n                });\n              });\n            }\n            const context = formData.getAll('context');\n            let expiresIn = formData.get('expires_in');\n            const filterAction = formData.get('filter_action');\n            console.log({\n              title,\n              keywordIDs,\n              keywords: keywordKeywords,\n              wholeWords: keywordWholeWords,\n              keywordsAttributes,\n              context,\n              expiresIn,\n              filterAction,\n            });\n\n            // Required fields\n            if (!title || !context?.length) {\n              return;\n            }\n\n            setUIState('loading');\n\n            (async () => {\n              try {\n                let filterResult;\n\n                if (editMode) {\n                  if (expiresIn === '' || expiresIn === null) {\n                    // No value\n                    // Preserve existing expiry if not specified\n                    // Seconds from now to expiresAtDate\n                    // Other clients don't do this\n                    if (hasExpiry) {\n                      expiresIn = Math.floor(\n                        (expiresAtDate - new Date()) / 1000,\n                      );\n                    } else {\n                      expiresIn = null;\n                    }\n                  } else if (expiresIn === '0' || expiresIn === 0) {\n                    // 0 = Never\n                    expiresIn = null;\n                  } else {\n                    expiresIn = +expiresIn;\n                  }\n                  filterResult = await masto.v2.filters.$select(id).update({\n                    title,\n                    context,\n                    expiresIn,\n                    keywordsAttributes,\n                    filterAction,\n                  });\n                } else {\n                  expiresIn = +expiresIn || null;\n                  filterResult = await masto.v2.filters.create({\n                    title,\n                    context,\n                    expiresIn,\n                    keywordsAttributes,\n                    filterAction,\n                  });\n                }\n                console.log({ filterResult });\n                setUIState('default');\n                onClose?.({\n                  state: 'success',\n                  filter: filterResult,\n                });\n              } catch (error) {\n                console.error(error);\n                setUIState('error');\n                alert(\n                  editMode\n                    ? 'Unable to edit filter'\n                    : 'Unable to create filter',\n                );\n              }\n            })();\n          }}\n        >\n          <div class=\"filter-form-row\">\n            <label>\n              <b>Title</b>\n              <input\n                type=\"text\"\n                name=\"title\"\n                defaultValue={title}\n                disabled={uiState === 'loading'}\n                dir=\"auto\"\n                required\n              />\n            </label>\n          </div>\n          <div class=\"filter-form-keywords\" ref={keywordsRef}>\n            {filteredEditKeywords.length ? (\n              <ul class=\"filter-keywords\">\n                {filteredEditKeywords.map((k) => {\n                  const { id, keyword, wholeWord, _id } = k;\n                  return (\n                    <li key={`${id}-${_id}`}>\n                      <input\n                        type=\"hidden\"\n                        name=\"keyword_attributes[][id]\"\n                        value={id}\n                      />\n                      <input\n                        name=\"keyword_attributes[][keyword]\"\n                        type=\"text\"\n                        defaultValue={keyword}\n                        disabled={uiState === 'loading'}\n                        required\n                      />\n                      <div class=\"filter-keyword-actions\">\n                        <label>\n                          <input\n                            name=\"keyword_attributes[][whole_word]\"\n                            type=\"checkbox\"\n                            value={id} // Hacky way to map checkbox boolean to the keyword id\n                            defaultChecked={wholeWord}\n                            disabled={uiState === 'loading'}\n                          />{' '}\n                          Whole word\n                        </label>\n                        <button\n                          type=\"button\"\n                          class=\"light danger small\"\n                          disabled={uiState === 'loading'}\n                          onClick={() => {\n                            if (id) {\n                              removedKeywordIDs.push(id);\n                              setRemovedKeywordIDs([...removedKeywordIDs]);\n                            } else if (_id) {\n                              removedKeyword_IDs.push(_id);\n                              setRemovedKeyword_IDs([...removedKeyword_IDs]);\n                            }\n                          }}\n                        >\n                          <Icon icon=\"x\" />\n                        </button>\n                      </div>\n                    </li>\n                  );\n                })}\n              </ul>\n            ) : (\n              <div class=\"filter-keywords\">\n                <div class=\"insignificant\">No keywords. Add one.</div>\n              </div>\n            )}\n            <footer class=\"filter-keywords-footer\">\n              <button\n                type=\"button\"\n                class=\"light\"\n                onClick={() => {\n                  setEditKeywords([\n                    ...editKeywords,\n                    {\n                      _id: incID(),\n                      keyword: '',\n                      wholeWord: true,\n                    },\n                  ]);\n                  setTimeout(() => {\n                    // Focus last input\n                    const fields =\n                      keywordsRef.current.querySelectorAll(\n                        'input[type=\"text\"]',\n                      );\n                    fields[fields.length - 1]?.focus?.();\n                  }, 10);\n                }}\n              >\n                Add keyword\n              </button>{' '}\n              {filteredEditKeywords?.length > 1 && (\n                <small class=\"insignificant\">\n                  {filteredEditKeywords.length} keyword\n                  {filteredEditKeywords.length === 1 ? '' : 's'}\n                </small>\n              )}\n            </footer>\n          </div>\n          <div class=\"filter-form-cols\">\n            <div class=\"filter-form-col\">\n              <div>\n                <b>Filter from…</b>\n              </div>\n              {FILTER_CONTEXT.map((ctx) => (\n                <div>\n                  <label\n                    class={\n                      FILTER_CONTEXT_UNIMPLEMENTED.includes(ctx)\n                        ? 'insignificant'\n                        : ''\n                    }\n                  >\n                    <input\n                      type=\"checkbox\"\n                      name=\"context\"\n                      value={ctx}\n                      defaultChecked={!!context ? context.includes(ctx) : true}\n                      disabled={uiState === 'loading'}\n                    />{' '}\n                    {FILTER_CONTEXT_LABELS[ctx]}\n                    {FILTER_CONTEXT_UNIMPLEMENTED.includes(ctx) ? '*' : ''}\n                  </label>{' '}\n                </div>\n              ))}\n              <p>\n                <small class=\"insignificant\">* Not implemented yet</small>\n              </p>\n            </div>\n            <div class=\"filter-form-col\">\n              {editMode && (\n                <>\n                  Status:{' '}\n                  <b>\n                    <ExpiryStatus expiresAt={expiresAt} showNeverExpires />\n                  </b>\n                </>\n              )}\n              <div>\n                <label for=\"filters-expires_in\">\n                  {editMode ? 'Change expiry' : 'Expiry'}\n                </label>\n                <select\n                  id=\"filters-expires_in\"\n                  name=\"expires_in\"\n                  disabled={uiState === 'loading'}\n                  defaultValue={editMode ? undefined : 0}\n                >\n                  {editMode && <option></option>}\n                  {EXPIRY_DURATIONS.map((v) => (\n                    <option value={v}>{EXPIRY_DURATIONS_LABELS[v]}</option>\n                  ))}\n                </select>\n              </div>\n              <p>\n                Filtered post will be…\n                <br />\n                <label class=\"ib\">\n                  <input\n                    type=\"radio\"\n                    name=\"filter_action\"\n                    value=\"warn\"\n                    defaultChecked={filterAction === 'warn' || !editMode}\n                    disabled={uiState === 'loading'}\n                  />{' '}\n                  minimized\n                </label>{' '}\n                <label class=\"ib\">\n                  <input\n                    type=\"radio\"\n                    name=\"filter_action\"\n                    value=\"hide\"\n                    defaultChecked={filterAction === 'hide'}\n                    disabled={uiState === 'loading'}\n                  />{' '}\n                  hidden\n                </label>\n              </p>\n            </div>\n          </div>\n          <footer class=\"filter-form-footer\">\n            <span>\n              <button type=\"submit\" disabled={uiState === 'loading'}>\n                {editMode ? 'Save' : 'Create'}\n              </button>{' '}\n              <Loader abrupt hidden={uiState !== 'loading'} />\n            </span>\n            {editMode && (\n              <MenuConfirm\n                disabled={uiState === 'loading'}\n                align=\"end\"\n                menuItemClassName=\"danger\"\n                confirmLabel=\"Delete this filter?\"\n                onClick={() => {\n                  setUIState('loading');\n                  (async () => {\n                    try {\n                      await masto.v2.filters.$select(id).remove();\n                      setUIState('default');\n                      onClose?.({\n                        state: 'success',\n                      });\n                    } catch (e) {\n                      console.error(e);\n                      setUIState('error');\n                      alert('Unable to delete filter.');\n                    }\n                  })();\n                }}\n              >\n                <button\n                  type=\"button\"\n                  class=\"light danger\"\n                  onClick={() => {}}\n                  disabled={uiState === 'loading'}\n                >\n                  Delete…\n                </button>\n              </MenuConfirm>\n            )}\n          </footer>\n        </form>\n      </main>\n    </div>\n  );\n}\n\nfunction ExpiryStatus({ expiresAt, showNeverExpires }) {\n  const hasExpiry = !!expiresAt;\n  const expiresAtDate = hasExpiry && new Date(expiresAt);\n  const expired = hasExpiry && expiresAtDate <= new Date();\n\n  // If less than a minute left, re-render interval every second, else every minute\n  const [_, rerender] = useReducer((c) => c + 1, 0);\n  useInterval(rerender, expired || 30_000);\n\n  return expired ? (\n    'Expired'\n  ) : hasExpiry ? (\n    <>\n      Expiring <RelativeTime datetime={expiresAtDate} />\n    </>\n  ) : (\n    showNeverExpires && 'Never expires'\n  );\n}\n\nexport default Filters;\n","import { useEffect, useState } from 'preact/hooks';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport NavMenu from '../components/nav-menu';\nimport { api } from '../utils/api';\nimport { fetchFollowedTags } from '../utils/followed-tags';\nimport useTitle from '../utils/useTitle';\n\nfunction FollowedHashtags() {\n  const { masto, instance } = api();\n  useTitle(`Followed Hashtags`, `/fh`);\n  const [uiState, setUIState] = useState('default');\n\n  const [followedHashtags, setFollowedHashtags] = useState([]);\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const tags = await fetchFollowedTags();\n        setFollowedHashtags(tags);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, []);\n\n  return (\n    <div id=\"followed-hashtags-page\" class=\"deck-container\" tabIndex=\"-1\">\n      <div class=\"timeline-deck deck\">\n        <header>\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n              <Link to=\"/\" class=\"button plain\">\n                <Icon icon=\"home\" size=\"l\" />\n              </Link>\n            </div>\n            <h1>Followed Hashtags</h1>\n            <div class=\"header-side\" />\n          </div>\n        </header>\n        <main>\n          {followedHashtags.length > 0 ? (\n            <>\n              <ul class=\"link-list\">\n                {followedHashtags.map((tag) => (\n                  <li>\n                    <Link\n                      to={\n                        instance\n                          ? `/${instance}/t/${tag.name}`\n                          : `/t/${tag.name}`\n                      }\n                    >\n                      <Icon icon=\"hashtag\" /> <span>{tag.name}</span>\n                    </Link>\n                  </li>\n                ))}\n              </ul>\n              {followedHashtags.length > 1 && (\n                <footer class=\"ui-state\">\n                  <small class=\"insignificant\">\n                    {followedHashtags.length} hashtag\n                    {followedHashtags.length === 1 ? '' : 's'}\n                  </small>\n                </footer>\n              )}\n            </>\n          ) : uiState === 'loading' ? (\n            <p class=\"ui-state\">\n              <Loader abrupt />\n            </p>\n          ) : uiState === 'error' ? (\n            <p class=\"ui-state\">Unable to load followed hashtags.</p>\n          ) : (\n            <p class=\"ui-state\">No hashtags followed yet.</p>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default FollowedHashtags;\n","import { useEffect, useRef } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { filteredItems } from '../utils/filters';\nimport states from '../utils/states';\nimport { getStatus, saveStatus } from '../utils/states';\nimport supports from '../utils/supports';\nimport {\n  assignFollowedTags,\n  clearFollowedTagsState,\n  dedupeBoosts,\n} from '../utils/timeline-utils';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Following({ title, path, id, ...props }) {\n  useTitle(title || 'Following', path || '/following');\n  const { masto, streaming, instance } = api();\n  const snapStates = useSnapshot(states);\n  const homeIterator = useRef();\n  const latestItem = useRef();\n\n  console.debug('RENDER Following', title, id);\n  const supportsPixelfed = supports('@pixelfed/home-include-reblogs');\n\n  async function fetchHome(firstLoad) {\n    if (firstLoad || !homeIterator.current) {\n      homeIterator.current = masto.v1.timelines.home.list({ limit: LIMIT });\n    }\n    if (supportsPixelfed && homeIterator.current?.nextParams) {\n      if (typeof homeIterator.current.nextParams === 'string') {\n        homeIterator.current.nextParams += '&include_reblogs=true';\n      } else {\n        homeIterator.current.nextParams.include_reblogs = true;\n      }\n    }\n    const results = await homeIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      let latestItemChanged = false;\n      if (firstLoad) {\n        if (value[0].id !== latestItem.current) {\n          latestItemChanged = true;\n        }\n        latestItem.current = value[0].id;\n        console.log('First load', latestItem.current);\n      }\n\n      // value = filteredItems(value, 'home');\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n      value = dedupeBoosts(value, instance);\n      if (firstLoad && latestItemChanged) clearFollowedTagsState();\n      assignFollowedTags(value, instance);\n\n      // ENFORCE sort by datetime (Latest first)\n      value.sort((a, b) => {\n        const aDate = new Date(a.createdAt);\n        const bDate = new Date(b.createdAt);\n        return bDate - aDate;\n      });\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const opts = {\n        limit: 5,\n        since_id: latestItem.current,\n      };\n      if (supports('@pixelfed/home-include-reblogs')) {\n        opts.include_reblogs = true;\n      }\n      const results = await masto.v1.timelines.home.list(opts).next();\n      let { value } = results;\n      console.log('checkForUpdates', latestItem.current, value);\n      const valueContainsLatestItem = value[0]?.id === latestItem.current; // since_id might not be supported\n      if (value?.length && !valueContainsLatestItem) {\n        latestItem.current = value[0].id;\n        value = dedupeBoosts(value, instance);\n        value = filteredItems(value, 'home');\n        if (value.some((item) => !item.reblog)) {\n          return true;\n        }\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  useEffect(() => {\n    let sub;\n    (async () => {\n      if (streaming) {\n        sub = streaming.user.subscribe();\n        console.log('🎏 Streaming user', sub);\n        for await (const entry of sub) {\n          if (!sub) break;\n          if (entry.event === 'status.update') {\n            const status = entry.payload;\n            console.log(`🔄 Status ${status.id} updated`);\n            saveStatus(status, instance);\n          } else if (entry.event === 'delete') {\n            const statusID = entry.payload;\n            console.log(`❌ Status ${statusID} deleted`);\n            // delete states.statuses[statusID];\n            const s = getStatus(statusID, instance);\n            if (s) s._deleted = true;\n          }\n        }\n        console.log('💥 Streaming user loop STOPPED');\n      }\n    })();\n    return () => {\n      sub?.unsubscribe?.();\n      sub = null;\n    };\n  }, [streaming]);\n\n  return (\n    <Timeline\n      title={title || 'Following'}\n      id={id || 'following'}\n      emptyText=\"Nothing to see here.\"\n      errorText=\"Unable to load posts.\"\n      instance={instance}\n      fetchItems={fetchHome}\n      checkForUpdates={checkForUpdates}\n      useItemID\n      boostsCarousel={snapStates.settings.boostsCarousel}\n      {...props}\n      // allowFilters\n      filterContext=\"home\"\n      showFollowedTags\n      showReplyParent\n    />\n  );\n}\n\nexport default Following;\n","import {\n  FocusableItem,\n  MenuDivider,\n  MenuGroup,\n  MenuHeader,\n  MenuItem,\n} from '@szhsin/react-menu';\nimport { useEffect, useMemo, useRef, useState } from 'preact/hooks';\nimport { useNavigate, useParams, useSearchParams } from 'react-router-dom';\n\nimport Icon from '../components/icon';\nimport Menu2 from '../components/menu2';\nimport MenuConfirm from '../components/menu-confirm';\nimport { SHORTCUTS_LIMIT } from '../components/shortcuts-settings';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { filteredItems } from '../utils/filters';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\nimport { saveStatus } from '../utils/states';\nimport { isMediaFirstInstance } from '../utils/store-utils';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\n// Limit is 4 per \"mode\"\n// https://github.com/mastodon/mastodon/issues/15194\n// Hard-coded https://github.com/mastodon/mastodon/blob/19614ba2477f3d12468f5ec251ce1cc5f8c6210c/app/models/tag_feed.rb#L4\nconst TAGS_LIMIT_PER_MODE = 4;\nconst TOTAL_TAGS_LIMIT = TAGS_LIMIT_PER_MODE + 1;\n\nfunction Hashtags({ media: mediaView, columnMode, ...props }) {\n  // const navigate = useNavigate();\n  let { hashtag, ...params } = columnMode ? {} : useParams();\n  if (props.hashtag) hashtag = props.hashtag;\n  let hashtags = hashtag.trim().split(/[\\s+]+/);\n  hashtags.sort();\n  hashtag = hashtags[0];\n  const [searchParams, setSearchParams] = useSearchParams();\n  const media = mediaView || !!searchParams.get('media');\n  const linkParams = media ? '?media=1' : '';\n\n  const { masto, instance, authenticated } = api({\n    instance: props?.instance || params.instance,\n  });\n  const {\n    masto: currentMasto,\n    instance: currentInstance,\n    authenticated: currentAuthenticated,\n  } = api();\n  const hashtagTitle = hashtags.map((t) => `#${t}`).join(' ');\n  const hashtagPostTitle = media ? ` (Media only)` : '';\n  const title = instance\n    ? `${hashtagTitle}${hashtagPostTitle} on ${instance}`\n    : `${hashtagTitle}${hashtagPostTitle}`;\n  useTitle(title, `/:instance?/t/:hashtag`);\n  const latestItem = useRef();\n\n  const mediaFirst = useMemo(() => isMediaFirstInstance(), []);\n\n  // const hashtagsIterator = useRef();\n  const maxID = useRef(undefined);\n  async function fetchHashtags(firstLoad) {\n    // if (firstLoad || !hashtagsIterator.current) {\n    //   hashtagsIterator.current = masto.v1.timelines.tag.$select(hashtag).list({\n    //     limit: LIMIT,\n    //     any: hashtags.slice(1),\n    //   });\n    // }\n    // const results = await hashtagsIterator.current.next();\n\n    // NOTE: Temporary fix for listHashtag not persisting `any` in subsequent calls.\n    const results = await masto.v1.timelines.tag\n      .$select(hashtag)\n      .list({\n        limit: LIMIT,\n        any: hashtags.slice(1),\n        maxId: firstLoad ? undefined : maxID.current,\n        onlyMedia: media ? true : undefined,\n      })\n      .next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n\n      // value = filteredItems(value, 'public');\n      value.forEach((item) => {\n        saveStatus(item, instance, {\n          skipThreading: media || mediaFirst, // If media view, no need to form threads\n        });\n      });\n\n      maxID.current = value[value.length - 1].id;\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines.tag\n        .$select(hashtag)\n        .list({\n          limit: 1,\n          any: hashtags.slice(1),\n          since_id: latestItem.current,\n          onlyMedia: media,\n        })\n        .next();\n      let { value } = results;\n      const valueContainsLatestItem = value[0]?.id === latestItem.current; // since_id might not be supported\n      if (value?.length && !valueContainsLatestItem) {\n        value = filteredItems(value, 'public');\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  const [followUIState, setFollowUIState] = useState('default');\n  const [info, setInfo] = useState();\n  // Get hashtag info\n  useEffect(() => {\n    (async () => {\n      try {\n        const info = await masto.v1.tags.$select(hashtag).fetch();\n        console.log(info);\n        setInfo(info);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [hashtag]);\n\n  const reachLimit = hashtags.length >= TOTAL_TAGS_LIMIT;\n\n  return (\n    <Timeline\n      key={instance + hashtagTitle}\n      title={title}\n      titleComponent={\n        !!instance && (\n          <h1 class=\"header-double-lines\">\n            <b>{hashtagTitle}</b>\n            <div>{instance}</div>\n          </h1>\n        )\n      }\n      id=\"hashtag\"\n      instance={instance}\n      emptyText=\"No one has posted anything with this tag yet.\"\n      errorText=\"Unable to load posts with this tag\"\n      fetchItems={fetchHashtags}\n      checkForUpdates={checkForUpdates}\n      useItemID\n      view={media || mediaFirst ? 'media' : undefined}\n      refresh={media}\n      // allowFilters\n      filterContext=\"public\"\n      headerEnd={\n        <Menu2\n          portal\n          setDownOverflow\n          overflow=\"auto\"\n          // viewScroll=\"close\"\n          position=\"anchor\"\n          menuButton={\n            <button type=\"button\" class=\"plain\">\n              <Icon icon=\"more\" size=\"l\" />\n            </button>\n          }\n        >\n          {!!info && hashtags.length === 1 && (\n            <>\n              <MenuConfirm\n                subMenu\n                confirm={info.following}\n                confirmLabel={`Unfollow #${hashtag}?`}\n                disabled={followUIState === 'loading' || !authenticated}\n                onClick={() => {\n                  setFollowUIState('loading');\n                  if (info.following) {\n                    // const yes = confirm(`Unfollow #${hashtag}?`);\n                    // if (!yes) {\n                    //   setFollowUIState('default');\n                    //   return;\n                    // }\n                    masto.v1.tags\n                      .$select(hashtag)\n                      .unfollow()\n                      .then(() => {\n                        setInfo({ ...info, following: false });\n                        showToast(`Unfollowed #${hashtag}`);\n                      })\n                      .catch((e) => {\n                        alert(e);\n                        console.error(e);\n                      })\n                      .finally(() => {\n                        setFollowUIState('default');\n                      });\n                  } else {\n                    masto.v1.tags\n                      .$select(hashtag)\n                      .follow()\n                      .then(() => {\n                        setInfo({ ...info, following: true });\n                        showToast(`Followed #${hashtag}`);\n                      })\n                      .catch((e) => {\n                        alert(e);\n                        console.error(e);\n                      })\n                      .finally(() => {\n                        setFollowUIState('default');\n                      });\n                  }\n                }}\n              >\n                {info.following ? (\n                  <>\n                    <Icon icon=\"check-circle\" /> <span>Following…</span>\n                  </>\n                ) : (\n                  <>\n                    <Icon icon=\"plus\" /> <span>Follow</span>\n                  </>\n                )}\n              </MenuConfirm>\n              <MenuDivider />\n            </>\n          )}\n          {!mediaFirst && (\n            <>\n              <MenuHeader className=\"plain\">Filters</MenuHeader>\n              <MenuItem\n                type=\"checkbox\"\n                checked={!!media}\n                onClick={() => {\n                  if (media) {\n                    searchParams.delete('media');\n                  } else {\n                    searchParams.set('media', '1');\n                  }\n                  setSearchParams(searchParams);\n                }}\n              >\n                <Icon icon=\"check-circle\" />{' '}\n                <span class=\"menu-grow\">Media only</span>\n              </MenuItem>\n              <MenuDivider />\n            </>\n          )}\n          <FocusableItem className=\"menu-field\" disabled={reachLimit}>\n            {({ ref }) => (\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  const newHashtag = e.target[0].value?.trim?.();\n                  // Use includes but need to be case insensitive\n                  if (\n                    newHashtag &&\n                    !hashtags.some(\n                      (t) => t.toLowerCase() === newHashtag.toLowerCase(),\n                    )\n                  ) {\n                    hashtags.push(newHashtag);\n                    hashtags.sort();\n                    // navigate(\n                    //   instance\n                    //     ? `/${instance}/t/${hashtags.join('+')}`\n                    //     : `/t/${hashtags.join('+')}`,\n                    // );\n                    location.hash = instance\n                      ? `/${instance}/t/${hashtags.join('+')}`\n                      : `/t/${hashtags.join('+')}${linkParams}`;\n                  }\n                }}\n              >\n                <Icon icon=\"hashtag\" />\n                <input\n                  ref={ref}\n                  type=\"text\"\n                  placeholder={\n                    reachLimit ? `Max ${TOTAL_TAGS_LIMIT} tags` : 'Add hashtag'\n                  }\n                  required\n                  autocorrect=\"off\"\n                  autocapitalize=\"off\"\n                  spellCheck={false}\n                  // no spaces, no hashtags\n                  pattern=\"[^#][^\\s#]+[^#]\"\n                  disabled={reachLimit}\n                />\n              </form>\n            )}\n          </FocusableItem>\n          <MenuGroup takeOverflow>\n            {hashtags.map((t, i) => (\n              <MenuItem\n                key={t}\n                disabled={hashtags.length === 1}\n                onClick={(e) => {\n                  hashtags.splice(i, 1);\n                  hashtags.sort();\n                  // navigate(\n                  //   instance\n                  //     ? `/${instance}/t/${hashtags.join('+')}`\n                  //     : `/t/${hashtags.join('+')}`,\n                  // );\n                  location.hash = instance\n                    ? `/${instance}/t/${hashtags.join('+')}${linkParams}`\n                    : `/t/${hashtags.join('+')}${linkParams}`;\n                }}\n              >\n                <Icon icon=\"x\" alt=\"Remove hashtag\" class=\"danger-icon\" />\n                <span>\n                  <span class=\"more-insignificant\">#</span>\n                  {t}\n                </span>\n              </MenuItem>\n            ))}\n          </MenuGroup>\n          <MenuDivider />\n          <MenuItem\n            disabled={!currentAuthenticated}\n            onClick={() => {\n              if (states.shortcuts.length >= SHORTCUTS_LIMIT) {\n                alert(\n                  `Max ${SHORTCUTS_LIMIT} shortcuts reached. Unable to add shortcut.`,\n                );\n                return;\n              }\n              const shortcut = {\n                type: 'hashtag',\n                hashtag: hashtags.join(' '),\n                instance,\n                media: media ? 'on' : undefined,\n              };\n              // Check if already exists\n              const exists = states.shortcuts.some(\n                (s) =>\n                  s.type === shortcut.type &&\n                  s.hashtag\n                    .split(/[\\s+]+/)\n                    .sort()\n                    .join(' ') ===\n                    shortcut.hashtag\n                      .split(/[\\s+]+/)\n                      .sort()\n                      .join(' ') &&\n                  (s.instance ? s.instance === shortcut.instance : true) &&\n                  (s.media ? !!s.media === !!shortcut.media : true),\n              );\n              if (exists) {\n                alert('This shortcut already exists');\n              } else {\n                states.shortcuts.push(shortcut);\n                showToast(`Hashtag shortcut added`);\n              }\n            }}\n          >\n            <Icon icon=\"shortcut\" /> <span>Add to Shorcuts</span>\n          </MenuItem>\n          <MenuItem\n            onClick={() => {\n              let newInstance = prompt(\n                'Enter a new instance e.g. \"mastodon.social\"',\n              );\n              if (!/\\./.test(newInstance)) {\n                if (newInstance) alert('Invalid instance');\n                return;\n              }\n              if (newInstance) {\n                newInstance = newInstance.toLowerCase().trim();\n                // navigate(`/${newInstance}/t/${hashtags.join('+')}`);\n                location.hash = `/${newInstance}/t/${hashtags.join(\n                  '+',\n                )}${linkParams}`;\n              }\n            }}\n          >\n            <Icon icon=\"bus\" /> <span>Go to another instance…</span>\n          </MenuItem>\n          {currentInstance !== instance && (\n            <MenuItem\n              onClick={() => {\n                location.hash = `/${currentInstance}/t/${hashtags.join(\n                  '+',\n                )}${linkParams}`;\n              }}\n            >\n              <Icon icon=\"bus\" />{' '}\n              <small class=\"menu-double-lines\">\n                Go to my instance (<b>{currentInstance}</b>)\n              </small>\n            </MenuItem>\n          )}\n        </Menu2>\n      }\n    />\n  );\n}\n\nexport default Hashtags;\n","import './lists.css';\n\nimport { Menu, MenuDivider, MenuItem } from '@szhsin/react-menu';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { InView } from 'react-intersection-observer';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport AccountBlock from '../components/account-block';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport ListAddEdit from '../components/list-add-edit';\nimport Menu2 from '../components/menu2';\nimport MenuConfirm from '../components/menu-confirm';\nimport MenuLink from '../components/menu-link';\nimport Modal from '../components/modal';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { filteredItems } from '../utils/filters';\nimport { getList, getLists } from '../utils/lists';\nimport states, { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction List(props) {\n  const snapStates = useSnapshot(states);\n  const { masto, instance } = api();\n  const id = props?.id || useParams()?.id;\n  // const navigate = useNavigate();\n  const latestItem = useRef();\n  // const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n\n  const listIterator = useRef();\n  async function fetchList(firstLoad) {\n    if (firstLoad || !listIterator.current) {\n      listIterator.current = masto.v1.timelines.list.$select(id).list({\n        limit: LIMIT,\n      });\n    }\n    const results = await listIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n\n      // value = filteredItems(value, 'home');\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines.list.$select(id).list({\n        limit: 1,\n        since_id: latestItem.current,\n      });\n      let { value } = results;\n      const valueContainsLatestItem = value[0]?.id === latestItem.current; // since_id might not be supported\n      if (value?.length && !valueContainsLatestItem) {\n        value = filteredItems(value, 'home');\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  const [lists, setLists] = useState([]);\n  useEffect(() => {\n    getLists().then(setLists);\n  }, []);\n\n  const [list, setList] = useState({ title: 'List' });\n  // const [title, setTitle] = useState(`List`);\n  useTitle(list.title, `/l/:id`);\n  useEffect(() => {\n    (async () => {\n      try {\n        const list = await getList(id);\n        setList(list);\n        // setTitle(list.title);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [id]);\n\n  const [showListAddEditModal, setShowListAddEditModal] = useState(false);\n  const [showManageMembersModal, setShowManageMembersModal] = useState(false);\n\n  return (\n    <>\n      <Timeline\n        key={id}\n        title={list.title}\n        id=\"list\"\n        emptyText=\"Nothing yet.\"\n        errorText=\"Unable to load posts.\"\n        instance={instance}\n        fetchItems={fetchList}\n        checkForUpdates={checkForUpdates}\n        useItemID\n        boostsCarousel={snapStates.settings.boostsCarousel}\n        // allowFilters\n        filterContext=\"home\"\n        showReplyParent\n        // refresh={reloadCount}\n        headerStart={\n          // <Link to=\"/l\" class=\"button plain\">\n          //   <Icon icon=\"list\" size=\"l\" />\n          // </Link>\n          <Menu2\n            overflow=\"auto\"\n            menuButton={\n              <button type=\"button\" class=\"plain\">\n                <Icon icon=\"list\" size=\"l\" alt=\"Lists\" />\n                <Icon icon=\"chevron-down\" size=\"s\" />\n              </button>\n            }\n          >\n            <MenuLink to=\"/l\">\n              <span>All Lists</span>\n            </MenuLink>\n            {lists?.length > 0 && (\n              <>\n                <MenuDivider />\n                {lists.map((list) => (\n                  <MenuLink key={list.id} to={`/l/${list.id}`}>\n                    <span>{list.title}</span>\n                  </MenuLink>\n                ))}\n              </>\n            )}\n          </Menu2>\n        }\n        headerEnd={\n          <Menu2\n            portal\n            setDownOverflow\n            overflow=\"auto\"\n            viewScroll=\"close\"\n            position=\"anchor\"\n            menuButton={\n              <button type=\"button\" class=\"plain\">\n                <Icon icon=\"more\" size=\"l\" />\n              </button>\n            }\n          >\n            <MenuItem\n              onClick={() =>\n                setShowListAddEditModal({\n                  list,\n                })\n              }\n            >\n              <Icon icon=\"pencil\" size=\"l\" />\n              <span>Edit</span>\n            </MenuItem>\n            <MenuItem onClick={() => setShowManageMembersModal(true)}>\n              <Icon icon=\"group\" size=\"l\" />\n              <span>Manage members</span>\n            </MenuItem>\n          </Menu2>\n        }\n      />\n      {showListAddEditModal && (\n        <Modal\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowListAddEditModal(false);\n            }\n          }}\n        >\n          <ListAddEdit\n            list={showListAddEditModal?.list}\n            onClose={(result) => {\n              if (result.state === 'success' && result.list) {\n                setList(result.list);\n                // reload();\n              } else if (result.state === 'deleted') {\n                // navigate('/l');\n                location.hash = '/l';\n              }\n              setShowListAddEditModal(false);\n            }}\n          />\n        </Modal>\n      )}\n      {showManageMembersModal && (\n        <Modal\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowManageMembersModal(false);\n            }\n          }}\n        >\n          <ListManageMembers\n            listID={id}\n            onClose={() => setShowManageMembersModal(false)}\n          />\n        </Modal>\n      )}\n    </>\n  );\n}\n\nconst MEMBERS_LIMIT = 40;\nfunction ListManageMembers({ listID, onClose }) {\n  // Show list of members with [Remove] button\n  // API only returns 40 members at a time, so this need to be paginated with infinite scroll\n  // Show [Add] button after removing a member\n  const { masto, instance } = api();\n  const [members, setMembers] = useState([]);\n  const [uiState, setUIState] = useState('default');\n  const [showMore, setShowMore] = useState(false);\n\n  const membersIterator = useRef();\n\n  async function fetchMembers(firstLoad) {\n    setShowMore(false);\n    setUIState('loading');\n    (async () => {\n      try {\n        if (firstLoad || !membersIterator.current) {\n          membersIterator.current = masto.v1.lists\n            .$select(listID)\n            .accounts.list({\n              limit: MEMBERS_LIMIT,\n            });\n        }\n        const results = await membersIterator.current.next();\n        let { done, value } = results;\n        if (value?.length) {\n          if (firstLoad) {\n            setMembers(value);\n          } else {\n            setMembers(members.concat(value));\n          }\n          setShowMore(!done);\n        } else {\n          setShowMore(false);\n        }\n        setUIState('default');\n      } catch (e) {\n        setUIState('error');\n      }\n    })();\n  }\n\n  useEffect(() => {\n    fetchMembers(true);\n  }, []);\n\n  return (\n    <div class=\"sheet\" id=\"list-manage-members-container\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>Manage members</h2>\n      </header>\n      <main>\n        <ul>\n          {members.map((member) => (\n            <li key={member.id}>\n              <AccountBlock account={member} instance={instance} />\n              <RemoveAddButton account={member} listID={listID} />\n            </li>\n          ))}\n          {showMore && uiState === 'default' && (\n            <InView as=\"li\" onChange={(inView) => inView && fetchMembers()}>\n              <button type=\"button\" class=\"light block\" onClick={fetchMembers}>\n                Show more&hellip;\n              </button>\n            </InView>\n          )}\n        </ul>\n      </main>\n    </div>\n  );\n}\n\nfunction RemoveAddButton({ account, listID }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [removed, setRemoved] = useState(false);\n\n  return (\n    <MenuConfirm\n      confirm={!removed}\n      confirmLabel={<span>Remove @{account.username} from list?</span>}\n      align=\"end\"\n      menuItemClassName=\"danger\"\n      onClick={() => {\n        if (removed) {\n          setUIState('loading');\n          (async () => {\n            try {\n              await masto.v1.lists.$select(listID).accounts.create({\n                accountIds: [account.id],\n              });\n              setUIState('default');\n              setRemoved(false);\n            } catch (e) {\n              setUIState('error');\n            }\n          })();\n        } else {\n          // const yes = confirm(`Remove ${account.username} from this list?`);\n          // if (!yes) return;\n          setUIState('loading');\n\n          (async () => {\n            try {\n              await masto.v1.lists.$select(listID).accounts.remove({\n                accountIds: [account.id],\n              });\n              setUIState('default');\n              setRemoved(true);\n            } catch (e) {\n              setUIState('error');\n            }\n          })();\n        }\n      }}\n    >\n      <button\n        type=\"button\"\n        class={`light ${removed ? '' : 'danger'}`}\n        disabled={uiState === 'loading'}\n      >\n        {removed ? 'Add' : 'Remove…'}\n      </button>\n    </MenuConfirm>\n  );\n}\n\nexport default List;\n","// This is like very lame \"type-checking\" lol\nconst notificationTypeKeys = {\n  mention: ['account', 'status'],\n  status: ['account', 'status'],\n  reblog: ['account', 'status'],\n  follow: ['account'],\n  follow_request: ['account'],\n  favourite: ['account', 'status'],\n  poll: ['status'],\n  update: ['status'],\n};\nexport function fixNotifications(notifications) {\n  return notifications.filter((notification) => {\n    const { type, id, createdAt } = notification;\n    if (!type) {\n      console.warn('Notification missing type', notification);\n      return false;\n    }\n    if (!id || !createdAt) {\n      console.warn('Notification missing id or createdAt', notification);\n      // Continue processing this despite missing id or createdAt\n    }\n    const keys = notificationTypeKeys[type];\n    if (keys?.length) {\n      return keys.every((key) => !!notification[key]);\n    }\n    return true; // skip other types\n  });\n}\n\nfunction groupNotifications(notifications) {\n  // Filter out invalid notifications\n  notifications = fixNotifications(notifications);\n\n  // Create new flat list of notifications\n  // Combine sibling notifications based on type and status id\n  // Concat all notification.account into an array of _accounts\n  const notificationsMap = {};\n  const cleanNotifications = [];\n  for (let i = 0, j = 0; i < notifications.length; i++) {\n    const notification = notifications[i];\n    const { id, status, account, type, createdAt } = notification;\n    const date = createdAt ? new Date(createdAt).toLocaleDateString() : '';\n    let virtualType = type;\n    if (type === 'favourite' || type === 'reblog') {\n      virtualType = 'favourite+reblog';\n    }\n    const key = `${status?.id}-${virtualType}-${date}`;\n    const mappedNotification = notificationsMap[key];\n    if (virtualType === 'follow_request') {\n      cleanNotifications[j++] = notification;\n    } else if (mappedNotification?.account) {\n      const mappedAccount = mappedNotification._accounts.find(\n        (a) => a.id === account.id,\n      );\n      if (mappedAccount) {\n        mappedAccount._types.push(type);\n        mappedAccount._types.sort().reverse();\n        mappedNotification.id += `-${id}`;\n      } else {\n        account._types = [type];\n        mappedNotification._accounts.push(account);\n        mappedNotification.id += `-${id}`;\n      }\n    } else {\n      if (account) account._types = [type];\n      let n = (notificationsMap[key] = {\n        ...notification,\n        type: virtualType,\n        _accounts: account ? [account] : [],\n      });\n      cleanNotifications[j++] = n;\n    }\n  }\n\n  // 2nd pass to group \"favourite+reblog\"-type notifications by account if _accounts.length <= 1\n  // This means one acount has favourited and reblogged the multiple statuses\n  // The grouped notification\n  // - type: \"favourite+reblog+account\"\n  // - _statuses: [status, status, ...]\n  const notificationsMap2 = {};\n  const cleanNotifications2 = [];\n  for (let i = 0, j = 0; i < cleanNotifications.length; i++) {\n    const notification = cleanNotifications[i];\n    const { id, account, _accounts, type, createdAt } = notification;\n    const date = createdAt ? new Date(createdAt).toLocaleDateString() : '';\n    if (type === 'favourite+reblog' && account && _accounts.length === 1) {\n      const key = `${account?.id}-${type}-${date}`;\n      const mappedNotification = notificationsMap2[key];\n      if (mappedNotification) {\n        mappedNotification._statuses.push(notification.status);\n        mappedNotification.id += `-${id}`;\n      } else {\n        let n = (notificationsMap2[key] = {\n          ...notification,\n          type,\n          _statuses: [notification.status],\n        });\n        cleanNotifications2[j++] = n;\n      }\n    } else {\n      cleanNotifications2[j++] = notification;\n    }\n  }\n\n  console.log({ notifications, cleanNotifications, cleanNotifications2 });\n\n  // return cleanNotifications;\n  return cleanNotifications2;\n}\n\nexport default groupNotifications;\n","import { useMemo, useRef, useState } from 'preact/hooks';\nimport { useSearchParams } from 'react-router-dom';\n\nimport Link from '../components/link';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { fixNotifications } from '../utils/group-notifications';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\nconst emptySearchParams = new URLSearchParams();\n\nfunction Mentions({ columnMode, ...props }) {\n  const { masto, instance } = api();\n  const [searchParams] = columnMode ? [emptySearchParams] : useSearchParams();\n  const [stateType, setStateType] = useState(null);\n  const type = props?.type || searchParams.get('type') || stateType;\n  useTitle(`Mentions${type === 'private' ? ' (Private)' : ''}`, '/mentions');\n\n  const mentionsIterator = useRef();\n  const latestItem = useRef();\n\n  async function fetchMentions(firstLoad) {\n    if (firstLoad || !mentionsIterator.current) {\n      mentionsIterator.current = masto.v1.notifications.list({\n        limit: LIMIT,\n        types: ['mention'],\n      });\n    }\n    const results = await mentionsIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      value = fixNotifications(value);\n\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n        console.log('First load', latestItem.current);\n      }\n\n      value.forEach(({ status: item }) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      ...results,\n      value: value?.map((item) => item.status),\n    };\n  }\n\n  const conversationsIterator = useRef();\n  const latestConversationItem = useRef();\n  async function fetchConversations(firstLoad) {\n    if (firstLoad || !conversationsIterator.current) {\n      conversationsIterator.current = masto.v1.conversations.list({\n        limit: LIMIT,\n      });\n    }\n    const results = await conversationsIterator.current.next();\n    let { value } = results;\n    value = value?.filter((item) => item.lastStatus);\n    if (value?.length) {\n      if (firstLoad) {\n        latestConversationItem.current = value[0].lastStatus.id;\n        console.log('First load', latestConversationItem.current);\n      }\n\n      value.forEach(({ lastStatus: item }) => {\n        saveStatus(item, instance);\n      });\n    }\n    console.log('results', results);\n    return {\n      ...results,\n      value: value?.map((item) => item.lastStatus),\n    };\n  }\n\n  function fetchItems(...args) {\n    if (type === 'private') {\n      return fetchConversations(...args);\n    }\n    return fetchMentions(...args);\n  }\n\n  async function checkForUpdates() {\n    if (type === 'private') {\n      try {\n        const results = await masto.v1.conversations\n          .list({\n            limit: 1,\n            since_id: latestConversationItem.current,\n          })\n          .next();\n        let { value } = results;\n        console.log(\n          'checkForUpdates PRIVATE',\n          latestConversationItem.current,\n          value,\n        );\n        const valueContainsLatestItem =\n          value[0]?.id === latestConversationItem.current; // since_id might not be supported\n        if (value?.length && !valueContainsLatestItem) {\n          latestConversationItem.current = value[0].lastStatus.id;\n          return true;\n        }\n        return false;\n      } catch (e) {\n        return false;\n      }\n    } else {\n      try {\n        const results = await masto.v1.notifications\n          .list({\n            limit: 1,\n            types: ['mention'],\n            since_id: latestItem.current,\n          })\n          .next();\n        let { value } = results;\n        console.log('checkForUpdates ALL', latestItem.current, value);\n        if (value?.length) {\n          latestItem.current = value[0].id;\n          return true;\n        }\n        return false;\n      } catch (e) {\n        return false;\n      }\n    }\n  }\n\n  const TimelineStart = useMemo(() => {\n    return (\n      <div class=\"filter-bar centered\">\n        <Link\n          to=\"/mentions\"\n          class={!type ? 'is-active' : ''}\n          onClick={(e) => {\n            if (columnMode) {\n              e.preventDefault();\n              setStateType(null);\n            }\n          }}\n        >\n          All\n        </Link>\n        <Link\n          to=\"/mentions?type=private\"\n          class={type === 'private' ? 'is-active' : ''}\n          onClick={(e) => {\n            if (columnMode) {\n              e.preventDefault();\n              setStateType('private');\n            }\n          }}\n        >\n          Private\n        </Link>\n      </div>\n    );\n  }, [type]);\n\n  return (\n    <Timeline\n      title=\"Mentions\"\n      id=\"mentions\"\n      emptyText=\"No one mentioned you :(\"\n      errorText=\"Unable to load mentions.\"\n      instance={instance}\n      fetchItems={fetchItems}\n      checkForUpdates={checkForUpdates}\n      useItemID\n      timelineStart={TimelineStart}\n      refresh={type}\n    />\n  );\n}\n\nexport default Mentions;\n","import './notifications.css';\n\nimport { Fragment } from 'preact';\nimport { memo } from 'preact/compat';\nimport { useCallback, useEffect, useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { InView } from 'react-intersection-observer';\nimport { useSearchParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\nimport { subscribeKey } from 'valtio/utils';\n\nimport AccountBlock from '../components/account-block';\nimport FollowRequestButtons from '../components/follow-request-buttons';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport Modal from '../components/modal';\nimport NavMenu from '../components/nav-menu';\nimport Notification from '../components/notification';\nimport Status from '../components/status';\nimport { api } from '../utils/api';\nimport enhanceContent from '../utils/enhance-content';\nimport groupNotifications from '../utils/group-notifications';\nimport handleContentLinks from '../utils/handle-content-links';\nimport niceDateTime from '../utils/nice-date-time';\nimport { getRegistration } from '../utils/push-notifications';\nimport shortenNumber from '../utils/shorten-number';\nimport showToast from '../utils/show-toast';\nimport states, { saveStatus } from '../utils/states';\nimport { getCurrentInstance } from '../utils/store-utils';\nimport supports from '../utils/supports';\nimport usePageVisibility from '../utils/usePageVisibility';\nimport useScroll from '../utils/useScroll';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 80;\nconst emptySearchParams = new URLSearchParams();\n\nconst scrollIntoViewOptions = {\n  block: 'center',\n  inline: 'center',\n  behavior: 'smooth',\n};\n\nfunction Notifications({ columnMode }) {\n  useTitle('Notifications', '/notifications');\n  const { masto, instance } = api();\n  const snapStates = useSnapshot(states);\n  const [uiState, setUIState] = useState('default');\n  const [searchParams] = columnMode ? [emptySearchParams] : useSearchParams();\n  const notificationID = searchParams.get('id');\n  const notificationAccessToken = searchParams.get('access_token');\n  const [showMore, setShowMore] = useState(false);\n  const [onlyMentions, setOnlyMentions] = useState(false);\n  const scrollableRef = useRef();\n  const { nearReachEnd, scrollDirection, reachStart, nearReachStart } =\n    useScroll({\n      scrollableRef,\n    });\n  const hiddenUI = scrollDirection === 'end' && !nearReachStart;\n  const [followRequests, setFollowRequests] = useState([]);\n  const [announcements, setAnnouncements] = useState([]);\n\n  console.debug('RENDER Notifications');\n\n  const notificationsIterator = useRef();\n  async function fetchNotifications(firstLoad) {\n    if (firstLoad || !notificationsIterator.current) {\n      // Reset iterator\n      notificationsIterator.current = masto.v1.notifications.list({\n        limit: LIMIT,\n        excludeTypes: ['follow_request'],\n      });\n    }\n    if (/max_id=($|&)/i.test(notificationsIterator.current?.nextParams)) {\n      // Pixelfed returns next paginationed link with empty max_id\n      // I assume, it's done (end of list)\n      return {\n        done: true,\n      };\n    }\n    const allNotifications = await notificationsIterator.current.next();\n    const notifications = allNotifications.value;\n\n    if (notifications?.length) {\n      notifications.forEach((notification) => {\n        saveStatus(notification.status, instance, {\n          skipThreading: true,\n        });\n      });\n\n      // TEST: Slot in a fake notification to test 'severed_relationships'\n      // notifications.unshift({\n      //   id: '123123',\n      //   type: 'severed_relationships',\n      //   createdAt: '2024-03-22T19:20:08.316Z',\n      //   event: {\n      //     type: 'account_suspension',\n      //     targetName: 'mastodon.dev',\n      //     followersCount: 0,\n      //     followingCount: 0,\n      //   },\n      // });\n\n      // TEST: Slot in a fake notification to test 'moderation_warning'\n      // notifications.unshift({\n      //   id: '123123',\n      //   type: 'moderation_warning',\n      //   createdAt: new Date().toISOString(),\n      //   moderation_warning: {\n      //     id: '1231234',\n      //     action: 'mark_statuses_as_sensitive',\n      //   },\n      // });\n\n      // console.log({ notifications });\n\n      const groupedNotifications = groupNotifications(notifications);\n\n      if (firstLoad) {\n        states.notificationsLast = notifications[0];\n        states.notifications = groupedNotifications;\n\n        // Update last read marker\n        masto.v1.markers\n          .create({\n            notifications: {\n              lastReadId: notifications[0].id,\n            },\n          })\n          .catch(() => {});\n      } else {\n        states.notifications.push(...groupedNotifications);\n      }\n    }\n\n    states.notificationsShowNew = false;\n    states.notificationsLastFetchTime = Date.now();\n    return allNotifications;\n  }\n\n  async function fetchFollowRequests() {\n    // Note: no pagination here yet because this better be on a separate page. Should be rare use-case???\n    try {\n      return await masto.v1.followRequests.list({\n        limit: 80,\n      });\n    } catch (e) {\n      // Silently fail\n      return [];\n    }\n  }\n\n  const loadFollowRequests = () => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const requests = await fetchFollowRequests();\n        setFollowRequests(requests);\n        setUIState('default');\n      } catch (e) {\n        setUIState('error');\n      }\n    })();\n  };\n\n  async function fetchAnnouncements() {\n    try {\n      return await masto.v1.announcements.list();\n    } catch (e) {\n      // Silently fail\n      return [];\n    }\n  }\n\n  const supportsFilteredNotifications = supports(\n    '@mastodon/filtered-notifications',\n  );\n  const [showNotificationsSettings, setShowNotificationsSettings] =\n    useState(false);\n  const [notificationsPolicy, setNotificationsPolicy] = useState({});\n  function fetchNotificationsPolicy() {\n    return masto.v1.notifications.policy.fetch().catch(() => {});\n  }\n  function loadNotificationsPolicy() {\n    fetchNotificationsPolicy()\n      .then((policy) => {\n        console.log('✨ Notifications policy', policy);\n        setNotificationsPolicy(policy);\n      })\n      .catch(() => {});\n  }\n  const [notificationsRequests, setNotificationsRequests] = useState(null);\n  function fetchNotificationsRequest() {\n    return masto.v1.notifications.requests.list();\n  }\n\n  const loadNotifications = (firstLoad) => {\n    setShowNew(false);\n    setUIState('loading');\n    (async () => {\n      try {\n        const fetchNotificationsPromise = fetchNotifications(firstLoad);\n\n        if (firstLoad) {\n          fetchAnnouncements()\n            .then((announcements) => {\n              announcements.sort((a, b) => {\n                // Sort by updatedAt first, then createdAt\n                const aDate = new Date(a.updatedAt || a.createdAt);\n                const bDate = new Date(b.updatedAt || b.createdAt);\n                return bDate - aDate;\n              });\n              setAnnouncements(announcements);\n            })\n            .catch(() => {});\n\n          fetchFollowRequests()\n            .then((requests) => {\n              setFollowRequests(requests);\n            })\n            .catch(() => {});\n\n          if (supportsFilteredNotifications) {\n            loadNotificationsPolicy();\n          }\n        }\n\n        const { done } = await fetchNotificationsPromise;\n        setShowMore(!done);\n\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  };\n\n  useEffect(() => {\n    loadNotifications(true);\n  }, []);\n  useEffect(() => {\n    if (reachStart) {\n      loadNotifications(true);\n    }\n  }, [reachStart]);\n\n  // useEffect(() => {\n  //   if (nearReachEnd && showMore) {\n  //     loadNotifications();\n  //   }\n  // }, [nearReachEnd, showMore]);\n\n  const [showNew, setShowNew] = useState(false);\n\n  const loadUpdates = useCallback(\n    ({ disableIdleCheck = false } = {}) => {\n      if (uiState === 'loading') {\n        return;\n      }\n      console.log('✨ Load updates', {\n        autoRefresh: snapStates.settings.autoRefresh,\n        scrollTop: scrollableRef.current?.scrollTop,\n        inBackground: inBackground(),\n        disableIdleCheck,\n      });\n      if (\n        snapStates.settings.autoRefresh &&\n        scrollableRef.current?.scrollTop < 16 &&\n        (disableIdleCheck || window.__IDLE__) &&\n        !inBackground()\n      ) {\n        loadNotifications(true);\n      }\n    },\n    [snapStates.notificationsShowNew, snapStates.settings.autoRefresh, uiState],\n  );\n  // useEffect(loadUpdates, [snapStates.notificationsShowNew]);\n\n  const lastHiddenTime = useRef();\n  usePageVisibility((visible) => {\n    if (visible) {\n      const timeDiff = Date.now() - lastHiddenTime.current;\n      if (!lastHiddenTime.current || timeDiff > 1000 * 3) {\n        // 3 seconds\n        loadUpdates({\n          disableIdleCheck: true,\n        });\n      } else {\n        lastHiddenTime.current = Date.now();\n      }\n    }\n  });\n  const firstLoad = useRef(true);\n  useEffect(() => {\n    let unsub = subscribeKey(states, 'notificationsShowNew', (v) => {\n      if (firstLoad.current) {\n        firstLoad.current = false;\n        return;\n      }\n      if (uiState === 'loading') return;\n      if (v) loadUpdates();\n      setShowNew(v);\n    });\n    return () => unsub?.();\n  }, []);\n\n  const todayDate = new Date();\n  const yesterdayDate = new Date(todayDate - 24 * 60 * 60 * 1000);\n  let currentDay = new Date();\n  const showTodayEmpty = !snapStates.notifications.some(\n    (notification) =>\n      new Date(notification.createdAt).toDateString() ===\n      todayDate.toDateString(),\n  );\n\n  const announcementsListRef = useRef();\n\n  useEffect(() => {\n    if (notificationID) {\n      states.routeNotification = {\n        id: notificationID,\n        accessToken: atob(notificationAccessToken),\n      };\n    }\n  }, [notificationID, notificationAccessToken]);\n\n  // useEffect(() => {\n  //   if (uiState === 'default') {\n  //     (async () => {\n  //       try {\n  //         const registration = await getRegistration();\n  //         if (registration?.getNotifications) {\n  //           const notifications = await registration.getNotifications();\n  //           console.log('🔔 Push notifications', notifications);\n  //           // Close all notifications?\n  //           // notifications.forEach((notification) => {\n  //           //   notification.close();\n  //           // });\n  //         }\n  //       } catch (e) {}\n  //     })();\n  //   }\n  // }, [uiState]);\n\n  const itemsSelector = '.notification';\n  const jRef = useHotkeys('j', () => {\n    const activeItem = document.activeElement.closest(itemsSelector);\n    const activeItemRect = activeItem?.getBoundingClientRect();\n    const allItems = Array.from(\n      scrollableRef.current.querySelectorAll(itemsSelector),\n    );\n    if (\n      activeItem &&\n      activeItemRect.top < scrollableRef.current.clientHeight &&\n      activeItemRect.bottom > 0\n    ) {\n      const activeItemIndex = allItems.indexOf(activeItem);\n      let nextItem = allItems[activeItemIndex + 1];\n      if (nextItem) {\n        nextItem.focus();\n        nextItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    } else {\n      const topmostItem = allItems.find((item) => {\n        const itemRect = item.getBoundingClientRect();\n        return itemRect.top >= 44 && itemRect.left >= 0;\n      });\n      if (topmostItem) {\n        topmostItem.focus();\n        topmostItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    }\n  });\n\n  const kRef = useHotkeys('k', () => {\n    // focus on previous status after active item\n    const activeItem = document.activeElement.closest(itemsSelector);\n    const activeItemRect = activeItem?.getBoundingClientRect();\n    const allItems = Array.from(\n      scrollableRef.current.querySelectorAll(itemsSelector),\n    );\n    if (\n      activeItem &&\n      activeItemRect.top < scrollableRef.current.clientHeight &&\n      activeItemRect.bottom > 0\n    ) {\n      const activeItemIndex = allItems.indexOf(activeItem);\n      let prevItem = allItems[activeItemIndex - 1];\n      if (prevItem) {\n        prevItem.focus();\n        prevItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    } else {\n      const topmostItem = allItems.find((item) => {\n        const itemRect = item.getBoundingClientRect();\n        return itemRect.top >= 44 && itemRect.left >= 0;\n      });\n      if (topmostItem) {\n        topmostItem.focus();\n        topmostItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    }\n  });\n\n  const oRef = useHotkeys(['enter', 'o'], () => {\n    const activeItem = document.activeElement.closest(itemsSelector);\n    const statusLink = activeItem?.querySelector('.status-link');\n    if (statusLink) {\n      statusLink.click();\n    }\n  });\n\n  return (\n    <div\n      id=\"notifications-page\"\n      class=\"deck-container\"\n      ref={(node) => {\n        scrollableRef.current = node;\n        jRef.current = node;\n        kRef.current = node;\n        oRef.current = node;\n      }}\n      tabIndex=\"-1\"\n    >\n      <div class={`timeline-deck deck ${onlyMentions ? 'only-mentions' : ''}`}>\n        <header\n          hidden={hiddenUI}\n          onClick={(e) => {\n            if (!e.target.closest('a, button')) {\n              scrollableRef.current?.scrollTo({ top: 0, behavior: 'smooth' });\n            }\n          }}\n          onDblClick={(e) => {\n            if (!e.target.closest('a, button')) {\n              loadNotifications(true);\n            }\n          }}\n          class={uiState === 'loading' ? 'loading' : ''}\n        >\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n              <Link to=\"/\" class=\"button plain\">\n                <Icon icon=\"home\" size=\"l\" alt=\"Home\" />\n              </Link>\n            </div>\n            <h1>Notifications</h1>\n            <div class=\"header-side\">\n              {supportsFilteredNotifications && (\n                <button\n                  type=\"button\"\n                  class=\"button plain4\"\n                  onClick={() => {\n                    setShowNotificationsSettings(true);\n                  }}\n                >\n                  <Icon icon=\"settings\" size=\"l\" alt=\"Notifications settings\" />\n                </button>\n              )}\n            </div>\n          </div>\n          {showNew && uiState !== 'loading' && (\n            <button\n              class=\"updates-button shiny-pill\"\n              type=\"button\"\n              onClick={() => {\n                loadNotifications(true);\n                scrollableRef.current?.scrollTo({\n                  top: 0,\n                  behavior: 'smooth',\n                });\n              }}\n            >\n              <Icon icon=\"arrow-up\" /> New notifications\n            </button>\n          )}\n        </header>\n        {announcements.length > 0 && (\n          <div class=\"shazam-container\">\n            <div class=\"shazam-container-inner\">\n              <details class=\"announcements\">\n                <summary>\n                  <span>\n                    <Icon icon=\"announce\" class=\"announcement-icon\" size=\"l\" />{' '}\n                    <b>Announcement{announcements.length > 1 ? 's' : ''}</b>{' '}\n                    <small class=\"insignificant\">{instance}</small>\n                  </span>\n                  {announcements.length > 1 && (\n                    <span class=\"announcements-nav-buttons\">\n                      {announcements.map((announcement, index) => (\n                        <button\n                          type=\"button\"\n                          class=\"plain2 small\"\n                          onClick={() => {\n                            announcementsListRef.current?.children[\n                              index\n                            ].scrollIntoView({\n                              behavior: 'smooth',\n                              block: 'nearest',\n                            });\n                          }}\n                        >\n                          {index + 1}\n                        </button>\n                      ))}\n                    </span>\n                  )}\n                </summary>\n                <ul\n                  class={`announcements-list-${\n                    announcements.length > 1 ? 'multiple' : 'single'\n                  }`}\n                  ref={announcementsListRef}\n                >\n                  {announcements.map((announcement) => (\n                    <li>\n                      <AnnouncementBlock announcement={announcement} />\n                    </li>\n                  ))}\n                </ul>\n              </details>\n            </div>\n          </div>\n        )}\n        {followRequests.length > 0 && (\n          <div class=\"follow-requests\">\n            <h2 class=\"timeline-header\">Follow requests</h2>\n            {followRequests.length > 5 ? (\n              <details>\n                <summary>{followRequests.length} follow requests</summary>\n                <ul>\n                  {followRequests.map((account) => (\n                    <li key={account.id}>\n                      <AccountBlock account={account} />\n                      <FollowRequestButtons\n                        accountID={account.id}\n                        onChange={() => {\n                          // loadFollowRequests();\n                          // loadNotifications(true);\n                        }}\n                      />\n                    </li>\n                  ))}\n                </ul>\n              </details>\n            ) : (\n              <ul>\n                {followRequests.map((account) => (\n                  <li key={account.id}>\n                    <AccountBlock account={account} />\n                    <FollowRequestButtons\n                      accountID={account.id}\n                      onChange={() => {\n                        // loadFollowRequests();\n                        // loadNotifications(true);\n                      }}\n                    />\n                  </li>\n                ))}\n              </ul>\n            )}\n          </div>\n        )}\n        {supportsFilteredNotifications &&\n          notificationsPolicy?.summary?.pendingRequestsCount > 0 && (\n            <div class=\"shazam-container\">\n              <div class=\"shazam-container-inner\">\n                <div class=\"filtered-notifications\">\n                  <details\n                    onToggle={async (e) => {\n                      const { open } = e.target;\n                      if (open) {\n                        const requests = await fetchNotificationsRequest();\n                        setNotificationsRequests(requests);\n                        console.log({ open, requests });\n                      }\n                    }}\n                  >\n                    <summary>\n                      Filtered notifications from{' '}\n                      {notificationsPolicy.summary.pendingRequestsCount} people\n                    </summary>\n                    {!notificationsRequests ? (\n                      <p class=\"ui-state\">\n                        <Loader abrupt />\n                      </p>\n                    ) : (\n                      notificationsRequests?.length > 0 && (\n                        <ul>\n                          {notificationsRequests.map((request) => (\n                            <li key={request.id}>\n                              <div class=\"request-notifcations\">\n                                {!request.lastStatus?.id && (\n                                  <AccountBlock\n                                    useAvatarStatic\n                                    showStats\n                                    account={request.account}\n                                  />\n                                )}\n                                {request.lastStatus?.id && (\n                                  <div class=\"last-post\">\n                                    <Link\n                                      class=\"status-link\"\n                                      to={`/${instance}/s/${request.lastStatus.id}`}\n                                    >\n                                      <Status\n                                        status={request.lastStatus}\n                                        size=\"s\"\n                                        readOnly\n                                      />\n                                    </Link>\n                                  </div>\n                                )}\n                                <NotificationRequestModalButton\n                                  request={request}\n                                />\n                              </div>\n                              <NotificationRequestButtons\n                                request={request}\n                                onChange={() => {\n                                  loadNotifications(true);\n                                }}\n                              />\n                            </li>\n                          ))}\n                        </ul>\n                      )\n                    )}\n                  </details>\n                </div>\n              </div>\n            </div>\n          )}\n        <div id=\"mentions-option\">\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={onlyMentions}\n              onChange={(e) => {\n                setOnlyMentions(e.target.checked);\n              }}\n            />{' '}\n            Only mentions\n          </label>\n        </div>\n        <h2 class=\"timeline-header\">Today</h2>\n        {showTodayEmpty && (\n          <p class=\"ui-state insignificant\">\n            {uiState === 'default' ? \"You're all caught up.\" : <>&hellip;</>}\n          </p>\n        )}\n        {snapStates.notifications.length ? (\n          <>\n            {snapStates.notifications\n              // This is leaked from Notifications popover\n              .filter((n) => n.type !== 'follow_request')\n              .map((notification) => {\n                if (onlyMentions && notification.type !== 'mention') {\n                  return null;\n                }\n                const notificationDay = new Date(notification.createdAt);\n                const differentDay =\n                  notificationDay.toDateString() !== currentDay.toDateString();\n                if (differentDay) {\n                  currentDay = notificationDay;\n                }\n                // if notificationDay is yesterday, show \"Yesterday\"\n                // if notificationDay is before yesterday, show date\n                const heading =\n                  notificationDay.toDateString() ===\n                  yesterdayDate.toDateString()\n                    ? 'Yesterday'\n                    : niceDateTime(currentDay, {\n                        hideTime: true,\n                      });\n                return (\n                  <Fragment key={notification.id}>\n                    {differentDay && <h2 class=\"timeline-header\">{heading}</h2>}\n                    <Notification\n                      instance={instance}\n                      notification={notification}\n                      key={notification.id}\n                    />\n                  </Fragment>\n                );\n              })}\n          </>\n        ) : (\n          <>\n            {uiState === 'loading' && (\n              <>\n                <ul class=\"timeline flat\">\n                  {Array.from({ length: 5 }).map((_, i) => (\n                    <li class=\"notification skeleton\">\n                      <div class=\"notification-type\">\n                        <Icon icon=\"notification\" size=\"xl\" />\n                      </div>\n                      <div class=\"notification-content\">\n                        <p>███████████ ████</p>\n                      </div>\n                    </li>\n                  ))}\n                </ul>\n              </>\n            )}\n            {uiState === 'error' && (\n              <p class=\"ui-state\">\n                Unable to load notifications\n                <br />\n                <br />\n                <button type=\"button\" onClick={() => loadNotifications(true)}>\n                  Try again\n                </button>\n              </p>\n            )}\n          </>\n        )}\n        {showMore && (\n          <InView\n            onChange={(inView) => {\n              if (inView) {\n                loadNotifications();\n              }\n            }}\n          >\n            <button\n              type=\"button\"\n              class=\"plain block\"\n              disabled={uiState === 'loading'}\n              onClick={() => loadNotifications()}\n              style={{ marginBlockEnd: '6em' }}\n            >\n              {uiState === 'loading' ? (\n                <Loader abrupt />\n              ) : (\n                <>Show more&hellip;</>\n              )}\n            </button>\n          </InView>\n        )}\n      </div>\n      {supportsFilteredNotifications && showNotificationsSettings && (\n        <Modal\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowNotificationsSettings(false);\n            }\n          }}\n        >\n          <div class=\"sheet\" id=\"notifications-settings\" tabIndex=\"-1\">\n            <button\n              type=\"button\"\n              class=\"sheet-close\"\n              onClick={() => setShowNotificationsSettings(false)}\n            >\n              <Icon icon=\"x\" />\n            </button>\n            <header>\n              <h2>Notifications settings</h2>\n            </header>\n            <main>\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  const {\n                    filterNotFollowing,\n                    filterNotFollowers,\n                    filterNewAccounts,\n                    filterPrivateMentions,\n                  } = e.target;\n                  const allFilters = {\n                    filterNotFollowing: filterNotFollowing.checked,\n                    filterNotFollowers: filterNotFollowers.checked,\n                    filterNewAccounts: filterNewAccounts.checked,\n                    filterPrivateMentions: filterPrivateMentions.checked,\n                  };\n                  setNotificationsPolicy({\n                    ...notificationsPolicy,\n                    ...allFilters,\n                  });\n                  setShowNotificationsSettings(false);\n                  (async () => {\n                    try {\n                      await masto.v1.notifications.policy.update(allFilters);\n                      showToast('Notifications settings updated');\n                    } catch (e) {\n                      console.error(e);\n                    }\n                  })();\n                }}\n              >\n                <p>Filter out notifications from people:</p>\n                <p>\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      switch\n                      defaultChecked={notificationsPolicy.filterNotFollowing}\n                      name=\"filterNotFollowing\"\n                    />{' '}\n                    You don't follow\n                  </label>\n                </p>\n                <p>\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      switch\n                      defaultChecked={notificationsPolicy.filterNotFollowers}\n                      name=\"filterNotFollowers\"\n                    />{' '}\n                    Who don't follow you\n                  </label>\n                </p>\n                <p>\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      switch\n                      defaultChecked={notificationsPolicy.filterNewAccounts}\n                      name=\"filterNewAccounts\"\n                    />{' '}\n                    With a new account\n                  </label>\n                </p>\n                <p>\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      switch\n                      defaultChecked={notificationsPolicy.filterPrivateMentions}\n                      name=\"filterPrivateMentions\"\n                    />{' '}\n                    Who unsolicitedly private mention you\n                  </label>\n                </p>\n                <p>\n                  <button type=\"submit\">Save</button>\n                </p>\n              </form>\n            </main>\n          </div>\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nfunction inBackground() {\n  return !!document.querySelector('.deck-backdrop, #modal-container > *');\n}\n\nfunction AnnouncementBlock({ announcement }) {\n  const { instance } = api();\n  const { contact } = getCurrentInstance();\n  const contactAccount = contact?.account;\n  const {\n    id,\n    content,\n    startsAt,\n    endsAt,\n    published,\n    allDay,\n    publishedAt,\n    updatedAt,\n    read,\n    mentions,\n    statuses,\n    tags,\n    emojis,\n    reactions,\n  } = announcement;\n\n  const publishedAtDate = new Date(publishedAt);\n  const publishedDateText = niceDateTime(publishedAtDate);\n  const updatedAtDate = new Date(updatedAt);\n  const updatedAtText = niceDateTime(updatedAtDate);\n\n  return (\n    <div class=\"announcement-block\">\n      <AccountBlock account={contactAccount} />\n      <div\n        class=\"announcement-content\"\n        onClick={handleContentLinks({ mentions, instance })}\n        dangerouslySetInnerHTML={{\n          __html: enhanceContent(content, {\n            emojis,\n          }),\n        }}\n      />\n      <p class=\"insignificant\">\n        <time datetime={publishedAtDate.toISOString()}>\n          {niceDateTime(publishedAtDate)}\n        </time>\n        {updatedAt && updatedAtText !== publishedDateText && (\n          <>\n            {' '}\n            &bull;{' '}\n            <span class=\"ib\">\n              Updated{' '}\n              <time datetime={updatedAtDate.toISOString()}>\n                {niceDateTime(updatedAtDate)}\n              </time>\n            </span>\n          </>\n        )}\n      </p>\n      <div class=\"announcement-reactions\" hidden>\n        {reactions.map((reaction) => {\n          const { name, count, me, staticUrl, url } = reaction;\n          return (\n            <button type=\"button\" class={`plain4 small ${me ? 'reacted' : ''}`}>\n              {url || staticUrl ? (\n                <img src={url || staticUrl} alt={name} width=\"16\" height=\"16\" />\n              ) : (\n                <span>{name}</span>\n              )}{' '}\n              <span class=\"count\">{shortenNumber(count)}</span>\n            </button>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nfunction fetchNotficationsByAccount(accountID) {\n  const { masto } = api();\n  return masto.v1.notifications.list({\n    accountID,\n  });\n}\nfunction NotificationRequestModalButton({ request }) {\n  const { instance } = api();\n  const [uiState, setUIState] = useState('loading');\n  const { account, lastStatus } = request;\n  const [showModal, setShowModal] = useState(false);\n  const [notifications, setNotifications] = useState([]);\n\n  function onClose() {\n    setShowModal(false);\n  }\n\n  useEffect(() => {\n    if (!request?.account?.id) return;\n    if (!showModal) return;\n    setUIState('loading');\n    (async () => {\n      const notifs = await fetchNotficationsByAccount(request.account.id);\n      setNotifications(notifs || []);\n      setUIState('default');\n    })();\n  }, [showModal, request?.account?.id]);\n\n  return (\n    <>\n      <button\n        type=\"button\"\n        class=\"plain4 request-notifications-account\"\n        onClick={() => {\n          setShowModal(true);\n        }}\n      >\n        <Icon icon=\"notification\" class=\"more-insignificant\" />{' '}\n        <small>View notifications from @{account.username}</small>{' '}\n        <Icon icon=\"chevron-down\" />\n      </button>\n      {showModal && (\n        <Modal\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              onClose();\n            }\n          }}\n        >\n          <div class=\"sheet\" tabIndex=\"-1\">\n            <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n              <Icon icon=\"x\" />\n            </button>\n            <header>\n              <b>Notifications from @{account.username}</b>\n            </header>\n            <main>\n              {uiState === 'loading' ? (\n                <p class=\"ui-state\">\n                  <Loader abrupt />\n                </p>\n              ) : (\n                notifications.map((notification) => (\n                  <div\n                    class=\"notification-peek\"\n                    onClick={(e) => {\n                      const { target } = e;\n                      // If button or links\n                      if (\n                        e.target.tagName === 'BUTTON' ||\n                        e.target.tagName === 'A'\n                      ) {\n                        onClose();\n                      }\n                    }}\n                  >\n                    <Notification\n                      instance={instance}\n                      notification={notification}\n                      isStatic\n                    />\n                  </div>\n                ))\n              )}\n            </main>\n          </div>\n        </Modal>\n      )}\n    </>\n  );\n}\n\nfunction NotificationRequestButtons({ request, onChange }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [requestState, setRequestState] = useState(null); // accept, dismiss\n  const hasRequestState = requestState !== null;\n\n  return (\n    <p class=\"notification-request-buttons\">\n      <button\n        type=\"button\"\n        disabled={uiState === 'loading' || hasRequestState}\n        onClick={() => {\n          setUIState('loading');\n          (async () => {\n            try {\n              await masto.v1.notifications.requests\n                .$select(request.id)\n                .accept();\n              setRequestState('accept');\n              setUIState('default');\n              onChange({\n                request,\n                state: 'accept',\n              });\n              showToast(\n                `Notifications from @${request.account.username} will not be filtered from now on.`,\n              );\n            } catch (error) {\n              setUIState('error');\n              console.error(error);\n              showToast(`Unable to accept notification request`);\n            }\n          })();\n        }}\n      >\n        Allow\n      </button>{' '}\n      <button\n        type=\"button\"\n        disabled={uiState === 'loading' || hasRequestState}\n        class=\"light danger\"\n        onClick={() => {\n          setUIState('loading');\n          (async () => {\n            try {\n              await masto.v1.notifications.requests\n                .$select(request.id)\n                .dismiss();\n              setRequestState('dismiss');\n              setUIState('default');\n              onChange({\n                request,\n                state: 'dismiss',\n              });\n              showToast(\n                `Notifications from @${request.account.username} will not show up in Filtered notifications from now on.`,\n              );\n            } catch (error) {\n              setUIState('error');\n              console.error(error);\n              showToast(`Unable to dismiss notification request`);\n            }\n          })();\n        }}\n      >\n        Dismiss\n      </button>\n      <span class=\"notification-request-states\">\n        {uiState === 'loading' ? (\n          <Loader abrupt />\n        ) : requestState === 'accept' ? (\n          <Icon\n            icon=\"check-circle\"\n            alt=\"Accepted\"\n            class=\"notification-accepted\"\n          />\n        ) : (\n          requestState === 'dismiss' && (\n            <Icon\n              icon=\"x-circle\"\n              alt=\"Dismissed\"\n              class=\"notification-dismissed\"\n            />\n          )\n        )}\n      </span>\n    </p>\n  );\n}\n\nexport default memo(Notifications);\n","import { Menu, MenuDivider, MenuItem } from '@szhsin/react-menu';\nimport { useRef } from 'preact/hooks';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport Icon from '../components/icon';\nimport Menu2 from '../components/menu2';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { filteredItems } from '../utils/filters';\nimport states from '../utils/states';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Public({ local, columnMode, ...props }) {\n  const snapStates = useSnapshot(states);\n  const isLocal = !!local;\n  const params = columnMode ? {} : useParams();\n  const { masto, instance } = api({\n    instance: props?.instance || params.instance,\n  });\n  const { masto: currentMasto, instance: currentInstance } = api();\n  const title = `${isLocal ? 'Local' : 'Federated'} timeline (${instance})`;\n  useTitle(title, isLocal ? `/:instance?/p/l` : `/:instance?/p`);\n  // const navigate = useNavigate();\n  const latestItem = useRef();\n\n  const publicIterator = useRef();\n  async function fetchPublic(firstLoad) {\n    if (firstLoad || !publicIterator.current) {\n      publicIterator.current = masto.v1.timelines.public.list({\n        limit: LIMIT,\n        local: isLocal,\n        remote: !isLocal, // Pixelfed\n      });\n    }\n    const results = await publicIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n\n      // value = filteredItems(value, 'public');\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines.public\n        .list({\n          limit: 1,\n          local: isLocal,\n          since_id: latestItem.current,\n        })\n        .next();\n      let { value } = results;\n      const valueContainsLatestItem = value[0]?.id === latestItem.current; // since_id might not be supported\n      if (value?.length && !valueContainsLatestItem) {\n        value = filteredItems(value, 'public');\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  return (\n    <Timeline\n      key={instance + isLocal}\n      title={title}\n      titleComponent={\n        <h1 class=\"header-double-lines\">\n          <b>{isLocal ? 'Local timeline' : 'Federated timeline'}</b>\n          <div>{instance}</div>\n        </h1>\n      }\n      id=\"public\"\n      instance={instance}\n      emptyText=\"No one has posted anything yet.\"\n      errorText=\"Unable to load posts\"\n      fetchItems={fetchPublic}\n      checkForUpdates={checkForUpdates}\n      useItemID\n      headerStart={<></>}\n      boostsCarousel={snapStates.settings.boostsCarousel}\n      // allowFilters\n      filterContext=\"public\"\n      headerEnd={\n        <Menu2\n          portal\n          // setDownOverflow\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          position=\"anchor\"\n          menuButton={\n            <button type=\"button\" class=\"plain\">\n              <Icon icon=\"more\" size=\"l\" />\n            </button>\n          }\n        >\n          <MenuItem href={isLocal ? `/#/${instance}/p` : `/#/${instance}/p/l`}>\n            {isLocal ? (\n              <>\n                <Icon icon=\"transfer\" /> <span>Switch to Federated</span>\n              </>\n            ) : (\n              <>\n                <Icon icon=\"transfer\" /> <span>Switch to Local</span>\n              </>\n            )}\n          </MenuItem>\n          <MenuDivider />\n          <MenuItem\n            onClick={() => {\n              let newInstance = prompt(\n                'Enter a new instance e.g. \"mastodon.social\"',\n              );\n              if (!/\\./.test(newInstance)) {\n                if (newInstance) alert('Invalid instance');\n                return;\n              }\n              if (newInstance) {\n                newInstance = newInstance.toLowerCase().trim();\n                // navigate(isLocal ? `/${newInstance}/p/l` : `/${newInstance}/p`);\n                location.hash = isLocal\n                  ? `/${newInstance}/p/l`\n                  : `/${newInstance}/p`;\n              }\n            }}\n          >\n            <Icon icon=\"bus\" /> <span>Go to another instance…</span>\n          </MenuItem>\n          {currentInstance !== instance && (\n            <MenuItem\n              onClick={() => {\n                location.hash = isLocal\n                  ? `/${currentInstance}/p/l`\n                  : `/${currentInstance}/p`;\n              }}\n            >\n              <Icon icon=\"bus\" />{' '}\n              <small class=\"menu-double-lines\">\n                Go to my instance (<b>{currentInstance}</b>)\n              </small>\n            </MenuItem>\n          )}\n        </Menu2>\n      }\n    />\n  );\n}\n\nexport default Public;\n","import './search.css';\n\nimport { useAutoAnimate } from '@formkit/auto-animate/preact';\nimport { useEffect, useLayoutEffect, useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { InView } from 'react-intersection-observer';\nimport { useParams, useSearchParams } from 'react-router-dom';\n\nimport AccountBlock from '../components/account-block';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport NavMenu from '../components/nav-menu';\nimport SearchForm from '../components/search-form';\nimport Status from '../components/status';\nimport { api } from '../utils/api';\nimport { fetchRelationships } from '../utils/relationships';\nimport shortenNumber from '../utils/shorten-number';\nimport usePageVisibility from '../utils/usePageVisibility';\nimport useTitle from '../utils/useTitle';\n\nconst SHORT_LIMIT = 5;\nconst LIMIT = 40;\nconst emptySearchParams = new URLSearchParams();\n\nfunction Search({ columnMode, ...props }) {\n  const params = columnMode ? {} : useParams();\n  const { masto, instance, authenticated } = api({\n    instance: params.instance,\n  });\n  const [uiState, setUIState] = useState('default');\n  const [searchParams] = columnMode ? [emptySearchParams] : useSearchParams();\n  const searchFormRef = useRef();\n  const q = props?.query || searchParams.get('q');\n  const type = columnMode\n    ? 'statuses'\n    : props?.type || searchParams.get('type');\n  useTitle(\n    q\n      ? `Search: ${q}${\n          type\n            ? ` (${\n                {\n                  statuses: 'Posts',\n                  accounts: 'Accounts',\n                  hashtags: 'Hashtags',\n                }[type]\n              })`\n            : ''\n        }`\n      : 'Search',\n    `/search`,\n  );\n\n  const [showMore, setShowMore] = useState(false);\n  const offsetRef = useRef(0);\n  useEffect(() => {\n    offsetRef.current = 0;\n  }, [q, type]);\n\n  const scrollableRef = useRef();\n  useLayoutEffect(() => {\n    scrollableRef.current?.scrollTo?.(0, 0);\n  }, [q, type]);\n\n  const [statusResults, setStatusResults] = useState([]);\n  const [accountResults, setAccountResults] = useState([]);\n  const [hashtagResults, setHashtagResults] = useState([]);\n  useEffect(() => {\n    setStatusResults([]);\n    setAccountResults([]);\n    setHashtagResults([]);\n  }, [q]);\n  const setTypeResultsFunc = {\n    statuses: setStatusResults,\n    accounts: setAccountResults,\n    hashtags: setHashtagResults,\n  };\n\n  const [relationshipsMap, setRelationshipsMap] = useState({});\n  const loadRelationships = async (accounts) => {\n    if (!accounts?.length) return;\n    const relationships = await fetchRelationships(accounts, relationshipsMap);\n    if (relationships) {\n      setRelationshipsMap({\n        ...relationshipsMap,\n        ...relationships,\n      });\n    }\n  };\n\n  function loadResults(firstLoad) {\n    if (firstLoad) {\n      offsetRef.current = 0;\n    }\n\n    if (!firstLoad && !authenticated) {\n      // Search results pagination is only available to authenticated users\n      return;\n    }\n\n    setUIState('loading');\n    if (firstLoad && !type) {\n      setStatusResults(statusResults.slice(0, SHORT_LIMIT));\n      setAccountResults(accountResults.slice(0, SHORT_LIMIT));\n      setHashtagResults(hashtagResults.slice(0, SHORT_LIMIT));\n    }\n\n    (async () => {\n      const params = {\n        q,\n        resolve: authenticated,\n        limit: SHORT_LIMIT,\n      };\n      if (type) {\n        params.limit = LIMIT;\n        params.type = type;\n        if (authenticated) params.offset = offsetRef.current;\n      }\n\n      try {\n        const results = await masto.v2.search.fetch(params);\n        console.log(results);\n        if (type) {\n          if (firstLoad) {\n            setTypeResultsFunc[type](results[type]);\n            const length = results[type]?.length;\n            offsetRef.current = LIMIT;\n            setShowMore(!!length);\n          } else {\n            setTypeResultsFunc[type]((prev) => [...prev, ...results[type]]);\n            const length = results[type]?.length;\n            offsetRef.current = offsetRef.current + LIMIT;\n            setShowMore(!!length);\n          }\n        } else {\n          setStatusResults(results.statuses || []);\n          setAccountResults(results.accounts || []);\n          setHashtagResults(results.hashtags || []);\n          offsetRef.current = 0;\n          setShowMore(false);\n        }\n        loadRelationships(results.accounts);\n\n        setUIState('default');\n      } catch (err) {\n        console.error(err);\n        setUIState('error');\n      }\n    })();\n  }\n\n  const lastHiddenTime = useRef();\n  usePageVisibility((visible) => {\n    const reachStart = scrollableRef.current?.scrollTop === 0;\n    if (visible && reachStart) {\n      const timeDiff = Date.now() - lastHiddenTime.current;\n      if (!lastHiddenTime.current || timeDiff > 1000 * 3) {\n        // 3 seconds\n        loadResults(true);\n      } else {\n        lastHiddenTime.current = Date.now();\n      }\n    }\n  });\n\n  useEffect(() => {\n    searchFormRef.current?.setValue?.(q || '');\n    if (q) {\n      loadResults(true);\n    } else {\n      searchFormRef.current?.focus?.();\n    }\n  }, [q, type, instance]);\n\n  useHotkeys(\n    ['/', 'Slash'],\n    (e) => {\n      searchFormRef.current?.focus?.();\n      searchFormRef.current?.select?.();\n    },\n    {\n      preventDefault: true,\n    },\n  );\n\n  const [filterBarParent] = useAutoAnimate();\n\n  return (\n    <div id=\"search-page\" class=\"deck-container\" ref={scrollableRef}>\n      <div class=\"timeline-deck deck\">\n        <header class={uiState === 'loading' ? 'loading' : ''}>\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n            </div>\n            <SearchForm ref={searchFormRef} />\n            <div class=\"header-side\">\n              <button\n                type=\"button\"\n                class=\"plain\"\n                onClick={() => {\n                  loadResults(true);\n                }}\n                disabled={uiState === 'loading'}\n              >\n                <Icon icon=\"search\" size=\"l\" />\n              </button>\n            </div>\n          </div>\n        </header>\n        <main>\n          {!!q && !columnMode && (\n            <div\n              ref={filterBarParent}\n              class={`filter-bar ${uiState === 'loading' ? 'loading' : ''}`}\n            >\n              {!!type && (\n                <Link to={`/search${q ? `?q=${encodeURIComponent(q)}` : ''}`}>\n                  ‹ All\n                </Link>\n              )}\n              {[\n                {\n                  label: 'Accounts',\n                  type: 'accounts',\n                  to: `/search?q=${encodeURIComponent(q)}&type=accounts`,\n                },\n                {\n                  label: 'Hashtags',\n                  type: 'hashtags',\n                  to: `/search?q=${encodeURIComponent(q)}&type=hashtags`,\n                },\n                {\n                  label: 'Posts',\n                  type: 'statuses',\n                  to: `/search?q=${encodeURIComponent(q)}&type=statuses`,\n                },\n              ]\n                .sort((a, b) => {\n                  if (a.type === type) return -1;\n                  if (b.type === type) return 1;\n                  return 0;\n                })\n                .map((link) => (\n                  <Link to={link.to} key={link.type}>\n                    {link.label}\n                  </Link>\n                ))}\n            </div>\n          )}\n          {!!q ? (\n            <>\n              {(!type || type === 'accounts') && (\n                <>\n                  {type !== 'accounts' && (\n                    <h2 class=\"timeline-header\">\n                      Accounts{' '}\n                      <Link\n                        to={`/search?q=${encodeURIComponent(q)}&type=accounts`}\n                      >\n                        <Icon icon=\"arrow-right\" size=\"l\" />\n                      </Link>\n                    </h2>\n                  )}\n                  {accountResults.length > 0 ? (\n                    <>\n                      <ul class=\"timeline flat accounts-list\">\n                        {accountResults.map((account) => (\n                          <li key={account.id}>\n                            <AccountBlock\n                              account={account}\n                              instance={instance}\n                              showStats\n                              relationship={relationshipsMap[account.id]}\n                            />\n                          </li>\n                        ))}\n                      </ul>\n                      {type !== 'accounts' && (\n                        <div class=\"ui-state\">\n                          <Link\n                            class=\"plain button\"\n                            to={`/search?q=${encodeURIComponent(\n                              q,\n                            )}&type=accounts`}\n                          >\n                            See more accounts <Icon icon=\"arrow-right\" />\n                          </Link>\n                        </div>\n                      )}\n                    </>\n                  ) : (\n                    !type &&\n                    (uiState === 'loading' ? (\n                      <p class=\"ui-state\">\n                        <Loader abrupt />\n                      </p>\n                    ) : (\n                      <p class=\"ui-state\">No accounts found.</p>\n                    ))\n                  )}\n                </>\n              )}\n              {(!type || type === 'hashtags') && (\n                <>\n                  {type !== 'hashtags' && (\n                    <h2 class=\"timeline-header\">\n                      Hashtags{' '}\n                      <Link\n                        to={`/search?q=${encodeURIComponent(q)}&type=hashtags`}\n                      >\n                        <Icon icon=\"arrow-right\" size=\"l\" />\n                      </Link>\n                    </h2>\n                  )}\n                  {hashtagResults.length > 0 ? (\n                    <>\n                      <ul class=\"link-list hashtag-list\">\n                        {hashtagResults.map((hashtag) => {\n                          const { name, history } = hashtag;\n                          const total = history?.reduce?.(\n                            (acc, cur) => acc + +cur.uses,\n                            0,\n                          );\n                          return (\n                            <li key={`${name}-${total}`}>\n                              <Link\n                                to={\n                                  instance\n                                    ? `/${instance}/t/${name}`\n                                    : `/t/${name}`\n                                }\n                              >\n                                <Icon icon=\"hashtag\" />\n                                <span>{name}</span>\n                                {!!total && (\n                                  <span class=\"count\">\n                                    {shortenNumber(total)}\n                                  </span>\n                                )}\n                              </Link>\n                            </li>\n                          );\n                        })}\n                      </ul>\n                      {type !== 'hashtags' && (\n                        <div class=\"ui-state\">\n                          <Link\n                            class=\"plain button\"\n                            to={`/search?q=${encodeURIComponent(\n                              q,\n                            )}&type=hashtags`}\n                          >\n                            See more hashtags <Icon icon=\"arrow-right\" />\n                          </Link>\n                        </div>\n                      )}\n                    </>\n                  ) : (\n                    !type &&\n                    (uiState === 'loading' ? (\n                      <p class=\"ui-state\">\n                        <Loader abrupt />\n                      </p>\n                    ) : (\n                      <p class=\"ui-state\">No hashtags found.</p>\n                    ))\n                  )}\n                </>\n              )}\n              {(!type || type === 'statuses') && (\n                <>\n                  {type !== 'statuses' && (\n                    <h2 class=\"timeline-header\">\n                      Posts{' '}\n                      <Link\n                        to={`/search?q=${encodeURIComponent(q)}&type=statuses`}\n                      >\n                        <Icon icon=\"arrow-right\" size=\"l\" />\n                      </Link>\n                    </h2>\n                  )}\n                  {statusResults.length > 0 ? (\n                    <>\n                      <ul class=\"timeline\">\n                        {statusResults.map((status) => (\n                          <li key={status.id}>\n                            <Link\n                              class=\"status-link\"\n                              to={\n                                instance\n                                  ? `/${instance}/s/${status.id}`\n                                  : `/s/${status.id}`\n                              }\n                            >\n                              <Status status={status} />\n                            </Link>\n                          </li>\n                        ))}\n                      </ul>\n                      {type !== 'statuses' && (\n                        <div class=\"ui-state\">\n                          <Link\n                            class=\"plain button\"\n                            to={`/search?q=${encodeURIComponent(\n                              q,\n                            )}&type=statuses`}\n                          >\n                            See more posts <Icon icon=\"arrow-right\" />\n                          </Link>\n                        </div>\n                      )}\n                    </>\n                  ) : (\n                    !type &&\n                    (uiState === 'loading' ? (\n                      <p class=\"ui-state\">\n                        <Loader abrupt />\n                      </p>\n                    ) : (\n                      <p class=\"ui-state\">No posts found.</p>\n                    ))\n                  )}\n                </>\n              )}\n              {!!type &&\n                (uiState === 'default' ? (\n                  showMore ? (\n                    <InView\n                      onChange={(inView) => {\n                        if (inView) {\n                          loadResults();\n                        }\n                      }}\n                    >\n                      <button\n                        type=\"button\"\n                        class=\"plain block\"\n                        onClick={() => loadResults()}\n                        style={{ marginBlockEnd: '6em' }}\n                      >\n                        Show more&hellip;\n                      </button>\n                    </InView>\n                  ) : (\n                    <p class=\"ui-state insignificant\">The end.</p>\n                  )\n                ) : (\n                  uiState === 'loading' && (\n                    <p class=\"ui-state\">\n                      <Loader abrupt />\n                    </p>\n                  )\n                ))}\n            </>\n          ) : uiState === 'loading' ? (\n            <p class=\"ui-state\">\n              <Loader abrupt />\n            </p>\n          ) : (\n            <p class=\"ui-state\">\n              Enter your search term or paste a URL above to get started.\n            </p>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default Search;\n","import '../components/links-bar.css';\n\nimport { MenuItem } from '@szhsin/react-menu';\nimport { getBlurHashAverageColor } from 'fast-blurhash';\nimport { useMemo, useRef, useState } from 'preact/hooks';\nimport punycode from 'punycode';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Menu2 from '../components/menu2';\nimport RelativeTime from '../components/relative-time';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { oklab2rgb, rgb2oklab } from '../utils/color-utils';\nimport { filteredItems } from '../utils/filters';\nimport pmem from '../utils/pmem';\nimport shortenNumber from '../utils/shorten-number';\nimport states from '../utils/states';\nimport { saveStatus } from '../utils/states';\nimport supports from '../utils/supports';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nconst fetchLinks = pmem(\n  (masto) => {\n    return masto.v1.trends.links.list().next();\n  },\n  {\n    // News last much longer\n    maxAge: 10 * 60 * 1000, // 10 minutes\n  },\n);\n\nfunction fetchTrends(masto) {\n  if (supports('@pixelfed/trending')) {\n    return masto.pixelfed.v2.discover.posts.trending.list({\n      range: 'daily',\n    });\n  }\n  return masto.v1.trends.statuses.list({\n    limit: LIMIT,\n  });\n}\n\nfunction Trending({ columnMode, ...props }) {\n  const snapStates = useSnapshot(states);\n  const params = columnMode ? {} : useParams();\n  const { masto, instance } = api({\n    instance: props?.instance || params.instance,\n  });\n  const { masto: currentMasto, instance: currentInstance } = api();\n  const title = `Trending (${instance})`;\n  useTitle(title, `/:instance?/trending`);\n  // const navigate = useNavigate();\n  const latestItem = useRef();\n\n  const [hashtags, setHashtags] = useState([]);\n  const [links, setLinks] = useState([]);\n  const trendIterator = useRef();\n\n  async function fetchTrend(firstLoad) {\n    if (firstLoad || !trendIterator.current) {\n      trendIterator.current = fetchTrends(masto);\n\n      // Get hashtags\n      if (supports('@mastodon/trending-hashtags')) {\n        try {\n          const iterator = masto.v1.trends.tags.list();\n          const { value: tags } = await iterator.next();\n          console.log('tags', tags);\n          if (tags?.length) {\n            setHashtags(tags);\n          }\n        } catch (e) {\n          console.error(e);\n        }\n      }\n\n      // Get links\n      if (supports('@mastodon/trending-links')) {\n        try {\n          const { value } = await fetchLinks(masto, instance);\n          // 4 types available: link, photo, video, rich\n          // Only want links for now\n          const links = value?.filter?.((link) => link.type === 'link');\n          console.log('links', links);\n          if (links?.length) {\n            setLinks(links);\n          }\n        } catch (e) {\n          console.error(e);\n        }\n      }\n    }\n    const results = await trendIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n\n      // value = filteredItems(value, 'public'); // Might not work here\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.trends.statuses\n        .list({\n          limit: 1,\n          // NOT SUPPORTED\n          // since_id: latestItem.current,\n        })\n        .next();\n      let { value } = results;\n      value = filteredItems(value, 'public');\n      if (value?.length && value[0].id !== latestItem.current) {\n        latestItem.current = value[0].id;\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  const TimelineStart = useMemo(() => {\n    return (\n      <>\n        {!!hashtags.length && (\n          <div class=\"filter-bar expandable\">\n            <Icon icon=\"chart\" class=\"insignificant\" size=\"l\" />\n            {hashtags.map((tag, i) => {\n              const { name, history } = tag;\n              const total = history.reduce((acc, cur) => acc + +cur.uses, 0);\n              return (\n                <Link to={`/${instance}/t/${name}`} key={name}>\n                  <span>\n                    <span class=\"more-insignificant\">#</span>\n                    {name}\n                  </span>\n                  <span class=\"filter-count\">{shortenNumber(total)}</span>\n                </Link>\n              );\n            })}\n          </div>\n        )}\n        {!!links.length && (\n          <div class=\"links-bar\">\n            <header>\n              <h3>Trending News</h3>\n            </header>\n            {links.map((link) => {\n              const {\n                authorName,\n                authorUrl,\n                blurhash,\n                description,\n                height,\n                image,\n                imageDescription,\n                language,\n                providerName,\n                providerUrl,\n                publishedAt,\n                title,\n                url,\n                width,\n              } = link;\n              const domain = punycode.toUnicode(\n                new URL(url).hostname.replace(/^www\\./, '').replace(/\\/$/, ''),\n              );\n              let accentColor;\n              if (blurhash) {\n                const averageColor = getBlurHashAverageColor(blurhash);\n                const labAverageColor = rgb2oklab(averageColor);\n                accentColor = oklab2rgb([\n                  0.6,\n                  labAverageColor[1],\n                  labAverageColor[2],\n                ]);\n              }\n\n              return (\n                <a\n                  key={url}\n                  href={url}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  style={\n                    accentColor\n                      ? {\n                          '--accent-color': `rgb(${accentColor.join(',')})`,\n                          '--accent-alpha-color': `rgba(${accentColor.join(\n                            ',',\n                          )}, 0.4)`,\n                        }\n                      : {}\n                  }\n                >\n                  <article>\n                    <figure>\n                      <img\n                        src={image}\n                        alt={imageDescription}\n                        width={width}\n                        height={height}\n                        loading=\"lazy\"\n                      />\n                    </figure>\n                    <div class=\"article-body\">\n                      <header>\n                        <div class=\"article-meta\">\n                          <span class=\"domain\">{domain}</span>{' '}\n                          {!!publishedAt && <>&middot; </>}\n                          {!!publishedAt && (\n                            <>\n                              <RelativeTime\n                                datetime={publishedAt}\n                                format=\"micro\"\n                              />\n                            </>\n                          )}\n                        </div>\n                        {!!title && (\n                          <h1\n                            class=\"title\"\n                            lang={language}\n                            dir=\"auto\"\n                            title={title}\n                          >\n                            {title}\n                          </h1>\n                        )}\n                      </header>\n                      {!!description && (\n                        <p\n                          class=\"description\"\n                          lang={language}\n                          dir=\"auto\"\n                          title={description}\n                        >\n                          {description}\n                        </p>\n                      )}\n                    </div>\n                  </article>\n                </a>\n              );\n            })}\n          </div>\n        )}\n      </>\n    );\n  }, [hashtags, links]);\n\n  return (\n    <Timeline\n      key={instance}\n      title={title}\n      titleComponent={\n        <h1 class=\"header-double-lines\">\n          <b>Trending</b>\n          <div>{instance}</div>\n        </h1>\n      }\n      id=\"trending\"\n      instance={instance}\n      emptyText=\"No trending posts.\"\n      errorText=\"Unable to load posts\"\n      fetchItems={fetchTrend}\n      checkForUpdates={checkForUpdates}\n      checkForUpdatesInterval={5 * 60 * 1000} // 5 minutes\n      useItemID\n      headerStart={<></>}\n      boostsCarousel={snapStates.settings.boostsCarousel}\n      // allowFilters\n      filterContext=\"public\"\n      timelineStart={TimelineStart}\n      headerEnd={\n        <Menu2\n          portal\n          // setDownOverflow\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          position=\"anchor\"\n          menuButton={\n            <button type=\"button\" class=\"plain\">\n              <Icon icon=\"more\" size=\"l\" />\n            </button>\n          }\n        >\n          <MenuItem\n            onClick={() => {\n              let newInstance = prompt(\n                'Enter a new instance e.g. \"mastodon.social\"',\n              );\n              if (!/\\./.test(newInstance)) {\n                if (newInstance) alert('Invalid instance');\n                return;\n              }\n              if (newInstance) {\n                newInstance = newInstance.toLowerCase().trim();\n                // navigate(`/${newInstance}/trending`);\n                location.hash = `/${newInstance}/trending`;\n              }\n            }}\n          >\n            <Icon icon=\"bus\" /> <span>Go to another instance…</span>\n          </MenuItem>\n          {currentInstance !== instance && (\n            <MenuItem\n              onClick={() => {\n                location.hash = `/${currentInstance}/trending`;\n              }}\n            >\n              <Icon icon=\"bus\" />{' '}\n              <small class=\"menu-double-lines\">\n                Go to my instance (<b>{currentInstance}</b>)\n              </small>\n            </MenuItem>\n          )}\n        </Menu2>\n      }\n    />\n  );\n}\n\nexport default Trending;\n","import { useHotkeys } from 'react-hotkeys-hook';\nimport { useSnapshot } from 'valtio';\n\nimport Bookmarks from '../pages/bookmarks';\nimport Favourites from '../pages/favourites';\nimport Following from '../pages/following';\nimport Hashtag from '../pages/hashtag';\nimport List from '../pages/list';\nimport Mentions from '../pages/mentions';\nimport Notifications from '../pages/notifications';\nimport Public from '../pages/public';\nimport Search from '../pages/search';\nimport Trending from '../pages/trending';\nimport states from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nfunction Columns() {\n  useTitle('Home', '/');\n  const snapStates = useSnapshot(states);\n  const { shortcuts } = snapStates;\n\n  console.debug('RENDER Columns', shortcuts);\n\n  const components = shortcuts.map((shortcut) => {\n    if (!shortcut) return null;\n    const { type, ...params } = shortcut;\n    const Component = {\n      following: Following,\n      notifications: Notifications,\n      list: List,\n      public: Public,\n      bookmarks: Bookmarks,\n      favourites: Favourites,\n      hashtag: Hashtag,\n      mentions: Mentions,\n      trending: Trending,\n      search: Search,\n    }[type];\n    if (!Component) return null;\n    // Don't show Search column with no query, for now\n    if (type === 'search' && !params.query) return null;\n    // Don't show List column with no list, for now\n    if (type === 'list' && !params.id) return null;\n    return (\n      <Component key={type + JSON.stringify(params)} {...params} columnMode />\n    );\n  });\n\n  useHotkeys(['1', '2', '3', '4', '5', '6', '7', '8', '9'], (e, handler) => {\n    try {\n      const index = parseInt(handler.keys[0], 10) - 1;\n      document.querySelectorAll('#columns > *')[index].focus();\n    } catch (e) {\n      console.error(e);\n    }\n  });\n\n  return (\n    <div\n      id=\"columns\"\n      onContextMenu={(e) => {\n        // If right-click on header, but not links or buttons\n        if (\n          e.target.closest('.deck > header') &&\n          !e.target.closest('a') &&\n          !e.target.closest('button')\n        ) {\n          e.preventDefault();\n          states.showShortcutsSettings = true;\n        }\n      }}\n    >\n      {components}\n    </div>\n  );\n}\n\nexport default Columns;\n","import './notifications-menu.css';\n\nimport { ControlledMenu } from '@szhsin/react-menu';\nimport { memo } from 'preact/compat';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport Columns from '../components/columns';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport Notification from '../components/notification';\nimport { api } from '../utils/api';\nimport db from '../utils/db';\nimport groupNotifications from '../utils/group-notifications';\nimport states, { saveStatus } from '../utils/states';\nimport { getCurrentAccountNS } from '../utils/store-utils';\n\nimport Following from './following';\n\nfunction Home() {\n  const snapStates = useSnapshot(states);\n  useEffect(() => {\n    (async () => {\n      const keys = await db.drafts.keys();\n      if (keys.length) {\n        const ns = getCurrentAccountNS();\n        const ownKeys = keys.filter((key) => key.startsWith(ns));\n        if (ownKeys.length) {\n          states.showDrafts = true;\n        }\n      }\n    })();\n  }, []);\n\n  return (\n    <>\n      {(snapStates.settings.shortcutsViewMode === 'multi-column' ||\n        (!snapStates.settings.shortcutsViewMode &&\n          snapStates.settings.shortcutsColumnsMode)) &&\n      !!snapStates.shortcuts?.length ? (\n        <Columns />\n      ) : (\n        <Following\n          title=\"Home\"\n          path=\"/\"\n          id=\"home\"\n          headerStart={false}\n          headerEnd={<NotificationsLink />}\n        />\n      )}\n    </>\n  );\n}\n\nfunction NotificationsLink() {\n  const snapStates = useSnapshot(states);\n  const notificationLinkRef = useRef();\n  const [menuState, setMenuState] = useState(undefined);\n  return (\n    <>\n      <Link\n        ref={notificationLinkRef}\n        to=\"/notifications\"\n        class={`button plain notifications-button ${\n          snapStates.notificationsShowNew ? 'has-badge' : ''\n        } ${menuState || ''}`}\n        onClick={(e) => {\n          e.stopPropagation();\n          if (window.matchMedia('(min-width: calc(40em))').matches) {\n            e.preventDefault();\n            setMenuState((state) => (!state ? 'open' : undefined));\n          }\n        }}\n      >\n        <Icon icon=\"notification\" size=\"l\" alt=\"Notifications\" />\n      </Link>\n      <NotificationsMenu\n        state={menuState}\n        anchorRef={notificationLinkRef}\n        onClose={() => setMenuState(undefined)}\n      />\n    </>\n  );\n}\n\nconst NOTIFICATIONS_LIMIT = 80;\nconst NOTIFICATIONS_DISPLAY_LIMIT = 5;\nfunction NotificationsMenu({ anchorRef, state, onClose }) {\n  const { masto, instance } = api();\n  const snapStates = useSnapshot(states);\n  const [uiState, setUIState] = useState('default');\n\n  const notificationsIterator = masto.v1.notifications.list({\n    limit: NOTIFICATIONS_LIMIT,\n  });\n\n  async function fetchNotifications() {\n    const allNotifications = await notificationsIterator.next();\n    const notifications = allNotifications.value;\n\n    if (notifications?.length) {\n      notifications.forEach((notification) => {\n        saveStatus(notification.status, instance, {\n          skipThreading: true,\n        });\n      });\n\n      const groupedNotifications = groupNotifications(notifications);\n\n      states.notificationsLast = notifications[0];\n      states.notifications = groupedNotifications;\n\n      // Update last read marker\n      masto.v1.markers\n        .create({\n          notifications: {\n            lastReadId: notifications[0].id,\n          },\n        })\n        .catch(() => {});\n    }\n\n    states.notificationsShowNew = false;\n    states.notificationsLastFetchTime = Date.now();\n    return allNotifications;\n  }\n\n  const [hasFollowRequests, setHasFollowRequests] = useState(false);\n  function fetchFollowRequests() {\n    return masto.v1.followRequests.list({\n      limit: 1,\n    });\n  }\n\n  function loadNotifications() {\n    setUIState('loading');\n    (async () => {\n      try {\n        await fetchNotifications();\n        const followRequests = await fetchFollowRequests();\n        setHasFollowRequests(!!followRequests?.length);\n        setUIState('default');\n      } catch (e) {\n        setUIState('error');\n      }\n    })();\n  }\n\n  useEffect(() => {\n    if (state === 'open') loadNotifications();\n  }, [state]);\n\n  return (\n    <ControlledMenu\n      menuClassName=\"notifications-menu\"\n      state={state}\n      anchorRef={anchorRef}\n      onClose={onClose}\n      portal={{\n        target: document.body,\n      }}\n      overflow=\"auto\"\n      viewScroll=\"close\"\n      position=\"anchor\"\n      align=\"center\"\n      boundingBoxPadding=\"8 8 8 8\"\n    >\n      <header>\n        <h2>Notifications</h2>\n      </header>\n      <main>\n        {snapStates.notifications.length ? (\n          <>\n            {snapStates.notifications\n              .slice(0, NOTIFICATIONS_DISPLAY_LIMIT)\n              .map((notification) => (\n                <Notification\n                  key={notification.id}\n                  instance={instance}\n                  notification={notification}\n                  disableContextMenu\n                />\n              ))}\n          </>\n        ) : uiState === 'loading' ? (\n          <div class=\"ui-state\">\n            <Loader abrupt />\n          </div>\n        ) : (\n          uiState === 'error' && (\n            <div class=\"ui-state\">\n              <p>Unable to fetch notifications.</p>\n              <p>\n                <button type=\"button\" onClick={loadNotifications}>\n                  Try again\n                </button>\n              </p>\n            </div>\n          )\n        )}\n      </main>\n      <footer>\n        <Link to=\"/mentions\" class=\"button plain\">\n          <Icon icon=\"at\" /> <span>Mentions</span>\n        </Link>\n        <Link to=\"/notifications\" class=\"button plain2\">\n          {hasFollowRequests ? (\n            <>\n              <span class=\"tag collapsed\">New</span>{' '}\n              <span>Follow Requests</span>\n            </>\n          ) : (\n            <b>See all</b>\n          )}{' '}\n          <Icon icon=\"arrow-right\" />\n        </Link>\n      </footer>\n    </ControlledMenu>\n  );\n}\n\nexport default memo(Home);\n","// export const statusRegex = /\\/@([^@\\/]+)@?([^\\/]+)?\\/([^\\/]+)\\/?$/i;\n// export const statusNoteRegex = /\\/notes\\/([^\\/]+)\\/?$/i;\n\nconst statusPostRegexes = [\n  /^\\/@[^@\\/]+\\/(?:statuses|posts)\\/([^\\/]+)/i, // GoToSocial, Takahe\n  /\\/notes\\/([^\\/]+)/i, // Misskey, Firefish\n  /^\\/(?:notice|objects)\\/([a-z0-9-]+)/i, // Pleroma\n  /\\/@[^@\\/]+@?[^\\/]+?\\/([^\\/]+)/i, // Mastodon\n  /^\\/p\\/[^\\/]+\\/([^\\/]+)/i, // Pixelfed\n];\n\nexport function getInstanceStatusObject(url) {\n  // Regex /:username/:id, where username = @username or @username@domain, id = anything\n  const { hostname, pathname } = new URL(url);\n  // const [, username, domain, id] = pathname.match(statusRegex) || [];\n  for (const regex of statusPostRegexes) {\n    const [, id] = pathname.match(regex) || [];\n    console.log(pathname, regex, id);\n    if (id) {\n      return {\n        instance: hostname,\n        id,\n      };\n    }\n  }\n  return {};\n}\n\nfunction getInstanceStatusURL(url) {\n  const { instance, id } = getInstanceStatusObject(url);\n  if (instance && id) {\n    return `/${instance}/s/${id}`;\n  }\n  return null;\n}\n\nexport default getInstanceStatusURL;\n","import { useLayoutEffect, useState } from 'preact/hooks';\nimport { useLocation } from 'react-router-dom';\n\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport { api } from '../utils/api';\nimport getInstanceStatusURL, {\n  getInstanceStatusObject,\n} from '../utils/get-instance-status-url';\n\nexport default function HttpRoute() {\n  const location = useLocation();\n  const url = location.pathname.replace(/^\\//, '');\n  const statusObject = getInstanceStatusObject(url);\n  // const statusURL = getInstanceStatusURL(url);\n  const statusURL = statusObject?.instance\n    ? `/${statusObject.instance}/s/${statusObject.id}`\n    : null;\n  const [uiState, setUIState] = useState('loading');\n\n  useLayoutEffect(() => {\n    setUIState('loading');\n    (async () => {\n      // Check if status returns 200\n      try {\n        const { instance, id } = statusObject;\n        const { masto } = api({ instance });\n        const status = await masto.v1.statuses.$select(id).fetch();\n        if (status) {\n          window.location.hash = statusURL + '?view=full';\n          return;\n        }\n      } catch (e) {}\n\n      // Fallback to search\n      {\n        const { masto: currentMasto, instance: currentInstance } = api();\n        const result = await currentMasto.v2.search.fetch({\n          q: url,\n          limit: 1,\n          resolve: true,\n        });\n        if (result.statuses.length) {\n          const status = result.statuses[0];\n          window.location.hash = `/${currentInstance}/s/${status.id}?view=full`;\n        } else if (result.accounts.length) {\n          const account = result.accounts[0];\n          window.location.hash = `/${currentInstance}/a/${account.id}`;\n        } else if (statusURL) {\n          // Fallback to original URL, which will probably show error\n          window.location.hash = statusURL + '?view=full';\n        } else {\n          setUIState('error');\n        }\n      }\n    })();\n  }, [statusURL]);\n\n  return (\n    <div class=\"ui-state\" tabIndex=\"-1\">\n      {uiState === 'loading' ? (\n        <>\n          <Loader abrupt />\n          <h2>Resolving…</h2>\n          <p>\n            <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n              {url}\n            </a>\n          </p>\n        </>\n      ) : (\n        <>\n          <h2>Unable to resolve URL</h2>\n          <p>\n            <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n              {url}\n            </a>\n          </p>\n        </>\n      )}\n      <hr />\n      <p>\n        <Link to=\"/\">Go home</Link>\n      </p>\n    </div>\n  );\n}\n","import './lists.css';\n\nimport { useEffect, useReducer, useRef, useState } from 'preact/hooks';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport ListAddEdit from '../components/list-add-edit';\nimport Loader from '../components/loader';\nimport Modal from '../components/modal';\nimport NavMenu from '../components/nav-menu';\nimport { fetchLists } from '../utils/lists';\nimport useTitle from '../utils/useTitle';\n\nfunction Lists() {\n  useTitle(`Lists`, `/l`);\n  const [uiState, setUIState] = useState('default');\n\n  const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n  const [lists, setLists] = useState([]);\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const lists = await fetchLists();\n        console.log(lists);\n        setLists(lists);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, [reloadCount]);\n\n  const [showListAddEditModal, setShowListAddEditModal] = useState(false);\n\n  return (\n    <div id=\"lists-page\" class=\"deck-container\" tabIndex=\"-1\">\n      <div class=\"timeline-deck deck\">\n        <header>\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n              <Link to=\"/\" class=\"button plain\">\n                <Icon icon=\"home\" size=\"l\" />\n              </Link>\n            </div>\n            <h1>Lists</h1>\n            <div class=\"header-side\">\n              <button\n                type=\"button\"\n                class=\"plain\"\n                onClick={() => setShowListAddEditModal(true)}\n              >\n                <Icon icon=\"plus\" size=\"l\" alt=\"New list\" />\n              </button>\n            </div>\n          </div>\n        </header>\n        <main>\n          {lists.length > 0 ? (\n            <>\n              <ul class=\"link-list\">\n                {lists.map((list) => (\n                  <li>\n                    <Link to={`/l/${list.id}`}>\n                      <span>\n                        <Icon icon=\"list\" /> <span>{list.title}</span>\n                      </span>\n                      {/* <button\n                      type=\"button\"\n                      class=\"plain\"\n                      onClick={(e) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        setShowListAddEditModal({\n                          list,\n                        });\n                      }}\n                    >\n                      <Icon icon=\"pencil\" />\n                    </button> */}\n                    </Link>\n                  </li>\n                ))}\n              </ul>\n              {lists.length > 1 && (\n                <footer class=\"ui-state\">\n                  <small class=\"insignificant\">\n                    {lists.length} list\n                    {lists.length === 1 ? '' : 's'}\n                  </small>\n                </footer>\n              )}\n            </>\n          ) : uiState === 'loading' ? (\n            <p class=\"ui-state\">\n              <Loader />\n            </p>\n          ) : uiState === 'error' ? (\n            <p class=\"ui-state\">Unable to load lists.</p>\n          ) : (\n            <p class=\"ui-state\">No lists yet.</p>\n          )}\n        </main>\n      </div>\n      {showListAddEditModal && (\n        <Modal\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowListAddEditModal(false);\n            }\n          }}\n        >\n          <ListAddEdit\n            list={showListAddEditModal?.list}\n            onClose={(result) => {\n              if (result.state === 'success') {\n                reload();\n              }\n              setShowListAddEditModal(false);\n            }}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nexport default Lists;\n","export default \"__VITE_ASSET__Y_wpqkTO__\"","const { PHANPY_CLIENT_NAME: CLIENT_NAME, PHANPY_WEBSITE: WEBSITE } = import.meta\n  .env;\n\nconst SCOPES = 'read write follow push';\n\nexport async function registerApplication({ instanceURL }) {\n  const registrationParams = new URLSearchParams({\n    client_name: CLIENT_NAME,\n    redirect_uris: location.origin + location.pathname,\n    scopes: SCOPES,\n    website: WEBSITE,\n  });\n  const registrationResponse = await fetch(\n    `https://${instanceURL}/api/v1/apps`,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: registrationParams.toString(),\n    },\n  );\n  const registrationJSON = await registrationResponse.json();\n  console.log({ registrationJSON });\n  return registrationJSON;\n}\n\nexport async function getAuthorizationURL({ instanceURL, client_id }) {\n  const authorizationParams = new URLSearchParams({\n    client_id,\n    scope: SCOPES,\n    redirect_uri: location.origin + location.pathname,\n    // redirect_uri: 'urn:ietf:wg:oauth:2.0:oob',\n    response_type: 'code',\n  });\n  const authorizationURL = `https://${instanceURL}/oauth/authorize?${authorizationParams.toString()}`;\n  return authorizationURL;\n}\n\nexport async function getAccessToken({\n  instanceURL,\n  client_id,\n  client_secret,\n  code,\n}) {\n  const params = new URLSearchParams({\n    client_id,\n    client_secret,\n    redirect_uri: location.origin + location.pathname,\n    grant_type: 'authorization_code',\n    code,\n    scope: SCOPES,\n  });\n  const tokenResponse = await fetch(`https://${instanceURL}/oauth/token`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body: params.toString(),\n  });\n  const tokenJSON = await tokenResponse.json();\n  console.log({ tokenJSON });\n  return tokenJSON;\n}\n","import './login.css';\n\nimport Fuse from 'fuse.js';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useSearchParams } from 'react-router-dom';\n\nimport logo from '../assets/logo.svg';\n\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport instancesListURL from '../data/instances.json?url';\nimport { getAuthorizationURL, registerApplication } from '../utils/auth';\nimport store from '../utils/store';\nimport useTitle from '../utils/useTitle';\n\nconst { PHANPY_DEFAULT_INSTANCE: DEFAULT_INSTANCE } = import.meta.env;\n\nfunction Login() {\n  useTitle('Log in');\n  const instanceURLRef = useRef();\n  const cachedInstanceURL = store.local.get('instanceURL');\n  const [uiState, setUIState] = useState('default');\n  const [searchParams] = useSearchParams();\n  const instance = searchParams.get('instance');\n  const submit = searchParams.get('submit');\n  const [instanceText, setInstanceText] = useState(\n    instance || cachedInstanceURL?.toLowerCase() || '',\n  );\n\n  const [instancesList, setInstancesList] = useState([]);\n  const searcher = useRef();\n  useEffect(() => {\n    (async () => {\n      try {\n        const res = await fetch(instancesListURL);\n        const data = await res.json();\n        setInstancesList(data);\n        searcher.current = new Fuse(data);\n      } catch (e) {\n        // Silently fail\n        console.error(e);\n      }\n    })();\n  }, []);\n\n  // useEffect(() => {\n  //   if (cachedInstanceURL) {\n  //     instanceURLRef.current.value = cachedInstanceURL.toLowerCase();\n  //   }\n  // }, []);\n\n  const submitInstance = (instanceURL) => {\n    if (!instanceURL) return;\n    store.local.set('instanceURL', instanceURL);\n\n    (async () => {\n      setUIState('loading');\n      try {\n        const { client_id, client_secret, vapid_key } =\n          await registerApplication({\n            instanceURL,\n          });\n\n        if (client_id && client_secret) {\n          store.session.set('clientID', client_id);\n          store.session.set('clientSecret', client_secret);\n          store.session.set('vapidKey', vapid_key);\n\n          location.href = await getAuthorizationURL({\n            instanceURL,\n            client_id,\n          });\n        } else {\n          alert('Failed to register application');\n        }\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  };\n\n  const cleanInstanceText = instanceText\n    ? instanceText\n        .replace(/^https?:\\/\\//, '') // Remove protocol from instance URL\n        .replace(/\\/+$/, '') // Remove trailing slash\n        .replace(/^@?[^@]+@/, '') // Remove @?acct@\n        .trim()\n    : null;\n  const instanceTextLooksLikeDomain =\n    /[^\\s\\r\\n\\t\\/\\\\]+\\.[^\\s\\r\\n\\t\\/\\\\]+/.test(cleanInstanceText) &&\n    !/[\\s\\/\\\\@]/.test(cleanInstanceText);\n\n  const instancesSuggestions = cleanInstanceText\n    ? searcher.current\n        ?.search(cleanInstanceText, {\n          limit: 10,\n        })\n        ?.map((match) => match.item)\n    : [];\n\n  const selectedInstanceText = instanceTextLooksLikeDomain\n    ? cleanInstanceText\n    : instancesSuggestions?.length\n    ? instancesSuggestions[0]\n    : instanceText\n    ? instancesList.find((instance) => instance.includes(instanceText))\n    : null;\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    // const { elements } = e.target;\n    // let instanceURL = elements.instanceURL.value.toLowerCase();\n    // // Remove protocol from instance URL\n    // instanceURL = instanceURL.replace(/^https?:\\/\\//, '').replace(/\\/+$/, '');\n    // // Remove @acct@ or acct@ from instance URL\n    // instanceURL = instanceURL.replace(/^@?[^@]+@/, '');\n    // if (!/\\./.test(instanceURL)) {\n    //   instanceURL = instancesList.find((instance) =>\n    //     instance.includes(instanceURL),\n    //   );\n    // }\n    // submitInstance(instanceURL);\n    submitInstance(selectedInstanceText);\n  };\n\n  if (submit) {\n    useEffect(() => {\n      submitInstance(instance || selectedInstanceText);\n    }, []);\n  }\n\n  return (\n    <main id=\"login\" style={{ textAlign: 'center' }}>\n      <form onSubmit={onSubmit}>\n        <h1>\n          <img src={logo} alt=\"\" width=\"80\" height=\"80\" />\n          <br />\n          Log in\n        </h1>\n        <label>\n          <p>Instance</p>\n          <input\n            value={instanceText}\n            required\n            type=\"text\"\n            class=\"large\"\n            id=\"instanceURL\"\n            ref={instanceURLRef}\n            disabled={uiState === 'loading'}\n            // list=\"instances-list\"\n            autocorrect=\"off\"\n            autocapitalize=\"off\"\n            autocomplete=\"off\"\n            spellCheck={false}\n            placeholder=\"instance domain\"\n            onInput={(e) => {\n              setInstanceText(e.target.value);\n            }}\n          />\n          {instancesSuggestions?.length > 0 ? (\n            <ul id=\"instances-suggestions\">\n              {instancesSuggestions.map((instance, i) => (\n                <li>\n                  <button\n                    type=\"button\"\n                    class=\"plain5\"\n                    onClick={() => {\n                      submitInstance(instance);\n                    }}\n                  >\n                    {instance}\n                  </button>\n                </li>\n              ))}\n            </ul>\n          ) : (\n            <div id=\"instances-eg\">e.g. &ldquo;mastodon.social&rdquo;</div>\n          )}\n          {/* <datalist id=\"instances-list\">\n            {instancesList.map((instance) => (\n              <option value={instance} />\n            ))}\n          </datalist> */}\n        </label>\n        {uiState === 'error' && (\n          <p class=\"error\">\n            Failed to log in. Please try again or another instance.\n          </p>\n        )}\n        <div>\n          <button\n            disabled={\n              uiState === 'loading' || !instanceText || !selectedInstanceText\n            }\n          >\n            {selectedInstanceText\n              ? `Continue with ${selectedInstanceText}`\n              : 'Continue'}\n          </button>{' '}\n        </div>\n        <Loader hidden={uiState !== 'loading'} />\n        <hr />\n        {!DEFAULT_INSTANCE && (\n          <p>\n            <a href=\"https://joinmastodon.org/servers\" target=\"_blank\">\n              Don't have an account? Create one!\n            </a>\n          </p>\n        )}\n        <p>\n          <Link to=\"/\">Go home</Link>\n        </p>\n      </form>\n    </main>\n  );\n}\n\nexport default Login;\n","import './status.css';\n\nimport { Menu, MenuDivider, MenuHeader, MenuItem } from '@szhsin/react-menu';\nimport debounce from 'just-debounce-it';\nimport pRetry from 'p-retry';\nimport { memo } from 'preact/compat';\nimport {\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'preact/hooks';\nimport punycode from 'punycode';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { InView } from 'react-intersection-observer';\nimport { matchPath, useSearchParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport Avatar from '../components/avatar';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport MediaModal from '../components/media-modal';\nimport Menu2 from '../components/menu2';\nimport NameText from '../components/name-text';\nimport RelativeTime from '../components/relative-time';\nimport Status from '../components/status';\nimport { api } from '../utils/api';\nimport htmlContentLength from '../utils/html-content-length';\nimport shortenNumber from '../utils/shorten-number';\nimport states, {\n  getStatus,\n  saveStatus,\n  statusKey,\n  threadifyStatus,\n} from '../utils/states';\nimport statusPeek from '../utils/status-peek';\nimport { getCurrentAccount } from '../utils/store-utils';\nimport useScroll from '../utils/useScroll';\nimport useTitle from '../utils/useTitle';\n\nimport getInstanceStatusURL from './../utils/get-instance-status-url';\n\nconst LIMIT = 40;\nconst SUBCOMMENTS_OPEN_ALL_LIMIT = 10;\nconst MAX_WEIGHT = 5;\n\nlet cachedRepliesToggle = {};\nlet cachedStatusesMap = {};\nlet scrollPositions = {};\nfunction resetScrollPosition(id) {\n  delete cachedStatusesMap[id];\n  delete scrollPositions[id];\n}\n\nconst scrollIntoViewOptions = {\n  block: 'nearest',\n  inline: 'center',\n  behavior: 'smooth',\n};\n\n// Select all statuses except those inside collapsed details/summary\n// Hat-tip to @AmeliaBR@front-end.social\n// https://front-end.social/@AmeliaBR/109784776146144471\nconst STATUSES_SELECTOR =\n  '.status-link:not(details:not([open]) > summary ~ *, details:not([open]) > summary ~ * *), .status-focus:not(details:not([open]) > summary ~ *, details:not([open]) > summary ~ * *)';\n\nconst STATUS_URL_REGEX = /\\/s\\//i;\n\nfunction StatusPage(params) {\n  const { id } = params;\n  const { masto, instance } = api({ instance: params.instance });\n  const snapStates = useSnapshot(states);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const mediaParam = searchParams.get('media');\n  const mediaOnlyParam = searchParams.get('media-only');\n  const mediaIndex = parseInt(mediaParam || mediaOnlyParam, 10);\n  let showMedia = mediaIndex > 0;\n  const mediaStatusID = searchParams.get('mediaStatusID');\n  const mediaStatus = getStatus(mediaStatusID, instance);\n  if (mediaStatusID && !mediaStatus) {\n    showMedia = false;\n  }\n  const showMediaOnly = showMedia && !!mediaOnlyParam;\n\n  const sKey = statusKey(id, instance);\n  const [heroStatus, setHeroStatus] = useState(states.statuses[sKey]);\n  useEffect(() => {\n    if (states.statuses[sKey]) {\n      setHeroStatus(states.statuses[sKey]);\n    }\n  }, [sKey]);\n\n  const closeLink = useMemo(() => {\n    const { prevLocation } = states;\n    const pathname =\n      (prevLocation?.pathname || '') + (prevLocation?.search || '');\n    const matchStatusPath =\n      matchPath('/:instance/s/:id', pathname) || matchPath('/s/:id', pathname);\n    if (!pathname || matchStatusPath) {\n      return '/';\n    }\n    return pathname;\n  }, []);\n\n  useEffect(() => {\n    if (!heroStatus && showMedia) {\n      (async () => {\n        try {\n          const status = await masto.v1.statuses.$select(id).fetch();\n          saveStatus(status, instance);\n          setHeroStatus(status);\n        } catch (err) {\n          console.error(err);\n          alert('Unable to load post.');\n          location.hash = closeLink;\n        }\n      })();\n    }\n  }, [showMedia]);\n\n  const mediaAttachments = mediaStatusID\n    ? snapStates.statuses[statusKey(mediaStatusID, instance)]?.mediaAttachments\n    : heroStatus?.mediaAttachments;\n\n  const handleMediaClose = useCallback(() => {\n    if (\n      !window.matchMedia('(min-width: calc(40em + 350px))').matches &&\n      snapStates.prevLocation\n    ) {\n      history.back();\n    } else {\n      if (showMediaOnly) {\n        location.hash = closeLink;\n      } else {\n        searchParams.delete('media');\n        searchParams.delete('mediaStatusID');\n        setSearchParams(searchParams);\n      }\n    }\n  }, [showMediaOnly, closeLink, snapStates.prevLocation]);\n\n  useEffect(() => {\n    let timer = setTimeout(() => {\n      // carouselRef.current?.focus?.();\n      const $carousel = document.querySelector('.carousel');\n      if ($carousel) {\n        $carousel.focus();\n      }\n    }, 100);\n    return () => clearTimeout(timer);\n  }, [showMediaOnly]);\n\n  useEffect(() => {\n    const $deckContainers = document.querySelectorAll('.deck-container');\n    $deckContainers.forEach(($deckContainer) => {\n      $deckContainer.setAttribute('inert', '');\n    });\n    return () => {\n      $deckContainers.forEach(($deckContainer) => {\n        $deckContainer.removeAttribute('inert');\n      });\n    };\n  }, []);\n\n  return (\n    <div class=\"deck-backdrop\">\n      {showMedia ? (\n        mediaAttachments?.length ? (\n          <MediaModal\n            mediaAttachments={mediaAttachments}\n            statusID={mediaStatusID || id}\n            instance={instance}\n            lang={heroStatus?.language}\n            index={mediaIndex - 1}\n            onClose={handleMediaClose}\n          />\n        ) : (\n          <div class=\"media-modal-container loading\">\n            <Loader abrupt />\n          </div>\n        )\n      ) : (\n        <Link to={closeLink} />\n      )}\n      {!showMediaOnly && (\n        <StatusThread\n          id={id}\n          instance={params.instance}\n          closeLink={closeLink}\n        />\n      )}\n    </div>\n  );\n}\n\nfunction StatusParent(props) {\n  const { linkable, to, onClick, ...restProps } = props;\n  return linkable ? (\n    <Link class=\"status-link\" to={to} onClick={onClick} {...restProps} />\n  ) : (\n    <div class=\"status-focus\" tabIndex={0} {...restProps} />\n  );\n}\n\nfunction StatusThread({ id, closeLink = '/', instance: propInstance }) {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const mediaParam = searchParams.get('media');\n  const mediaStatusID = searchParams.get('mediaStatusID');\n  const showMedia = parseInt(mediaParam, 10) > 0;\n  const firstLoad = useRef(\n    !states.prevLocation &&\n      (history.length === 1 ||\n        ('navigation' in window && navigation?.entries?.()?.length === 1)),\n  );\n  const [viewMode, setViewMode] = useState(\n    searchParams.get('view') || firstLoad.current ? 'full' : null,\n  );\n  const translate = !!parseInt(searchParams.get('translate'));\n  const { masto, instance } = api({ instance: propInstance });\n  const {\n    masto: currentMasto,\n    instance: currentInstance,\n    authenticated,\n  } = api();\n  const sameInstance = instance === currentInstance;\n  const snapStates = useSnapshot(states);\n  const [statuses, setStatuses] = useState([]);\n  const [uiState, setUIState] = useState('default');\n  const heroStatusRef = useRef();\n  const sKey = statusKey(id, instance);\n  const totalDescendants = useRef(0);\n\n  const scrollableRef = useRef();\n  useEffect(() => {\n    scrollableRef.current?.focus();\n  }, []);\n  useEffect(() => {\n    const onScroll = debounce(() => {\n      // console.log('onScroll');\n      if (!scrollableRef.current) return;\n      const { scrollTop } = scrollableRef.current;\n      if (uiState !== 'loading') {\n        scrollPositions[id] = scrollTop;\n      }\n    }, 50);\n    scrollableRef.current?.addEventListener('scroll', onScroll, {\n      passive: true,\n    });\n    onScroll();\n    return () => {\n      onScroll.cancel();\n      scrollableRef.current?.removeEventListener('scroll', onScroll);\n    };\n  }, [id, uiState !== 'loading']);\n\n  const scrollOffsets = useRef();\n  const lastInitContextTS = useRef();\n  const initContext = ({ reloadHero } = {}) => {\n    console.debug('initContext', id);\n    setUIState('loading');\n    let heroTimer;\n\n    const cachedStatuses = cachedStatusesMap[id];\n    if (cachedStatuses) {\n      // Case 1: It's cached, let's restore them to make it snappy\n      const reallyCachedStatuses = cachedStatuses.filter(\n        (s) => states.statuses[sKey],\n        // Some are not cached in the global state, so we need to filter them out\n      );\n      setStatuses(reallyCachedStatuses);\n    } else {\n      // const heroIndex = statuses.findIndex((s) => s.id === id);\n      // if (heroIndex !== -1) {\n      //   // Case 2: It's in current statuses. Slice off all descendant statuses after the hero status to be safe\n      //   const slicedStatuses = statuses.slice(0, heroIndex + 1);\n      //   setStatuses(slicedStatuses);\n      // } else {\n      // Case 3: Not cached and not in statuses, let's start from scratch\n      setStatuses([{ id }]);\n      // }\n    }\n\n    (async () => {\n      const heroFetch = () =>\n        pRetry(() => masto.v1.statuses.$select(id).fetch(), {\n          retries: 4,\n        });\n      const contextFetch = pRetry(\n        () => masto.v1.statuses.$select(id).context.fetch(),\n        {\n          retries: 8,\n        },\n      );\n\n      const hasStatus = !!snapStates.statuses[sKey];\n      let heroStatus = snapStates.statuses[sKey];\n      if (hasStatus && !reloadHero) {\n        console.debug('Hero status is cached');\n      } else {\n        try {\n          heroStatus = await heroFetch();\n          saveStatus(heroStatus, instance);\n          // Give time for context to appear\n          await new Promise((resolve) => {\n            setTimeout(resolve, 100);\n          });\n        } catch (e) {\n          console.error(e);\n          setUIState('error');\n          return;\n        }\n      }\n\n      try {\n        const context = await contextFetch;\n        const { ancestors, descendants } = context;\n\n        totalDescendants.current = descendants?.length || 0;\n\n        const missingStatuses = new Set();\n        ancestors.forEach((status) => {\n          saveStatus(status, instance, {\n            skipThreading: true,\n          });\n          if (\n            status.inReplyToId &&\n            !ancestors.find((s) => s.id === status.inReplyToId)\n          ) {\n            missingStatuses.add(status.inReplyToId);\n          }\n        });\n        const ancestorsIsThread = ancestors.every(\n          (s) => s.account.id === heroStatus.account.id,\n        );\n        const nestedDescendants = [];\n        descendants.forEach((status) => {\n          saveStatus(status, instance, {\n            skipThreading: true,\n          });\n\n          if (\n            status.inReplyToId &&\n            !descendants.find((s) => s.id === status.inReplyToId) &&\n            status.inReplyToId !== heroStatus.id\n          ) {\n            missingStatuses.add(status.inReplyToId);\n          }\n\n          if (status.inReplyToAccountId === status.account.id) {\n            // If replying to self, it's part of the thread, level 1\n            nestedDescendants.push(status);\n          } else if (status.inReplyToId === heroStatus.id) {\n            // If replying to the hero status, it's a reply, level 1\n            nestedDescendants.push(status);\n          } else if (\n            !status.inReplyToAccountId &&\n            nestedDescendants.find((s) => s.id === status.inReplyToId) &&\n            status.account.id === heroStatus.account.id\n          ) {\n            // If replying to hero's own statuses, it's part of the thread, level 1\n            nestedDescendants.push(status);\n          } else {\n            // If replying to someone else, it's a reply to a reply, level 2\n            const parent = descendants.find((s) => s.id === status.inReplyToId);\n            if (parent) {\n              if (!parent.__replies) {\n                parent.__replies = [];\n              }\n              parent.__replies.push(status);\n            } else {\n              // If no parent, something is wrong\n              console.warn('No parent found for', status);\n            }\n          }\n        });\n\n        console.log({ ancestors, descendants, nestedDescendants });\n        if (missingStatuses.size) {\n          console.error('Missing statuses', [...missingStatuses]);\n        }\n\n        function expandReplies(_replies) {\n          return _replies?.map((_r) => ({\n            id: _r.id,\n            account: _r.account,\n            repliesCount: _r.repliesCount,\n            content: _r.content,\n            weight: calcStatusWeight(_r),\n            replies: expandReplies(_r.__replies),\n          }));\n        }\n\n        const allStatuses = [\n          ...ancestors.map((s) => ({\n            id: s.id,\n            ancestor: true,\n            isThread: ancestorsIsThread,\n            accountID: s.account.id,\n            account: s.account,\n            repliesCount: s.repliesCount,\n            weight: calcStatusWeight(s),\n          })),\n          {\n            id,\n            accountID: heroStatus.account.id,\n            weight: calcStatusWeight(heroStatus),\n          },\n          ...nestedDescendants.map((s) => ({\n            id: s.id,\n            account: s.account,\n            accountID: s.account.id,\n            descendant: true,\n            thread: s.account.id === heroStatus.account.id,\n            weight: calcStatusWeight(s),\n            replies: expandReplies(s.__replies),\n          })),\n        ];\n\n        setUIState('default');\n        scrollOffsets.current = {\n          offsetTop: heroStatusRef.current?.offsetTop,\n          scrollTop: scrollableRef.current?.scrollTop,\n        };\n\n        // Set limit to hero's index\n        const heroLimit = allStatuses.findIndex((s) => s.id === id);\n        if (heroLimit >= limit) {\n          setLimit(heroLimit + 1);\n        }\n\n        console.log({ allStatuses });\n        setStatuses(allStatuses);\n        cachedStatusesMap[id] = allStatuses;\n\n        // Let's threadify this one\n        // Note that all non-hero statuses will trigger saveStatus which will threadify them too\n        // By right, at this point, all descendant statuses should be cached\n        threadifyStatus(heroStatus, instance);\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n\n    lastInitContextTS.current = Date.now();\n\n    return () => {\n      clearTimeout(heroTimer);\n    };\n  };\n\n  useEffect(initContext, [id, masto]);\n\n  const [showRefresh, setShowRefresh] = useState(false);\n  useEffect(() => {\n    let interval = setInterval(() => {\n      const now = Date.now();\n      if (\n        lastInitContextTS.current &&\n        now - lastInitContextTS.current >= 60_000\n      ) {\n        setShowRefresh(true);\n      }\n    }, 60_000); // 1 minute\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n\n  useLayoutEffect(() => {\n    if (!statuses.length) return;\n    console.debug('STATUSES', statuses);\n    const scrollPosition = scrollPositions[id];\n    console.debug('scrollPosition', scrollPosition);\n    if (!!scrollPosition) {\n      console.debug('Case 1', {\n        id,\n        scrollPosition,\n      });\n      scrollableRef.current.scrollTop = scrollPosition;\n    } else if (scrollOffsets.current) {\n      const newScrollOffsets = {\n        offsetTop: heroStatusRef.current?.offsetTop,\n        scrollTop: scrollableRef.current?.scrollTop,\n      };\n      const newScrollTop =\n        newScrollOffsets.offsetTop -\n        scrollOffsets.current.offsetTop +\n        newScrollOffsets.scrollTop;\n      console.debug('Case 2', {\n        scrollOffsets: scrollOffsets.current,\n        newScrollOffsets,\n        newScrollTop,\n        statuses: [...statuses],\n      });\n      scrollableRef.current.scrollTop = newScrollTop;\n    } else if (statuses.length === 1) {\n      console.debug('Case 3', {\n        id,\n      });\n      scrollableRef.current.scrollTop = 0;\n    }\n\n    // RESET\n    scrollOffsets.current = null;\n  }, [statuses]);\n\n  useEffect(() => {\n    if (snapStates.reloadStatusPage <= 0) return;\n    // Delete the cache for the context\n    (async () => {\n      try {\n        const { instanceURL } = getCurrentAccount();\n        const contextURL = `https://${instanceURL}/api/v1/statuses/${id}/context`;\n        console.log('Clear cache', contextURL);\n        const apiCache = await caches.open('api');\n        await apiCache.delete(contextURL, { ignoreVary: true });\n\n        return initContext({\n          reloadHero: true,\n        });\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [snapStates.reloadStatusPage]);\n\n  useEffect(() => {\n    return () => {\n      // RESET\n      scrollPositions = {};\n      states.reloadStatusPage = 0;\n      cachedStatusesMap = {};\n      cachedRepliesToggle = {};\n      statusWeightCache.clear();\n    };\n  }, []);\n\n  const heroStatus = snapStates.statuses[sKey] || snapStates.statuses[id];\n  const heroDisplayName = useMemo(() => {\n    // Remove shortcodes from display name\n    if (!heroStatus) return '';\n    const { account } = heroStatus;\n    const div = document.createElement('div');\n    div.innerHTML = account.displayName;\n    return div.innerText.trim();\n  }, [heroStatus]);\n  const heroContentText = useMemo(() => {\n    if (!heroStatus) return '';\n    let text = statusPeek(heroStatus);\n    if (text.length > 64) {\n      // \"The title should ideally be less than 64 characters in length\"\n      // https://www.w3.org/Provider/Style/TITLE.html\n      text = text.slice(0, 64) + '…';\n    }\n    return text;\n  }, [heroStatus]);\n  useTitle(\n    heroDisplayName && heroContentText\n      ? `${heroDisplayName}: \"${heroContentText}\"`\n      : 'Status',\n    '/:instance?/s/:id',\n  );\n\n  const postInstance = useMemo(() => {\n    if (!heroStatus) return;\n    const { url } = heroStatus;\n    if (!url) return;\n    return new URL(url).hostname;\n  }, [heroStatus]);\n  const postSameInstance = useMemo(() => {\n    if (!postInstance) return;\n    return postInstance === instance;\n  }, [postInstance, instance]);\n\n  const [limit, setLimit] = useState(LIMIT);\n  const showMore = useMemo(() => {\n    // return number of statuses to show\n    return statuses.length - limit;\n  }, [statuses.length, limit]);\n\n  const hasDescendants = statuses.some((s) => s.descendant);\n  const ancestors = statuses.filter((s) => s.ancestor);\n\n  const [heroInView, setHeroInView] = useState(true);\n  const heroPointer = useMemo(() => {\n    // get top offset of heroStatus\n    if (!heroStatusRef.current || heroInView) return null;\n    const { top } = heroStatusRef.current.getBoundingClientRect();\n    return top > 0 ? 'down' : 'up';\n  }, [heroInView]);\n\n  useHotkeys(\n    'esc',\n    () => {\n      location.hash = closeLink;\n    },\n    {\n      // If media is open, esc to close media first\n      // Else close the status page\n      enabled: !showMedia,\n      ignoreEventWhen: (e) => {\n        const hasModal = !!document.querySelector('#modal-container > *');\n        return hasModal;\n      },\n    },\n  );\n  // For backspace, will always close both media and status page\n  useHotkeys('backspace', () => {\n    location.hash = closeLink;\n  });\n\n  useHotkeys('j', () => {\n    const activeStatus = document.activeElement.closest(\n      '.status-link, .status-focus',\n    );\n    const activeStatusRect = activeStatus?.getBoundingClientRect();\n    const allStatusLinks = Array.from(\n      scrollableRef.current.querySelectorAll(STATUSES_SELECTOR),\n    );\n    console.log({ allStatusLinks });\n    if (\n      activeStatus &&\n      activeStatusRect.top < scrollableRef.current.clientHeight &&\n      activeStatusRect.bottom > 0\n    ) {\n      const activeStatusIndex = allStatusLinks.indexOf(activeStatus);\n      let nextStatus = allStatusLinks[activeStatusIndex + 1];\n      if (nextStatus) {\n        nextStatus.focus();\n        nextStatus.scrollIntoView(scrollIntoViewOptions);\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostStatusLink = allStatusLinks.find((statusLink) => {\n        const statusLinkRect = statusLink.getBoundingClientRect();\n        return statusLinkRect.top >= 44 && statusLinkRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostStatusLink) {\n        topmostStatusLink.focus();\n        topmostStatusLink.scrollIntoView(scrollIntoViewOptions);\n      }\n    }\n  });\n\n  useHotkeys('k', () => {\n    const activeStatus = document.activeElement.closest(\n      '.status-link, .status-focus',\n    );\n    const activeStatusRect = activeStatus?.getBoundingClientRect();\n    const allStatusLinks = Array.from(\n      scrollableRef.current.querySelectorAll(STATUSES_SELECTOR),\n    );\n    if (\n      activeStatus &&\n      activeStatusRect.top < scrollableRef.current.clientHeight &&\n      activeStatusRect.bottom > 0\n    ) {\n      const activeStatusIndex = allStatusLinks.indexOf(activeStatus);\n      let prevStatus = allStatusLinks[activeStatusIndex - 1];\n      if (prevStatus) {\n        prevStatus.focus();\n        prevStatus.scrollIntoView(scrollIntoViewOptions);\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostStatusLink = allStatusLinks.find((statusLink) => {\n        const statusLinkRect = statusLink.getBoundingClientRect();\n        return statusLinkRect.top >= 44 && statusLinkRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostStatusLink) {\n        topmostStatusLink.focus();\n        topmostStatusLink.scrollIntoView(scrollIntoViewOptions);\n      }\n    }\n  });\n\n  // NOTE: I'm not sure if 'x' is the best shortcut for this, might change it later\n  // IDEA: x is for expand\n  useHotkeys('x', () => {\n    const activeStatus = document.activeElement.closest(\n      '.status-link, .status-focus',\n    );\n    if (activeStatus) {\n      const details = activeStatus.nextElementSibling;\n      if (details && details.tagName.toLowerCase() === 'details') {\n        details.open = !details.open;\n      }\n    }\n  });\n\n  const [reachTopPost, setReachTopPost] = useState(false);\n  // const { nearReachStart } = useScroll({\n  //   scrollableRef,\n  //   distanceFromStartPx: 16,\n  // });\n\n  const initialPageState = useRef(showMedia ? 'media+status' : 'status');\n\n  const handleMediaClick = useCallback(\n    (e, i, media, status) => {\n      e.preventDefault();\n      e.stopPropagation();\n      setSearchParams({\n        media: i + 1,\n        mediaStatusID: status.id,\n      });\n    },\n    [id],\n  );\n\n  const handleStatusLinkClick = useCallback((e, status) => {\n    resetScrollPosition(status.id);\n  }, []);\n\n  useEffect(() => {\n    let timer;\n    if (mediaStatusID && showMedia) {\n      timer = setTimeout(() => {\n        const status = scrollableRef.current?.querySelector(\n          `.status-link[href*=\"/${mediaStatusID}\"]`,\n        );\n        if (status) {\n          status.scrollIntoView(scrollIntoViewOptions);\n        }\n      }, 400); // After CSS transition\n    }\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [mediaStatusID, showMedia]);\n\n  const renderStatus = useCallback(\n    (status, i) => {\n      const {\n        id: statusID,\n        ancestor,\n        isThread,\n        descendant,\n        thread,\n        replies,\n        repliesCount,\n        weight,\n      } = status;\n      const isHero = statusID === id;\n      const isLinkable = isThread || ancestor;\n\n      return (\n        <li\n          key={statusID}\n          ref={isHero ? heroStatusRef : null}\n          class={`${ancestor ? 'ancestor' : ''} ${\n            descendant ? 'descendant' : ''\n          } ${thread ? 'thread' : ''} ${isHero ? 'hero' : ''}`}\n        >\n          {isHero ? (\n            <>\n              <InView\n                threshold={0.1}\n                onChange={(inView) => {\n                  queueMicrotask(() => {\n                    requestAnimationFrame(() => {\n                      setHeroInView(inView);\n                    });\n                  });\n                }}\n                class=\"status-focus\"\n                tabIndex={0}\n              >\n                <Status\n                  statusID={statusID}\n                  instance={instance}\n                  withinContext\n                  size=\"l\"\n                  enableTranslate\n                  forceTranslate={translate}\n                />\n              </InView>\n              {uiState !== 'loading' && !authenticated ? (\n                <div class=\"post-status-banner\">\n                  <p>\n                    You're not logged in. Interactions (reply, boost, etc) are\n                    not possible.\n                  </p>\n                  <Link to=\"/login\" class=\"button\">\n                    Log in\n                  </Link>\n                </div>\n              ) : (\n                !sameInstance && (\n                  <div class=\"post-status-banner\">\n                    <p>\n                      This post is from another instance (<b>{instance}</b>).\n                      Interactions (reply, boost, etc) are not possible.\n                    </p>\n                    <button\n                      type=\"button\"\n                      disabled={uiState === 'loading'}\n                      onClick={() => {\n                        setUIState('loading');\n                        (async () => {\n                          try {\n                            const results = await currentMasto.v2.search.fetch({\n                              q: heroStatus.url,\n                              type: 'statuses',\n                              resolve: true,\n                              limit: 1,\n                            });\n                            if (results.statuses.length) {\n                              const status = results.statuses[0];\n                              location.hash = currentInstance\n                                ? `/${currentInstance}/s/${status.id}`\n                                : `/s/${status.id}`;\n                            } else {\n                              throw new Error('No results');\n                            }\n                          } catch (e) {\n                            setUIState('default');\n                            alert('Error: ' + e);\n                            console.error(e);\n                          }\n                        })();\n                      }}\n                    >\n                      <Icon icon=\"transfer\" /> Switch to my instance to enable\n                      interactions\n                    </button>\n                  </div>\n                )\n              )}\n            </>\n          ) : (\n            <StatusParent\n              linkable={isLinkable}\n              to={instance ? `/${instance}/s/${statusID}` : `/s/${statusID}`}\n              onClick={() => {\n                resetScrollPosition(statusID);\n              }}\n            >\n              {/* <Link\n              class=\"status-link\"\n              to={instance ? `/${instance}/s/${statusID}` : `/s/${statusID}`}\n              onClick={() => {\n                resetScrollPosition(statusID);\n              }}\n            > */}\n              {i === 0 && ancestor ? (\n                <InView\n                  threshold={0.5}\n                  onChange={(inView) => {\n                    queueMicrotask(() => {\n                      requestAnimationFrame(() => {\n                        setReachTopPost(inView);\n                      });\n                    });\n                  }}\n                >\n                  <Status\n                    statusID={statusID}\n                    instance={instance}\n                    withinContext\n                    size={thread || ancestor ? 'm' : 's'}\n                    enableTranslate\n                    onMediaClick={handleMediaClick}\n                    onStatusLinkClick={handleStatusLinkClick}\n                  />\n                </InView>\n              ) : (\n                <Status\n                  statusID={statusID}\n                  instance={instance}\n                  withinContext\n                  size={thread || ancestor ? 'm' : 's'}\n                  enableTranslate\n                  onMediaClick={handleMediaClick}\n                  onStatusLinkClick={handleStatusLinkClick}\n                  showActionsBar={!!descendant}\n                />\n              )}\n              {ancestor && repliesCount > 1 && (\n                <div class=\"replies-link\">\n                  <Icon icon=\"comment2\" />{' '}\n                  <span title={repliesCount}>\n                    {shortenNumber(repliesCount)}\n                  </span>\n                </div>\n              )}{' '}\n              {/* {replies?.length > LIMIT && (\n                        <div class=\"replies-link\">\n                          <Icon icon=\"comment\" />{' '}\n                          <span title={replies.length}>\n                            {shortenNumber(replies.length)}\n                          </span>\n                        </div>\n                      )} */}\n            </StatusParent>\n            // </Link>\n          )}\n          {descendant && replies?.length > 0 && (\n            <SubComments\n              instance={instance}\n              replies={replies}\n              hasParentThread={thread}\n              level={1}\n              accWeight={weight}\n              openAll={totalDescendants.current < SUBCOMMENTS_OPEN_ALL_LIMIT}\n              parentLink={{\n                to: instance ? `/${instance}/s/${statusID}` : `/s/${statusID}`,\n                onClick: () => resetScrollPosition(statusID),\n              }}\n            />\n          )}\n          {uiState === 'loading' &&\n            isHero &&\n            !!heroStatus?.repliesCount &&\n            !hasDescendants && (\n              <div class=\"status-loading\">\n                <Loader abrupt={heroStatus.repliesCount >= 3} />\n              </div>\n            )}\n          {uiState === 'error' &&\n            isHero &&\n            !!heroStatus?.repliesCount &&\n            !hasDescendants && (\n              <div class=\"status-error\">\n                Unable to load replies.\n                <br />\n                <button\n                  type=\"button\"\n                  class=\"plain\"\n                  onClick={() => {\n                    states.reloadStatusPage++;\n                  }}\n                >\n                  Try again\n                </button>\n              </div>\n            )}\n        </li>\n      );\n    },\n    [\n      id,\n      instance,\n      uiState,\n      authenticated,\n      sameInstance,\n      translate,\n      handleMediaClick,\n      handleStatusLinkClick,\n      hasDescendants,\n    ],\n  );\n\n  const prevLocationIsStatusPage = useMemo(() => {\n    // Navigation API\n    if ('navigation' in window && navigation?.entries) {\n      const prevEntry = navigation.entries()[navigation.currentEntry.index - 1];\n      if (prevEntry?.url) {\n        return STATUS_URL_REGEX.test(prevEntry.url);\n      }\n    }\n    return STATUS_URL_REGEX.test(states.prevLocation?.pathname);\n  }, [sKey]);\n\n  const moreStatusesKeys = useMemo(() => {\n    if (!showMore) return [];\n    const ids = [];\n    function getIDs(status) {\n      ids.push(status.id);\n      if (status.replies) {\n        status.replies.forEach(getIDs);\n      }\n    }\n    statuses.slice(limit).forEach(getIDs);\n    return ids.map((id) => statusKey(id, instance));\n  }, [showMore, statuses, limit, instance]);\n\n  const statusesList = useMemo(\n    () => statuses.slice(0, limit).map(renderStatus),\n    [statuses, limit, renderStatus],\n  );\n\n  // If there's spoiler in hero status, auto-expand it\n  useEffect(() => {\n    let timer = setTimeout(() => {\n      if (!heroStatusRef.current) return;\n      const spoilerButton = heroStatusRef.current.querySelector(\n        '.spoiler-button:not(.spoiling), .spoiler-media-button:not(.spoiling)',\n      );\n      if (spoilerButton) spoilerButton.click();\n    }, 1000);\n    return () => clearTimeout(timer);\n  }, [id]);\n\n  return (\n    <div\n      tabIndex=\"-1\"\n      ref={scrollableRef}\n      class={`status-deck deck contained ${\n        statuses.length > 1 ? 'padded-bottom' : ''\n      } ${\n        initialPageState.current === 'status' && !firstLoad.current\n          ? 'slide-in'\n          : ''\n      } ${viewMode ? `deck-view-${viewMode}` : ''}`}\n      onAnimationEnd={(e) => {\n        // Fix the bounce effect when switching viewMode\n        // `slide-in` animation kicks in when switching viewMode\n        if (initialPageState.current === 'status') {\n          // e.target.classList.remove('slide-in');\n          initialPageState.current = null;\n        }\n      }}\n    >\n      <header\n        class={`${uiState === 'loading' ? 'loading' : ''}`}\n        onDblClick={(e) => {\n          // reload statuses\n          states.reloadStatusPage++;\n        }}\n      >\n        {/* <div>\n            <Link class=\"button plain deck-close\" href={closeLink}>\n              <Icon icon=\"chevron-left\" size=\"xl\" />\n            </Link>\n          </div> */}\n        <div class=\"header-grid header-grid-2\">\n          <h1>\n            {prevLocationIsStatusPage && (\n              <button\n                type=\"button\"\n                class=\"plain deck-back\"\n                onClick={() => {\n                  history.back();\n                }}\n              >\n                <Icon icon=\"chevron-left\" size=\"xl\" />\n              </button>\n            )}\n            {!heroInView && heroStatus && uiState !== 'loading' ? (\n              <>\n                <span class=\"hero-heading\">\n                  <NameText\n                    account={heroStatus.account}\n                    instance={instance}\n                    showAvatar\n                    short\n                  />{' '}\n                  <span class=\"insignificant\">\n                    &bull;{' '}\n                    <RelativeTime\n                      datetime={heroStatus.createdAt}\n                      format=\"micro\"\n                    />\n                  </span>\n                </span>{' '}\n                <button\n                  type=\"button\"\n                  class=\"ancestors-indicator light small\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    heroStatusRef.current.scrollIntoView({\n                      behavior: 'smooth',\n                      block: 'start',\n                    });\n                  }}\n                  title=\"Go to main post\"\n                >\n                  <Icon\n                    icon={heroPointer === 'down' ? 'arrow-down' : 'arrow-up'}\n                  />\n                </button>\n              </>\n            ) : (\n              <>\n                Post{' '}\n                <button\n                  type=\"button\"\n                  class=\"ancestors-indicator light small\"\n                  onClick={(e) => {\n                    // Scroll to top\n                    e.preventDefault();\n                    e.stopPropagation();\n                    scrollableRef.current.scrollTo({\n                      top: 0,\n                      behavior: 'smooth',\n                    });\n                  }}\n                  hidden={!ancestors.length || reachTopPost}\n                  title={`${ancestors.length} posts above ‒ Go to top`}\n                >\n                  <Icon icon=\"arrow-up\" />\n                  {ancestors\n                    .filter(\n                      (a, i, arr) =>\n                        arr.findIndex((b) => b.accountID === a.accountID) === i,\n                    )\n                    .slice(0, 3)\n                    .map((ancestor) => (\n                      <Avatar\n                        key={ancestor.account.id}\n                        url={ancestor.account.avatar}\n                        alt={ancestor.account.displayName}\n                      />\n                    ))}\n                  {/* <Icon icon=\"comment\" />{' '} */}\n                  {ancestors.length > 3 && (\n                    <>\n                      {' '}\n                      <span class=\"insignificant\">\n                        {shortenNumber(ancestors.length)}\n                      </span>\n                    </>\n                  )}\n                </button>\n              </>\n            )}\n          </h1>\n          <div class=\"header-side\">\n            <button\n              type=\"button\"\n              class=\"plain4 button-switch-view\"\n              style={{\n                display: viewMode === 'full' ? '' : 'none',\n              }}\n              onClick={() => {\n                setViewMode(null);\n                searchParams.delete('media');\n                searchParams.delete('media-only');\n                searchParams.delete('view');\n                setSearchParams(searchParams);\n              }}\n              title=\"Switch to Side Peek view\"\n            >\n              <Icon icon=\"layout4\" size=\"l\" />\n            </button>\n            {showRefresh && (\n              <button\n                type=\"button\"\n                class=\"plain button-refresh\"\n                onClick={() => {\n                  states.reloadStatusPage++;\n                  setShowRefresh(false);\n                }}\n              >\n                <Icon icon=\"refresh\" size=\"l\" />\n              </button>\n            )}\n            <Menu2\n              align=\"end\"\n              portal={{\n                // Need this, else the menu click will cause scroll jump\n                target: scrollableRef.current,\n              }}\n              menuButton={\n                <button type=\"button\" class=\"button plain4\">\n                  <Icon icon=\"more\" alt=\"Actions\" size=\"xl\" />\n                </button>\n              }\n            >\n              <MenuItem\n                disabled={uiState === 'loading'}\n                onClick={() => {\n                  states.reloadStatusPage++;\n                }}\n              >\n                <Icon icon=\"refresh\" />\n                <span>Refresh</span>\n              </MenuItem>\n              <MenuItem\n                className=\"menu-switch-view\"\n                onClick={() => {\n                  setViewMode(viewMode === 'full' ? null : 'full');\n                  searchParams.delete('media');\n                  searchParams.delete('media-only');\n                  if (viewMode === 'full') {\n                    searchParams.delete('view');\n                  } else {\n                    searchParams.set('view', 'full');\n                  }\n                  setSearchParams(searchParams);\n                }}\n              >\n                <Icon\n                  icon={\n                    {\n                      '': 'layout5',\n                      full: 'layout4',\n                    }[viewMode || '']\n                  }\n                />\n                <span>\n                  Switch to {viewMode === 'full' ? 'Side Peek' : 'Full'} view\n                </span>\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  // Click all buttons with class .spoiler but not .spoiling\n                  const buttons = Array.from(\n                    scrollableRef.current.querySelectorAll(\n                      '.spoiler-button:not(.spoiling), .spoiler-media-button:not(.spoiling)',\n                    ),\n                  );\n                  buttons.forEach((button) => {\n                    button.click();\n                  });\n                }}\n              >\n                <Icon icon=\"eye-open\" /> <span>Show all sensitive content</span>\n              </MenuItem>\n              <MenuDivider />\n              <MenuHeader className=\"plain\">Experimental</MenuHeader>\n              <MenuItem\n                disabled={!postInstance || postSameInstance}\n                onClick={() => {\n                  const statusURL = getInstanceStatusURL(heroStatus.url);\n                  if (statusURL) {\n                    location.hash = statusURL;\n                  } else {\n                    alert('Unable to switch');\n                  }\n                }}\n              >\n                <Icon icon=\"transfer\" />\n                <small class=\"menu-double-lines\">\n                  Switch to post's instance\n                  {postInstance ? (\n                    <>\n                      {' '}\n                      (<b>{punycode.toUnicode(postInstance)}</b>)\n                    </>\n                  ) : (\n                    ''\n                  )}\n                </small>\n              </MenuItem>\n            </Menu2>\n            <Link class=\"button plain deck-close\" to={closeLink}>\n              <Icon icon=\"x\" size=\"xl\" />\n            </Link>\n          </div>\n        </div>\n      </header>\n      {!!statuses.length && heroStatus ? (\n        <ul\n          class={`timeline flat contextual grow ${\n            uiState === 'loading' ? 'loading' : ''\n          }`}\n        >\n          {statusesList}\n          {showMore > 0 && (\n            <li>\n              <button\n                type=\"button\"\n                class=\"plain block show-more\"\n                disabled={uiState === 'loading'}\n                onClick={() => setLimit((l) => l + LIMIT)}\n                style={{ marginBlockEnd: '6em' }}\n                data-state-post-ids={moreStatusesKeys.join(' ')}\n              >\n                <div class=\"ib avatars-bunch\">\n                  {/* show avatars for first 5 statuses */}\n                  {statuses.slice(limit, limit + 5).map((status) => (\n                    <Avatar\n                      key={status.id}\n                      url={status.account.avatarStatic}\n                      // title={`${status.avatar.displayName} (@${status.avatar.acct})`}\n                    />\n                  ))}\n                </div>{' '}\n                <div class=\"ib\">\n                  Show more&hellip;{' '}\n                  <span class=\"tag\">\n                    {showMore > LIMIT ? `${LIMIT}+` : showMore}\n                  </span>\n                </div>\n              </button>\n            </li>\n          )}\n        </ul>\n      ) : (\n        <>\n          {uiState === 'loading' && (\n            <ul class=\"timeline flat contextual grow loading\">\n              <li>\n                <Status skeleton size=\"l\" />\n              </li>\n            </ul>\n          )}\n          {uiState === 'error' && (\n            <p class=\"ui-state\">\n              Unable to load post\n              <br />\n              <br />\n              <button\n                type=\"button\"\n                onClick={() => {\n                  states.reloadStatusPage++;\n                }}\n              >\n                Try again\n              </button>\n            </p>\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n\nfunction SubComments({\n  replies,\n  instance,\n  hasParentThread,\n  level,\n  accWeight,\n  openAll,\n  parentLink,\n}) {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  // Total comments count, including sub-replies\n  const diveDeep = (replies) => {\n    return replies.reduce((acc, reply) => {\n      const { repliesCount, replies } = reply;\n      const count = replies?.length || repliesCount;\n      return acc + count + diveDeep(replies || []);\n    }, 0);\n  };\n  const totalComments = replies.length + diveDeep(replies);\n  const sameCount = replies.length === totalComments;\n\n  // Get the first 3 accounts, unique by id\n  const accounts = replies\n    .map((r) => r.account)\n    .filter((a, i, arr) => arr.findIndex((b) => b.id === a.id) === i)\n    .slice(0, 3);\n\n  const totalWeight = useMemo(() => {\n    return replies?.reduce((acc, reply) => {\n      return acc + reply?.weight;\n    }, accWeight);\n  }, [accWeight, replies?.length]);\n\n  let open = false;\n  if (openAll) {\n    open = true;\n  } else if (totalWeight <= MAX_WEIGHT) {\n    open = true;\n  } else if (!hasParentThread && totalComments === 1) {\n    const shortReply = calcStatusWeight(replies[0]) < 2;\n    if (shortReply) open = true;\n  }\n  const openBefore = cachedRepliesToggle[replies[0].id];\n\n  const handleMediaClick = useCallback((e, i, media, status) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setSearchParams({\n      media: i + 1,\n      mediaStatusID: status.id,\n    });\n  }, []);\n\n  const detailsRef = useRef();\n  useLayoutEffect(() => {\n    function handleScroll(e) {\n      e.target.dataset.scrollLeft = e.target.scrollLeft;\n    }\n    detailsRef.current?.addEventListener('scroll', handleScroll, {\n      passive: true,\n    });\n    return () => {\n      detailsRef.current?.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n\n  return (\n    <details\n      ref={detailsRef}\n      class=\"replies\"\n      open={openBefore || open}\n      onToggle={(e) => {\n        const { open } = e.target;\n        // use first reply as ID\n        cachedRepliesToggle[replies[0].id] = open;\n      }}\n      style={{\n        '--comments-level': level,\n      }}\n      data-comments-level={level}\n      data-comments-level-overflow={level > 4}\n    >\n      <summary class=\"replies-summary\" hidden={open}>\n        <span class=\"avatars\">\n          {accounts.map((a) => (\n            <Avatar\n              key={a.id}\n              url={a.avatarStatic}\n              title={`${a.displayName} @${a.username}`}\n              squircle={a?.bot}\n            />\n          ))}\n        </span>\n        <span class=\"replies-counts\">\n          <b>\n            <span title={replies.length}>{shortenNumber(replies.length)}</span>{' '}\n            repl\n            {replies.length === 1 ? 'y' : 'ies'}\n          </b>\n          {!sameCount && totalComments > 1 && (\n            <>\n              {' '}\n              &middot;{' '}\n              <span>\n                <span title={totalComments}>\n                  {shortenNumber(totalComments)}\n                </span>{' '}\n                comment\n                {totalComments === 1 ? '' : 's'}\n              </span>\n            </>\n          )}\n        </span>\n        <Icon icon=\"chevron-down\" class=\"replies-summary-chevron\" />\n        {!!parentLink && (\n          <Link\n            class=\"replies-parent-link\"\n            to={parentLink.to}\n            onClick={parentLink.onClick}\n            title=\"View post with its replies\"\n          >\n            &raquo;\n          </Link>\n        )}\n      </summary>\n      <ul>\n        {replies.map((r) => (\n          <li key={r.id}>\n            {/* <Link\n              class=\"status-link\"\n              to={instance ? `/${instance}/s/${r.id}` : `/s/${r.id}`}\n              onClick={() => {\n                resetScrollPosition(r.id);\n              }}\n            > */}\n            <div class=\"status-focus\" tabIndex={0}>\n              <Status\n                statusID={r.id}\n                instance={instance}\n                withinContext\n                size=\"s\"\n                enableTranslate\n                onMediaClick={handleMediaClick}\n                showActionsBar\n              />\n              {!r.replies?.length && r.repliesCount > 0 && (\n                <div class=\"replies-link\">\n                  <Icon icon=\"comment2\" />{' '}\n                  <span title={r.repliesCount}>\n                    {shortenNumber(r.repliesCount)}\n                  </span>\n                </div>\n              )}\n            </div>\n            {/* </Link> */}\n            {r.replies?.length && (\n              <SubComments\n                instance={instance}\n                replies={r.replies}\n                level={level + 1}\n                accWeight={!open ? r.weight : totalWeight}\n                openAll={openAll}\n                parentLink={{\n                  to: instance ? `/${instance}/s/${r.id}` : `/s/${r.id}`,\n                  onClick: () => {\n                    resetScrollPosition(r.id);\n                  },\n                }}\n              />\n            )}\n          </li>\n        ))}\n      </ul>\n    </details>\n  );\n}\n\nconst MEDIA_VIRTUAL_LENGTH = 140;\nconst POLL_VIRTUAL_LENGTH = 35;\nconst CARD_VIRTUAL_LENGTH = 70;\nconst WEIGHT_SEGMENT = 140;\nconst statusWeightCache = new Map();\nfunction calcStatusWeight(status) {\n  const cachedWeight = statusWeightCache.get(status.id);\n  if (cachedWeight) return cachedWeight;\n  const { spoilerText, content, mediaAttachments, poll, card } = status;\n  const length = htmlContentLength(spoilerText + content);\n  const mediaLength = mediaAttachments?.length ? MEDIA_VIRTUAL_LENGTH : 0;\n  const pollLength = (poll?.options?.length || 0) * POLL_VIRTUAL_LENGTH;\n  const cardLength =\n    card && (mediaAttachments?.length || poll?.options?.length)\n      ? 0\n      : CARD_VIRTUAL_LENGTH;\n  const totalLength = length + mediaLength + pollLength + cardLength;\n  const weight = totalLength / WEIGHT_SEGMENT;\n  statusWeightCache.set(status.id, weight);\n  return weight;\n}\n\nexport default memo(StatusPage);\n","import { useParams } from 'react-router-dom';\n\nimport Status from './status';\n\nexport default function StatusRoute() {\n  const params = useParams();\n  const { id, instance } = params;\n  return <Status id={id} instance={instance} />;\n}\n","export default \"__VITE_ASSET__W5CngKHO__\"","export default \"__VITE_ASSET__vmqRZ5q5__\"","export default \"__VITE_ASSET__DFAo1Udm__\"","export default \"__VITE_ASSET__D2_o1n6___\"","export default \"__VITE_ASSET__ySLnBMku__\"","export default \"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20xml:space='preserve'%20fill-rule='evenodd'%20stroke-linejoin='round'%20stroke-miterlimit='2'%20clip-rule='evenodd'%20viewBox='0%200%20102%2028'%3e%3cpath%20fill='none'%20d='M0%200h101.5v27.5H0z'/%3e%3cg%20fill-rule='nonzero'%3e%3cpath%20fill='url(%23a)'%20d='M2.32%2021.85c1.4%200%202.21-.85%202.21-2.3v-4.64H8.5c4.45%200%207.54-2.9%207.54-7.24%200-4.35-2.98-7.24-7.32-7.24h-6.4C.93.43.11%201.28.11%202.73v16.82c0%201.45.82%202.3%202.21%202.3Zm2.21-10.4V3.94h3c2.54%200%204%201.34%204%203.75s-1.47%203.76-4%203.76h-3Z'/%3e%3cpath%20fill='url(%23b)'%20d='M20.52%2021.88c1.25%200%202.13-.76%202.13-2.23v-7.04c0-2.07%201.2-3.49%203.21-3.49%201.95%200%202.95%201.23%202.95%203.25v7.28c0%201.47.89%202.23%202.13%202.23%201.26%200%202.14-.76%202.14-2.23v-8.18c0-3.64-1.99-5.9-5.48-5.9-2.38%200-4.1%201.12-4.93%203.1h-.09V2.3c0-1.38-.78-2.2-2.1-2.2-1.31%200-2.1.82-2.1%202.2v17.34c0%201.47.9%202.23%202.14%202.23Z'/%3e%3cpath%20fill='url(%23c)'%20d='M40.45%2021.82c1.96%200%203.93-.98%204.8-2.65h.1v.8c.08%201.27.89%201.91%202.05%201.91%201.21%200%202.08-.73%202.08-2.15v-8.95c0-3.17-2.63-5.25-6.65-5.25-3.26%200-5.78%201.16-6.5%203.04-.15.32-.23.63-.23.96%200%20.97.75%201.64%201.79%201.64.69%200%201.23-.26%201.7-.79.95-1.23%201.74-1.65%203.04-1.65%201.62%200%202.64.85%202.64%202.31v1.04l-3.95.24c-3.93.23-6.13%201.88-6.13%204.74%200%202.83%202.27%204.76%205.26%204.76Zm1.4-3.09c-1.43%200-2.4-.73-2.4-1.9%200-1.12.91-1.83%202.51-1.95l3.31-.2v1.14c0%201.7-1.54%202.91-3.41%202.91Z'/%3e%3cpath%20fill='url(%23d)'%20d='M54.37%2021.88c1.26%200%202.14-.76%202.14-2.23v-7.09c0-2.03%201.21-3.44%203.13-3.44s2.89%201.17%202.89%203.22v7.31c0%201.47.88%202.23%202.14%202.23%201.24%200%202.13-.76%202.13-2.23v-8.2c0-3.68-1.96-5.87-5.45-5.87-2.41%200-4%201.07-4.83%203.01h-.09v-.87c0-1.35-.85-2.17-2.14-2.17-1.28%200-2.06.82-2.06%202.15v11.95c0%201.47.9%202.23%202.14%202.23Z'/%3e%3cpath%20fill='url(%23e)'%20d='M71.65%2027.17c1.26%200%202.14-.76%202.14-2.23v-6h.09a5.15%205.15%200%200%200%204.88%202.88c3.92%200%206.35-3.05%206.35-8.1%200-5.07-2.44-8.1-6.43-8.1a5.12%205.12%200%200%200-4.86%202.99h-.09v-.85c0-1.45-.88-2.21-2.1-2.21-1.24%200-2.11.76-2.11%202.2v17.2c0%201.46.89%202.22%202.13%202.22Zm5.6-8.8c-2.1%200-3.47-1.8-3.47-4.65%200-2.81%201.37-4.67%203.47-4.67%202.14%200%203.49%201.83%203.49%204.67%200%202.86-1.35%204.66-3.5%204.66Z'/%3e%3cpath%20fill='url(%23f)'%20d='M89.61%2027.39c3.44%200%205.26-1.5%206.73-5.55l4.81-13.1a4%204%200%200%200%20.24-1.26c0-1.13-.85-1.93-2.08-1.93-1.1%200-1.71.51-2.07%201.7l-3.4%2010.9h-.08L90.35%207.28c-.36-1.25-.94-1.73-2.07-1.73-1.26%200-2.21.83-2.21%201.99%200%20.35.09.82.25%201.26l5%2013.21-.21.56c-.52%201.1-1.32%201.42-2.07%201.42l-.75-.01c-.96%200-1.56.54-1.56%201.4%200%201.29%201%202%202.88%202Z'/%3e%3c/g%3e%3cdefs%3e%3cradialGradient%20id='a'%20cx='0'%20cy='0'%20r='1'%20gradientTransform='rotate(28.51%20.06%20.22)%20scale(57.6252)'%20gradientUnits='userSpaceOnUse'%3e%3cstop%20offset='0'%20stop-color='%23a4bff7'/%3e%3cstop%20offset='1'%20stop-color='%236081e6'/%3e%3c/radialGradient%3e%3cradialGradient%20id='b'%20cx='0'%20cy='0'%20r='1'%20gradientTransform='rotate(28.51%20.06%20.22)%20scale(57.6252)'%20gradientUnits='userSpaceOnUse'%3e%3cstop%20offset='0'%20stop-color='%23a4bff7'/%3e%3cstop%20offset='1'%20stop-color='%236081e6'/%3e%3c/radialGradient%3e%3cradialGradient%20id='c'%20cx='0'%20cy='0'%20r='1'%20gradientTransform='rotate(28.51%20.06%20.22)%20scale(57.6252)'%20gradientUnits='userSpaceOnUse'%3e%3cstop%20offset='0'%20stop-color='%23a4bff7'/%3e%3cstop%20offset='1'%20stop-color='%236081e6'/%3e%3c/radialGradient%3e%3cradialGradient%20id='d'%20cx='0'%20cy='0'%20r='1'%20gradientTransform='rotate(28.51%20.06%20.22)%20scale(57.6252)'%20gradientUnits='userSpaceOnUse'%3e%3cstop%20offset='0'%20stop-color='%23a4bff7'/%3e%3cstop%20offset='1'%20stop-color='%236081e6'/%3e%3c/radialGradient%3e%3cradialGradient%20id='e'%20cx='0'%20cy='0'%20r='1'%20gradientTransform='rotate(28.51%20.06%20.22)%20scale(57.6252)'%20gradientUnits='userSpaceOnUse'%3e%3cstop%20offset='0'%20stop-color='%23a4bff7'/%3e%3cstop%20offset='1'%20stop-color='%236081e6'/%3e%3c/radialGradient%3e%3cradialGradient%20id='f'%20cx='0'%20cy='0'%20r='1'%20gradientTransform='rotate(28.51%20.06%20.22)%20scale(57.6252)'%20gradientUnits='userSpaceOnUse'%3e%3cstop%20offset='0'%20stop-color='%23a4bff7'/%3e%3cstop%20offset='1'%20stop-color='%236081e6'/%3e%3c/radialGradient%3e%3c/defs%3e%3c/svg%3e\"","import './welcome.css';\n\nimport boostsCarouselUrl from '../assets/features/boosts-carousel.jpg';\nimport groupedNotificationsUrl from '../assets/features/grouped-notifications.jpg';\nimport multiColumnUrl from '../assets/features/multi-column.jpg';\nimport multiHashtagTimelineUrl from '../assets/features/multi-hashtag-timeline.jpg';\nimport nestedCommentsThreadUrl from '../assets/features/nested-comments-thread.jpg';\nimport logoText from '../assets/logo-text.svg';\nimport logo from '../assets/logo.svg';\n\nimport Link from '../components/link';\nimport states from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst {\n  PHANPY_DEFAULT_INSTANCE: DEFAULT_INSTANCE,\n  PHANPY_WEBSITE: WEBSITE,\n  PHANPY_PRIVACY_POLICY_URL: PRIVACY_POLICY_URL,\n  PHANPY_DEFAULT_INSTANCE_REGISTRATION_URL: DEFAULT_INSTANCE_REGISTRATION_URL,\n} = import.meta.env;\nconst appSite = WEBSITE\n  ? WEBSITE.replace(/https?:\\/\\//g, '').replace(/\\/$/, '')\n  : null;\nconst appVersion = __BUILD_TIME__\n  ? `${__BUILD_TIME__.slice(0, 10).replace(/-/g, '.')}${\n      __COMMIT_HASH__ ? `.${__COMMIT_HASH__}` : ''\n    }`\n  : null;\n\nfunction Welcome() {\n  useTitle(null, ['/', '/welcome']);\n  return (\n    <main id=\"welcome\">\n      <div class=\"hero-container\">\n        <div class=\"hero-content\">\n          <h1>\n            <img\n              src={logo}\n              alt=\"\"\n              width=\"160\"\n              height=\"160\"\n              style={{\n                aspectRatio: '1/1',\n                marginBlockEnd: -16,\n              }}\n            />\n            <img src={logoText} alt=\"Phanpy\" width=\"200\" />\n          </h1>\n          <p class=\"desc\">A minimalistic opinionated Mastodon web client.</p>\n          <p>\n            <Link\n              to={\n                DEFAULT_INSTANCE\n                  ? `/login?instance=${DEFAULT_INSTANCE}&submit=1`\n                  : '/login'\n              }\n              class=\"button\"\n            >\n              {DEFAULT_INSTANCE ? 'Log in' : 'Log in with Mastodon'}\n            </Link>\n          </p>\n          {DEFAULT_INSTANCE && DEFAULT_INSTANCE_REGISTRATION_URL && (\n            <p>\n              <a href={DEFAULT_INSTANCE_REGISTRATION_URL} class=\"button plain5\">\n                Sign up\n              </a>\n            </p>\n          )}\n          {!DEFAULT_INSTANCE && (\n            <p class=\"insignificant\">\n              <small>\n                Connect your existing Mastodon/Fediverse account.\n                <br />\n                Your credentials are not stored on this server.\n              </small>\n            </p>\n          )}\n        </div>\n        {(appSite || appVersion) && (\n          <p class=\"app-site-version\">\n            <small>\n              {appSite} {appVersion}\n            </small>\n          </p>\n        )}\n        <p>\n          <a href=\"https://github.com/cheeaun/phanpy\" target=\"_blank\">\n            Built\n          </a>{' '}\n          by{' '}\n          <a\n            href=\"https://mastodon.social/@cheeaun\"\n            target=\"_blank\"\n            onClick={(e) => {\n              e.preventDefault();\n              states.showAccount = 'cheeaun@mastodon.social';\n            }}\n          >\n            @cheeaun\n          </a>\n          .{' '}\n          <a href={PRIVACY_POLICY_URL} target=\"_blank\">\n            Privacy Policy\n          </a>\n          .\n        </p>\n      </div>\n      <div id=\"why-container\">\n        <div class=\"sections\">\n          <section>\n            <img\n              src={boostsCarouselUrl}\n              alt=\"Screenshot of Boosts Carousel\"\n              loading=\"lazy\"\n            />\n            <h4>Boosts Carousel</h4>\n            <p>\n              Visually separate original posts and re-shared posts (boosted\n              posts).\n            </p>\n          </section>\n          <section>\n            <img\n              src={nestedCommentsThreadUrl}\n              alt=\"Screenshot of nested comments thread\"\n              loading=\"lazy\"\n            />\n            <h4>Nested comments thread</h4>\n            <p>Effortlessly follow conversations. Semi-collapsible replies.</p>\n          </section>\n          <section>\n            <img\n              src={groupedNotificationsUrl}\n              alt=\"Screenshot of grouped notifications\"\n              loading=\"lazy\"\n            />\n            <h4>Grouped notifications</h4>\n            <p>\n              Similar notifications are grouped and collapsed to reduce clutter.\n            </p>\n          </section>\n          <section>\n            <img\n              src={multiColumnUrl}\n              alt=\"Screenshot of multi-column UI\"\n              loading=\"lazy\"\n            />\n            <h4>Single or multi-column</h4>\n            <p>\n              By default, single column for zen-mode seekers. Configurable\n              multi-column for power users.\n            </p>\n          </section>\n          <section>\n            <img\n              src={multiHashtagTimelineUrl}\n              alt=\"Screenshot of multi-hashtag timeline with a form to add more hashtags\"\n              loading=\"lazy\"\n            />\n            <h4>Multi-hashtag timeline</h4>\n            <p>Up to 5 hashtags combined into a single timeline.</p>\n          </section>\n        </div>\n      </div>\n    </main>\n  );\n}\n\nexport default Welcome;\n","// Replace alert() with toastify-js\nimport Toastify from 'toastify-js';\n\nconst nativeAlert = window.alert;\nif (!window.__nativeAlert) window.__nativeAlert = nativeAlert;\n\nwindow.alert = function (message) {\n  console.debug(\n    'ALERT: This is a custom alert() function. Native alert() is still available as window.__nativeAlert()',\n  );\n  // If Error object, show the message\n  if (message instanceof Error && message?.message) {\n    message = message.message;\n  }\n  // If not string, stringify it\n  if (typeof message !== 'string') {\n    message = JSON.stringify(message);\n  }\n\n  const toast = Toastify({\n    text: message,\n    className: 'alert',\n    gravity: 'top',\n    position: 'center',\n    duration: 10_000,\n    offset: {\n      y: 48,\n    },\n    onClick: () => {\n      toast.hideToast();\n    },\n  });\n  toast.showToast();\n};\n","import './app.css';\n\nimport debounce from 'just-debounce-it';\nimport {\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'preact/hooks';\nimport { matchPath, Route, Routes, useLocation } from 'react-router-dom';\nimport 'swiped-events';\nimport { subscribe } from 'valtio';\n\nimport BackgroundService from './components/background-service';\nimport ComposeButton from './components/compose-button';\nimport { ICONS } from './components/ICONS';\nimport KeyboardShortcutsHelp from './components/keyboard-shortcuts-help';\nimport Loader from './components/loader';\nimport Modals from './components/modals';\nimport NotificationService from './components/notification-service';\nimport SearchCommand from './components/search-command';\nimport Shortcuts from './components/shortcuts';\nimport NotFound from './pages/404';\nimport AccountStatuses from './pages/account-statuses';\nimport Bookmarks from './pages/bookmarks';\nimport Catchup from './pages/catchup';\nimport Favourites from './pages/favourites';\nimport Filters from './pages/filters';\nimport FollowedHashtags from './pages/followed-hashtags';\nimport Following from './pages/following';\nimport Hashtag from './pages/hashtag';\nimport Home from './pages/home';\nimport HttpRoute from './pages/http-route';\nimport List from './pages/list';\nimport Lists from './pages/lists';\nimport Login from './pages/login';\nimport Mentions from './pages/mentions';\nimport Notifications from './pages/notifications';\nimport Public from './pages/public';\nimport Search from './pages/search';\nimport StatusRoute from './pages/status-route';\nimport Trending from './pages/trending';\nimport Welcome from './pages/welcome';\nimport {\n  api,\n  initAccount,\n  initClient,\n  initInstance,\n  initPreferences,\n} from './utils/api';\nimport { getAccessToken } from './utils/auth';\nimport focusDeck from './utils/focus-deck';\nimport states, { initStates, statusKey } from './utils/states';\nimport store from './utils/store';\nimport { getCurrentAccount, setCurrentAccountID } from './utils/store-utils';\nimport './utils/toast-alert';\n\nwindow.__STATES__ = states;\nwindow.__STATES_STATS__ = () => {\n  const keys = [\n    'statuses',\n    'accounts',\n    'spoilers',\n    'unfurledLinks',\n    'statusQuotes',\n  ];\n  const counts = {};\n  keys.forEach((key) => {\n    counts[key] = Object.keys(states[key]).length;\n  });\n  console.warn('STATE stats', counts);\n\n  const { statuses } = states;\n  const unmountedPosts = [];\n  for (const key in statuses) {\n    const $post = document.querySelector(\n      `[data-state-post-id~=\"${key}\"], [data-state-post-ids~=\"${key}\"]`,\n    );\n    if (!$post) {\n      unmountedPosts.push(key);\n    }\n  }\n  console.warn('Unmounted posts', unmountedPosts.length, unmountedPosts);\n};\n\n// Experimental \"garbage collection\" for states\n// Every 15 minutes\n// Only posts for now\nsetInterval(() => {\n  if (!window.__IDLE__) return;\n  const { statuses, unfurledLinks, notifications } = states;\n  let keysCount = 0;\n  const { instance } = api();\n  for (const key in statuses) {\n    if (!window.__IDLE__) break;\n    try {\n      const $post = document.querySelector(\n        `[data-state-post-id~=\"${key}\"], [data-state-post-ids~=\"${key}\"]`,\n      );\n      const postInNotifications = notifications.some(\n        (n) => key === statusKey(n.status?.id, instance),\n      );\n      if (!$post && !postInNotifications) {\n        delete states.statuses[key];\n        delete states.statusQuotes[key];\n        for (const link in unfurledLinks) {\n          const unfurled = unfurledLinks[link];\n          const sKey = statusKey(unfurled.id, unfurled.instance);\n          if (sKey === key) {\n            delete states.unfurledLinks[link];\n            break;\n          }\n        }\n        keysCount++;\n      }\n    } catch (e) {}\n  }\n  if (keysCount) {\n    console.info(`GC: Removed ${keysCount} keys`);\n  }\n}, 15 * 60 * 1000);\n\n// Preload icons\n// There's probably a better way to do this\n// Related: https://github.com/vitejs/vite/issues/10600\nsetTimeout(() => {\n  for (const icon in ICONS) {\n    setTimeout(() => {\n      if (Array.isArray(ICONS[icon])) {\n        ICONS[icon][0]?.();\n      } else {\n        ICONS[icon]?.();\n      }\n    }, 1);\n  }\n}, 5000);\n\n(() => {\n  window.__IDLE__ = true;\n  const nonIdleEvents = [\n    'mousemove',\n    'mousedown',\n    'resize',\n    'keydown',\n    'touchstart',\n    'pointerdown',\n    'pointermove',\n    'wheel',\n  ];\n  const setIdle = () => {\n    window.__IDLE__ = true;\n  };\n  const IDLE_TIME = 3_000; // 3 seconds\n  const debouncedSetIdle = debounce(setIdle, IDLE_TIME);\n  const onNonIdle = () => {\n    window.__IDLE__ = false;\n    debouncedSetIdle();\n  };\n  nonIdleEvents.forEach((event) => {\n    window.addEventListener(event, onNonIdle, {\n      passive: true,\n      capture: true,\n    });\n  });\n  window.addEventListener('blur', setIdle, {\n    passive: true,\n  });\n  // When cursor leaves the window, set idle\n  document.documentElement.addEventListener(\n    'mouseleave',\n    (e) => {\n      if (!e.relatedTarget && !e.toElement) {\n        setIdle();\n      }\n    },\n    {\n      passive: true,\n    },\n  );\n  // document.addEventListener(\n  //   'visibilitychange',\n  //   () => {\n  //     if (document.visibilityState === 'visible') {\n  //       onNonIdle();\n  //     }\n  //   },\n  //   {\n  //     passive: true,\n  //   },\n  // );\n})();\n\n// Possible fix for iOS PWA theme-color bug\n// It changes when loading web pages in \"webview\"\nconst isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);\nif (isIOS) {\n  document.addEventListener('visibilitychange', () => {\n    if (document.visibilityState === 'visible') {\n      const theme = store.local.get('theme');\n      let $meta;\n      if (theme) {\n        // Get current meta\n        $meta = document.querySelector(\n          `meta[name=\"theme-color\"][data-theme-setting=\"manual\"]`,\n        );\n        if ($meta) {\n          const color = $meta.content;\n          const tempColor =\n            theme === 'light'\n              ? $meta.dataset.themeLightColorTemp\n              : $meta.dataset.themeDarkColorTemp;\n          $meta.content = tempColor || '';\n          setTimeout(() => {\n            $meta.content = color;\n          }, 10);\n        }\n      } else {\n        // Get current color scheme\n        const colorScheme = window.matchMedia('(prefers-color-scheme: dark)')\n          .matches\n          ? 'dark'\n          : 'light';\n        // Get current theme-color\n        $meta = document.querySelector(\n          `meta[name=\"theme-color\"][media*=\"${colorScheme}\"]`,\n        );\n        if ($meta) {\n          const color = $meta.dataset.content;\n          const tempColor = $meta.dataset.contentTemp;\n          $meta.content = tempColor || '';\n          setTimeout(() => {\n            $meta.content = color;\n          }, 10);\n        }\n      }\n    }\n  });\n}\n\n{\n  const theme = store.local.get('theme');\n  // If there's a theme, it's NOT auto\n  if (theme) {\n    // dark | light\n    document.documentElement.classList.add(`is-${theme}`);\n    document\n      .querySelector('meta[name=\"color-scheme\"]')\n      .setAttribute('content', theme || 'dark light');\n\n    // Enable manual theme <meta>\n    const $manualMeta = document.querySelector(\n      'meta[data-theme-setting=\"manual\"]',\n    );\n    if ($manualMeta) {\n      $manualMeta.name = 'theme-color';\n      $manualMeta.content =\n        theme === 'light'\n          ? $manualMeta.dataset.themeLightColor\n          : $manualMeta.dataset.themeDarkColor;\n    }\n    // Disable auto theme <meta>s\n    const $autoMetas = document.querySelectorAll(\n      'meta[data-theme-setting=\"auto\"]',\n    );\n    $autoMetas.forEach((m) => {\n      m.name = '';\n    });\n  }\n  const textSize = store.local.get('textSize');\n  if (textSize) {\n    document.documentElement.style.setProperty('--text-size', `${textSize}px`);\n  }\n}\n\nsubscribe(states, (changes) => {\n  for (const [action, path, value, prevValue] of changes) {\n    // Change #app dataset based on settings.shortcutsViewMode\n    if (path.join('.') === 'settings.shortcutsViewMode') {\n      const $app = document.getElementById('app');\n      if ($app) {\n        $app.dataset.shortcutsViewMode = states.shortcuts?.length ? value : '';\n      }\n    }\n\n    // Add/Remove cloak class to body\n    if (path.join('.') === 'settings.cloakMode') {\n      const $body = document.body;\n      $body.classList.toggle('cloak', value);\n    }\n  }\n});\n\nfunction App() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [uiState, setUIState] = useState('loading');\n\n  useEffect(() => {\n    const instanceURL = store.local.get('instanceURL');\n    const code = decodeURIComponent(\n      (window.location.search.match(/code=([^&]+)/) || [, ''])[1],\n    );\n\n    if (code) {\n      console.log({ code });\n      // Clear the code from the URL\n      window.history.replaceState(\n        {},\n        document.title,\n        window.location.pathname || '/',\n      );\n\n      const clientID = store.session.get('clientID');\n      const clientSecret = store.session.get('clientSecret');\n      const vapidKey = store.session.get('vapidKey');\n\n      (async () => {\n        setUIState('loading');\n        const { access_token: accessToken } = await getAccessToken({\n          instanceURL,\n          client_id: clientID,\n          client_secret: clientSecret,\n          code,\n        });\n\n        const client = initClient({ instance: instanceURL, accessToken });\n        await Promise.allSettled([\n          initInstance(client, instanceURL),\n          initAccount(client, instanceURL, accessToken, vapidKey),\n        ]);\n        initStates();\n        initPreferences(client);\n\n        setIsLoggedIn(true);\n        setUIState('default');\n      })();\n    } else {\n      window.__IGNORE_GET_ACCOUNT_ERROR__ = true;\n      const account = getCurrentAccount();\n      if (account) {\n        setCurrentAccountID(account.info.id);\n        const { client } = api({ account });\n        const { instance } = client;\n        // console.log('masto', masto);\n        initStates();\n        initPreferences(client);\n        setUIState('loading');\n        (async () => {\n          try {\n            await initInstance(client, instance);\n          } catch (e) {\n          } finally {\n            setIsLoggedIn(true);\n            setUIState('default');\n          }\n        })();\n      } else {\n        setUIState('default');\n      }\n    }\n  }, []);\n\n  let location = useLocation();\n  states.currentLocation = location.pathname;\n  // useLayoutEffect(() => {\n  //   states.currentLocation = location.pathname;\n  // }, [location.pathname]);\n\n  useEffect(focusDeck, [location, isLoggedIn]);\n\n  if (/\\/https?:/.test(location.pathname)) {\n    return <HttpRoute />;\n  }\n\n  return (\n    <>\n      <PrimaryRoutes isLoggedIn={isLoggedIn} loading={uiState === 'loading'} />\n      <SecondaryRoutes isLoggedIn={isLoggedIn} />\n      {uiState === 'default' && (\n        <Routes>\n          <Route path=\"/:instance?/s/:id\" element={<StatusRoute />} />\n        </Routes>\n      )}\n      {isLoggedIn && <ComposeButton />}\n      {isLoggedIn && <Shortcuts />}\n      <Modals />\n      {isLoggedIn && <NotificationService />}\n      <BackgroundService isLoggedIn={isLoggedIn} />\n      {uiState !== 'loading' && <SearchCommand onClose={focusDeck} />}\n      <KeyboardShortcutsHelp />\n    </>\n  );\n}\n\nfunction PrimaryRoutes({ isLoggedIn, loading }) {\n  const location = useLocation();\n  const nonRootLocation = useMemo(() => {\n    const { pathname } = location;\n    return !/^\\/(login|welcome)/i.test(pathname);\n  }, [location]);\n\n  return (\n    <Routes location={nonRootLocation || location}>\n      <Route\n        path=\"/\"\n        element={\n          isLoggedIn ? (\n            <Home />\n          ) : loading ? (\n            <Loader id=\"loader-root\" />\n          ) : (\n            <Welcome />\n          )\n        }\n      />\n      <Route path=\"/login\" element={<Login />} />\n      <Route path=\"/welcome\" element={<Welcome />} />\n    </Routes>\n  );\n}\n\nfunction getPrevLocation() {\n  return states.prevLocation || null;\n}\nfunction SecondaryRoutes({ isLoggedIn }) {\n  // const snapStates = useSnapshot(states);\n  const location = useLocation();\n  // const prevLocation = snapStates.prevLocation;\n  const backgroundLocation = useRef(getPrevLocation());\n\n  const isModalPage = useMemo(() => {\n    return (\n      matchPath('/:instance/s/:id', location.pathname) ||\n      matchPath('/s/:id', location.pathname)\n    );\n  }, [location.pathname, matchPath]);\n  if (isModalPage) {\n    if (!backgroundLocation.current)\n      backgroundLocation.current = getPrevLocation();\n  } else {\n    backgroundLocation.current = null;\n  }\n  console.debug({\n    backgroundLocation: backgroundLocation.current,\n    location,\n  });\n\n  return (\n    <Routes location={backgroundLocation.current || location}>\n      {isLoggedIn && (\n        <>\n          <Route path=\"/notifications\" element={<Notifications />} />\n          <Route path=\"/mentions\" element={<Mentions />} />\n          <Route path=\"/following\" element={<Following />} />\n          <Route path=\"/b\" element={<Bookmarks />} />\n          <Route path=\"/f\" element={<Favourites />} />\n          <Route path=\"/l\">\n            <Route index element={<Lists />} />\n            <Route path=\":id\" element={<List />} />\n          </Route>\n          <Route path=\"/fh\" element={<FollowedHashtags />} />\n          <Route path=\"/ft\" element={<Filters />} />\n          <Route path=\"/catchup\" element={<Catchup />} />\n        </>\n      )}\n      <Route path=\"/:instance?/t/:hashtag\" element={<Hashtag />} />\n      <Route path=\"/:instance?/a/:id\" element={<AccountStatuses />} />\n      <Route path=\"/:instance?/p\">\n        <Route index element={<Public />} />\n        <Route path=\"l\" element={<Public local />} />\n      </Route>\n      <Route path=\"/:instance?/trending\" element={<Trending />} />\n      <Route path=\"/:instance?/search\" element={<Search />} />\n      {/* <Route path=\"/:anything\" element={<NotFound />} /> */}\n    </Routes>\n  );\n}\n\nexport { App };\n","import './index.css';\n\nimport './cloak-mode.css';\n\n// Polyfill needed for Firefox < 122\n// https://bugzilla.mozilla.org/show_bug.cgi?id=1423593\n// import '@formatjs/intl-segmenter/polyfill';\nimport { render } from 'preact';\nimport { HashRouter } from 'react-router-dom';\n\nimport { App } from './app';\n\nif (import.meta.env.DEV) {\n  import('preact/debug');\n}\n\n// AbortSignal.timeout polyfill\n// Temporary fix from https://github.com/mo/abortcontroller-polyfill/issues/73#issuecomment-1541180943\n// Incorrect implementation, but should be good enough for now\nif ('AbortSignal' in window) {\n  AbortSignal.timeout =\n    AbortSignal.timeout ||\n    ((duration) => {\n      const controller = new AbortController();\n      setTimeout(() => controller.abort(), duration);\n      return controller.signal;\n    });\n}\n\nrender(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('app'),\n);\n\n// Storage cleanup\nsetTimeout(() => {\n  try {\n    // Clean up iconify localStorage\n    Object.keys(localStorage).forEach((key) => {\n      if (key.startsWith('iconify')) {\n        localStorage.removeItem(key);\n      }\n    });\n    Object.keys(sessionStorage).forEach((key) => {\n      if (key.startsWith('iconify')) {\n        sessionStorage.removeItem(key);\n      }\n    });\n\n    // Clean up old settings key\n    localStorage.removeItem('settings:boostsCarousel');\n  } catch (e) {}\n}, 5000);\n\nwindow.__CLOAK__ = () => {\n  document.body.classList.toggle('cloak');\n};\n"],"names":["usePageVisibility","fn","deps","savedCallback","useRef","useEffect","current","handleVisibilityChange","hidden","document","visibilityState","console","STREAMING_TIMEOUT","POLL_INTERVAL","BackgroundService","memo","isLoggedIn","visible","setVisible","useState","checkLatestNotification","masto","instance","skipCheckMarkers","states","notificationsLast","notificationsIterator","v1","notifications","list","limit","sinceId","id","value","next","length","notificationsShowNew","lastReadId","markers","fetch","timeline","sub","pollNotifications","streaming","api","hasStreaming","setTimeout","user","notification","subscribe","log","entry","_a","checkForUpdates","clearTimeout","clearInterval","r","info","visible2","lastCheckDate","useHotkeys","currentCloakMode","Date","diff","ComposeButton","snapStates","useSnapshot","handleButton","e","composerState","minimized","openOSK","shiftKey","openCompose","showCompose","ignoreEventWhen","querySelector","_jsx","type","onClick","class","publishing","publishingError","children","Icon","icon","size","alt","KeyboardShortcutsHelp","onClose","showKeyboardShortcutsHelp","hasModal","Modal","tabindex","action","keys","_jsxs","_Fragment","className","map","Accounts","accounts","store","local","getJSON","currentAccount","getCurrentAccountID","moreThanOneAccount","_","reload","useReducer","x","accountsListParent","useAutoAnimate","tabIndex","ref","account","i","isCurrent","isDefault","Avatar","url","avatarStatic","onDblClick","$select","NameText","test","showAcct","setCurrentAccountID","Menu2","align","menuButton","title","MenuItem","MenuDivider","disabled","splice","MenuConfirm","subMenu","confirmLabel","menuItemClassName","href","Link","to","logo","createBackendPushSubscription","subscription","push","create","fetchBackendPushSubscription","updateBackendPushSubscription","update","removeBackendPushSubscription","remove","isPushSupported","navigator","window","getRegistration","serviceWorker","getSubscription","registration","pushManager","undefined","urlBase64ToUint8Array","base64String","padding","repeat","base64","replace","rawData","atob","outputArray","Uint8Array","charCodeAt","initSubscription","backendSubscription","err","message","sameEndpoint","vapidKey","sameKey","key2","getCurrentAccount","applicationServerKey","vapidKeyStr","applicationServerKeyStr","updateSubscription","data","policy","removeSubscription","DEFAULT_TEXT_SIZE","TEXT_SIZES","PHANPY_WEBSITE","WEBSITE","PHANPY_PRIVACY_POLICY_URL","PRIVACY_POLICY_URL","PHANPY_IMG_ALT_API_URL","IMG_ALT_API_URL","PHANPY_GIPHY_API_KEY","GIPHY_API_KEY","import","Settings","currentTheme","get","themeFormRef","targetLanguage","settings","contentTranslationTargetLanguage","systemTargetLanguage","getTranslateTargetLanguage","systemTargetLanguageText","localeCode2Text","currentTextSize","prefs","setPrefs","authenticated","onInput","formData","theme","documentElement","html","classList","$manualMeta","$autoMetas","querySelectorAll","forEach","m","toggle","name","defaultChecked","fontSize","min","max","step","onChange","parseInt","setProperty","for","target","alert","rel","checked","autoRefresh","boostsCarousel","contentTranslation","targetLanguages","lang","code","contentTranslationHideLanguages","composerGIFPicker","mediaAltGenerator","shortcutSettingsCloudImportExport","cloakMode","PushNotificationsSection","display","flexWrap","gap","lineHeight","src","width","aspectRatio","verticalAlign","borderRadius","readOnly","__BUILD_TIME__","showToast","writeText","datetime","uiState","setUIState","allowNotifications","setAllowNotifications","setNeedRelogin","pushFormRef","needRelogin","alerts","previousPolicyRef","policyEl","elements","namedItem","el","isLoading","values","params","mention","favourite","reblog","follow","follow_request","followRequest","status","key","alertsCount","allowNotifications2","permission","label","alert2","focusDeck","timer","columns","getElementById","modals","modal","modalFocusElement","focus","backDrop","pages","page","useLocationChange","location","useLocation","currentLocationRef","pathname","FETCH_MAX_AGE","MAX_AGE","fetchLists","pmem","lists","sort","a","b","localeCompare","set","updatedAt","now","maxAge","getLists","fetchList","getList","theList","getListTitle","addListStore","updateListStore","index","deleteListStore","listID","findIndex","ListAddEdit","editMode","nameFieldRef","repliesPolicyFieldRef","exclusiveFieldRef","repliesPolicy","exclusive","supportsExclusive","supports","onSubmit","preventDefault","FormData","listResult","replies_policy","MUTE_DURATIONS","MUTE_DURATIONS_LABELS","LIMIT","ACCOUNT_INFO_MAX_AGE","fetchFamiliarFollowers","currentID","familiarFollowers","memFetchFamiliarFollowers","fetchPostingStats","accountID","fetchStatuses","statuses","total","originals","replies","stats","boosts","memFetchPostingStats","fetchAccount","standalone","currentMasto","currentInstance","isString","useMemo","setInfo","sameCurrentInstance","info2","acct","avatar","bot","createdAt","displayName","emojis","fields","group","lastStatusAt","locked","note","statusesCount","username","memorial","moved","roles","hideCollections","header","headerStatic","headerIsAvatar","isSelf","infoHasEssentials","account2","updated","headerCornerColors","setHeaderCornerColors","followersIterator","toUnicode","domain","fetchFollowers","firstLoad","familiarFollowersCache","results","newValue","familiarFollowers2","familiar","followingIterator","LinkOrDiv","accountLink","postingStats","setPostingStats","renderFamiliarFollowers","setFamiliarFollowers","postingStatsUIState","setPostingStatsUIState","hasPostingStats","followers","renderPostingStats","onRelationshipChange","onProfileUpdate","useCallback","newAccount","AccountBlock","stopPropagation","onError","ctx","canvas","onLoad","add","pixelDimension","rgbColors","OffscreenCanvas","createElement","g","height","imageSmoothingEnabled","drawImage","colors","getImageData","dataLength","lightenRGB","color","avatarSize","handle","clipboard","MenuLink","role","accountInstance","enhanceContent","verifiedAt","__html","EmojiText","follower","heading","fetchAccounts","excludeRelationshipAttrs","blankCopy","followersCount","shortenNumber","squircle","fetchFollowing","followingCount","Math","RelatedActions","FAMILIAR_FOLLOWERS_LIMIT","sameInstance","following","showingReblogs","currentInfo","setCurrentInfo","notifying","followedBy","blocking","blockedBy","muting","mutingNotifications","requested","domainBlocking","endorsed","privateNote","v2","q","setRelationshipUIState","relationships","fetchRelationships","relationship2","setRelationship","setIsSelf","relationship","showAddRemoveLists","setShowAddRemoveLists","showPrivateNoteModal","setLists","updateAccount","niceDateTime","showTranslatedBio","showEditProfile","setShowPrivateNoteModal","body","lists2","currentAuthenticated","loading","onMenuChange","setShowTranslatedBio","reblogs","niceAccountURL","error","share","SubMenu2","newRelationship","duration","counter","setShowEditProfile","relationshipUIState","Loader","TranslatedBioSheet","EditProfileSheet","AddRemoveListsSheet","luminence","alpha","urlObj","state","host","getHTMLText","text","fieldsText","path","punycode","TranslationBlock","setListsContainingAccount","reloadCount","c","listsContainingAccount2","showListAddEditModal","setShowListAddEditModal","inList","listsContainingAccount","accountIds","result","PrivateNoteSheet","initialNote","_b","textareaRef","e2","acc","setAccount","source","fieldsAttributesRef","displayName2","note2","fieldsAttributesFields","field","fieldsAttributes","FieldsAttributesRow","hasValue","server","setHasValue","defaultValue","required","AccountSheet","propInstance","AccountInfo","lookup","skip_webfinger","search","resolve","accountURL","URL","hostname","Drafts","drafts","setDrafts","db","ns","getCurrentAccountNS","ownKeys","filter","startsWith","getMany","getTime","hasDrafts","abrupt","draft","draftStatus","replyTo","updatedAtDate","replyToStatus","MiniDraft","poll","spoilerText","mediaAttachments","hasPoll","options","hasMedia","firstImageMedia","media","image","file","objectURL","createObjectURL","hasPollOrMedia","style","EmbedModal","dangerouslySetInnerHTML","GenericAccounts","postID","isCurrentInstance","setAccounts","showMore","setShowMore","showGenericAccounts","staticAccounts","showReactions","relationshipsMap","setRelationshipsMap","loadRelationships","loadAccounts","done","Array","isArray","theAccount","find","j","_types","prev","newAccounts","reloadGenericAccounts","post","Status","showStats","InView","MediaAltModal","forceTranslate","setForceTranslate","differentLanguage","localeMatch","l","supportsTTS","speak","dir","whiteSpace","textWrap","sourceLanguage","clamp","gammaToLinear","pow","linearToGamma","rgb2oklab","s","cbrt","oklab2rgb","L","round","MediaModal","statusID","carouselRef","currentIndex","setCurrentIndex","carouselFocusItem","useLayoutEffect","scrollIntoView","prevStatusID","scrollLeft","clientWidth","differentStatusID","scrollTo","left","behavior","showControls","setShowControls","handleSwipe","addEventListener","removeEventListener","handleScroll","passive","mediaAccentColors","blurhash","averageColor","getBlurHashAverageColor","labAverageColor","mediaAccentGradient","range","start","end","join","toastRef","hideToast","contains","backgroundAttachment","backgroundImage","accentColor","description","showMediaAlt","Media","showOriginal","overflow","position","menuClassName","remoteUrl","matchMedia","matches","CATEGORIES","CATEGORIES_INFO","spam","legal","violation","stampLabel","other","excludeStamp","ReportModal","split","rules","currentDomain","getCurrentInstance","selectedCategory","setSelectedCategory","showRules","setShowRules","rulesRef","hasRules","setHasRules","previewMode","useAvatarStatic","showActivity","entries","Object","fromEntries","category","comment","forward","ruleIds","reports","accountId","statusIds","Fragment","rule","maxlength","rows","floatingButtonUrl","multiColumnUrl$1","tabMenuBarUrl","MAX_FETCH","fetchFollowedTags","iterator","followedTags","tags","fetchCount","getFollowedTags","fauxDiv","extractTagsFromStatus","content","hashtagLinks","AsyncText","setText","Promise","then","SHORTCUTS_LIMIT","TYPES","TYPE_TEXT","public","bookmarks","favourites","hashtag","trending","mentions","TYPE_PARAMS","notRequired","placeholder","pattern","fetchAccountTitle","SHORTCUTS_META","excludeViewMode","subtitle","query","encodeURIComponent","ShortcutsSettings","shortcuts","showForm","setShowForm","showImportExport","setShowImportExport","shortcutsListParent","opacity","textTransform","imgURL","multiColumnUrl","shortcutsViewMode","Boolean","shortcut","excludedViewMode","includes","shortcutsArr","from","temp","shortcutIndex","justifyContent","alignItems","currentTarget","ShortcutForm","mode","ImportExport","FORM_NOTES","setFollowedHashtags","currentType","form","formRef","input","setCurrentType","switch","autocorrect","followedHashtags","tag","compressToEncodedURIComponent","shortcutsStr","importUIState","setImportUIState","parsedImportShortcutStr","importShortcutStr","parsed","parse","hasCurrentSettings","shortcutsImportFieldRef","v","dt","dispatchEvent","some","nonUniqueShortcuts","menuFooter","every","exceededLimit","newShortcuts","newNote","settingsJSON2","settingsJSON","changes","prevValue","Modals","navigate","useNavigate","preload","ComposeSuspense","__COMPOSE__","editStatus","newStatus","reloadStatusPage","reply","edit","delay","toast","prevLocation","showSettings","showAccounts","showAccount","destination","showDrafts","showMediaModal","showShortcutsSettings","showEmbedModal","showReportModal","FollowRequestButtons","requestState","setRequestState","hasRelationship","followRequests","authorize","Error","NOTIFICATION_ICONS","severed_relationships","moderation_warning","emoji_reaction","emojiText","emoji","emoji_url","staticUrl","CustomEmoji","contentText","count","reblog_reply","favourite_reply","targetAccount","SEVERED_RELATIONSHIPS_TEXT","account_suspension","targetName","domain_block","user_domain_block","MODERATION_WARNING_TEXT","none","disable","mark_statuses_as_sensitive","delete_statuses","sensitive","silence","suspend","AVATARS_LIMIT","Notification","isStatic","disableContextMenu","report","event","_accounts","_statuses","actualStatus","actualStatusID","isVoted","voted","isReplyToOthers","inReplyToAccountId","favsCount","reblogsCount","showAvatar","emojiURL","shortcode","formattedCreatedAt","toLocaleString","genericAccountsHeading","handleOpenGenericAccounts","statusKey","debug","RelativeTime","format","type2","status2","TruncatedLink","onContextMenu","clientX","clientY","props","useTruncated","oldProps","newProps","accessToken","NotificationService","routeNotification","notificationAccount","hasAccount","hash","warn","id2","setShowNotificationSheet","showNotificationSheet","tagName","instanceURL","SearchForm","forwardRef","searchParams","setSearchParams","useSearchParams","searchMenuOpen","setSearchMenuOpen","setQuery","searchFieldRef","useImperativeHandle","setValue","select","blur","autocomplete","autocapitalize","spellCheck","onSearch","onFocus","onBlur","onKeyDown","focusItem","nextItem","nextElementSibling","parentElement","firstItem","prevItem","previousElementSibling","lastItem","click","top","queryType","SearchCommand","showSearch","setShowSearch","searchFormRef","isSearchPage","closeSearch","enabled","enableOnFormTags","Shortcuts","shortcutsColumnsMode","menuRef","hasLists","formattedShortcuts","pin","handler","closeMenu","updatesButton","instanceRef","viewScroll","groupBoosts","newValues","boostStash","serialBoosts","item","boostStashID","items","half","floor","slice","dedupeBoosts","boostedStatusIDs","filteredItems","boosterID","statusKey2","groupContext","contextIndex","contexts","t","repliedItem","self","context","inReplyToId","firstItemAccountID","newItems","appliedContextIndices","inReplyToIds","contextItems","aDate","bDate","i2","sKey","queueMicrotask","fallbackFetch","fetchStatus","saveStatus","statusReply","ids","replyToStatuses","skipThreading","assignFollowedTags","statusFollowedTags","extractedTags","itemFollowedTags","statusWithFollowedTags","useScroll","scrollableRef","distanceFromStart","distanceFromEnd","scrollThresholdStart","scrollThresholdEnd","direction","distanceFromStartPx","_distanceFromStartPx","distanceFromEndPx","_distanceFromEndPx","scrollDirection","setScrollDirection","reachStart","setReachStart","reachEnd","setReachEnd","nearReachStart","setNearReachStart","nearReachEnd","setNearReachEnd","isVertical","scrollableElement","previousScrollStart","scrollTop","onScroll","scrollHeight","scrollWidth","clientHeight","scrollStart","scrollDimension","clientDimension","scrollDistance","abs","init","Event","useScrollFn","callback","useThrottledCallback","MediaPost","parent","onMediaClick","accountEmojis","repliesCount","reblogged","favourited","favouritesCount","bookmarked","muted","visibility","language","editedAt","filtered","card","uri","_deleted","_pinned","debugHover","filterContext","useContext","FilterContext","isFiltered","filterInfo","hasSpoiler","readingExpandMedia","filterTitleStr","titlesStr","showSpoilerMedia","NavMenu","showFollowing","bindLongPress","useLongPress","threshold","detect","cancelOnMovement","buttonRef","menuState","setMenuState","boundingBoxPadding","safeBoundingBoxPadding","mutesIterator","fetchMutes","mutes","blocksIterator","fetchBlocks","blocks","supportsLists","buttonClickTS","ControlledMenu","anchorRef","containerProps","zIndex","portal","unmountOnClose","appVersion","commitHash","__COMMIT_HASH__","confirm","scrollIntoViewOptions","block","inline","Timeline","titleComponent","emptyText","errorText","useItemID","fetchItems","checkForUpdatesInterval","headerStart","headerEnd","timelineStart","refresh","view","showFollowedTags","showReplyParent","setItems","showNew","setShowNew","mediaFirst","allowGrouping","loadItems","useDebouncedCallback","otherPosts","pinnedPosts","items2","itemsSelector","jRef","activeItem","activeItemRect","closest","getBoundingClientRect","allItems","activeItemIndex","indexOf","itemRect","topmostItem","kRef","findLast","oRef","handleLoadNewPosts","showNewPostsIndicator","dotRef","headerRef","nearReachStart2","hiddenUI","prevView","disableIdleCheck","loadOrCheckUpdates","inBackground","noPointers","__IDLE__","timeDiff","hasUpdate","useInterval","lastHiddenTime","node","TimelineItem","skeleton","inView","fItems","bFiltered","isCarousel","aFiltered","reblog2","_pinned2","actualStatusID2","statusID2","url2","StatusCarousel","showCompact","_differentAuthor","isSpoiler","manyItems","isMiddle","isStart","isEnd","TimelineStatusCompact","itemKey","enableCommentHint","endButtonRef","render","setRender","newID","oldID","startButtonRef","statusPeekText","statusPeek","statusThreadNumber","MIN_YEAR","MIN_YEAR_MONTH","supportsInputMonth","setAttribute","_isSearchEnabled","isSearchEnabled","AccountStatuses","useParams","month","excludeReplies","excludeBoosts","tagged","accountStatusesIterator","allSearchParams","searchOffsetRef","isMediaFirstInstance","searchEnabled","setSearchEnabled","isValidMonth","_year","_month","monthIndex","after","afterStr","before","beforeStr","searchResults","value2","offset","pinnedStatuses","pinnedStatusesIds","postId","setFeaturedTags","useTitle","fetchPromise","fetchAccountPromiseRef","cachedAccount","featuredTags","filterBarRef","TimelineStart","month2","date","year","validity","valid","active","allowSwitch","offsetLeft","fetchAccountStatuses","masto2","monthFieldRef","checkValidity","minYear","maxYear","maxMonth","minMonth","yearFieldRef","Bookmarks","bookmarksIterator","fetchBookmarks","catchupUrl","FILTER_CONTEXT","RANGES","FILTER_LABELS","FILTER_SORTS","FILTER_GROUPS","FILTER_VALUES","Filtered","Groups","Boosts","Replies","Original","FILTER_CATEGORY_TEXT","SORT_BY_TEXT","density","Catchup","showTopLinks","setShowTopLinks","supportsPixelfed","fetchHome","maxCreatedAt","maxCreatedAtDate","allResults","mainloop","homeIterator","nextParams","createdAtDate","selfPost","addedResults","catchupRangeRef","catchupLastRef","handleCatchupClick","catchupID","catchup","posts","setPosts","reloadCatchups","setLastCatchupEndAt","prevCatchups","setPrevCatchups","lastCatchupEndAt","catchups","ownCatchups","trimmedCatchups","lastCatchups","restCatchups","endAt","startAt","reloadCatchupsCount","filtereds","groups","_followedTags","_e","thePost","__FILTER","links","sharers","links2","link","topLinks","shared","linksLoop","likes","filteredPosts","authors","authorCounts","selectedFilterCategory","filteredPosts2","setSelectedAuthor","sortBy","authorsHash","setSortOrder","authorCountsMap","postFilterMatches","boostedPosts","__BOOSTERS","selectedAuthor","filteredPostsMap","authorID","authorCountsList","sortedFilteredPosts","aAccountID","authorIndices","order","bAccountID","aIndex","bIndex","postDensity","bDensity","aDensity","sortOrder","groupBy","prevGroup","authorsListParent","autoAnimated","postsBarType","autoAnimate","postsBar","postsBins","binByTime","posts2","isFiltered2","lastCatchupRange","groupByText","authorUsername","sortOrderIndex","authorElement","scrollableRect","authorRect","right","showHelp","setShowHelp","hlRef","escRef","ignoreModifiers","setRange","dtf","pc","yes","setSelectedFilterCategory","setSortBy","setGroupBy","transform","imageDescription","publishedAt","filterCounts","toLowerCase","author","paddingInline","showSeparator","IntersectionPostLineItem","isFollowedTags","PostLine","isReplyTo","root","show","setShow","observer","IntersectionObserver","isIntersecting","unobserve","rootMargin","observe","MEDIA_DENSITY","pollContent","cur","htmlContentLength","CARD_DENSITY","PostPeek","isThread","_thread","readingExpandSpoilers","showMedia","showPostContent","o","mediaURL","remoteMediaURL","MEDIA_SIZE","gifv","video","audio","PostStats","locale","numBins","dates","bins","Intl","minDate","binIndex","DateTimeFormat","Favourites","favouritesIterator","fetchFavourites","FILTER_CONTEXT_UNIMPLEMENTED","FILTER_CONTEXT_LABELS","home","thread","EXPIRY_DURATIONS","EXPIRY_DURATIONS_LABELS","Filters","showFiltersAddEditModal","setShowFiltersAddEditModal","filters","setFilters","keywords","expiresAt","k","keyword","ExpiryStatus","_id","incID","FiltersAddEdit","filterAction","hasExpiry","expiresAtDate","editKeywords","setEditKeywords","keywordsRef","setRemovedKeyword_IDs","filteredEditKeywords","setRemovedKeywordIDs","removedKeyword_IDs","title2","keywordIDs","getAll","keywordKeywords","keywordWholeWords","wholeWord","removedKeywordIDs","keywordsAttributes","context2","expiresIn","filterResult","filterAction2","_id2","showNeverExpires","expired","rerender","FollowedHashtags","Following","latestItem","latestItemChanged","opts","payload","TAGS_LIMIT_PER_MODE","TOTAL_TAGS_LIMIT","Hashtags","mediaView","columnMode","hashtags","trim","linkParams","hashtagTitle","hashtagPostTitle","maxID","fetchHashtags","timelines","any","maxId","onlyMedia","since_id","valueContainsLatestItem","followUIState","setFollowUIState","reachLimit","setDownOverflow","catch","finally","MenuHeader","newHashtag","MenuGroup","exists","newInstance","List","listIterator","setList","showManageMembersModal","setShowManageMembersModal","list2","ListManageMembers","MEMBERS_LIMIT","members","setMembers","membersIterator","fetchMembers","member","as","RemoveAddButton","removed","setRemoved","notificationTypeKeys","fixNotifications","groupNotifications","notificationsMap","cleanNotifications","virtualType","mappedNotification","mappedAccount","n","cleanNotifications2","notificationsMap2","emptySearchParams","URLSearchParams","Mentions","stateType","setStateType","mentionsIterator","fetchMentions","types","conversationsIterator","latestConversationItem","lastStatus","fetchConversations","args","Notifications","notificationID","notificationAccessToken","onlyMentions","setOnlyMentions","setFollowRequests","announcements","setAnnouncements","firstLoad2","excludeTypes","allNotifications","groupedNotifications","notificationsLastFetchTime","fetchFollowRequests","loadFollowRequests","requests","fetchAnnouncements","supportsFilteredNotifications","showNotificationsSettings","setNotificationsPolicy","fetchNotificationsPolicy","loadNotificationsPolicy","notificationsRequests","setNotificationsRequests","fetchNotificationsRequest","loadNotifications","fetchNotificationsPromise","fetchNotifications","loadUpdates","unsub","subscribeKey","todayDate","yesterdayDate","currentDay","announcementsListRef","statusLink","setShowNotificationsSettings","announcement","AnnouncementBlock","notificationsPolicy","onToggle","open","request","NotificationRequestModalButton","NotificationRequestButtons","showTodayEmpty","notificationDay","differentDay","filterNewAccounts","filterPrivateMentions","filterNotFollowing","filterNotFollowers","allFilters","contact","contactAccount","startsAt","endsAt","published","reactions","allDay","read","publishedAtDate","publishedDateText","updatedAtText","reaction","me","fetchNotficationsByAccount","setShowModal","showModal","setNotifications","notifs","hasRequestState","Public","isLocal","publicIterator","fetchPublic","remote","prompt","SHORT_LIMIT","Search","offsetRef","statusResults","setStatusResults","accountResults","setAccountResults","hashtagResults","setHashtagResults","setTypeResultsFunc","loadResults","filterBarParent","history","reduce","fetchLinks","trends","fetchTrends","pixelfed","discover","Trending","setHashtags","setLinks","trendIterator","fetchTrend","authorName","authorUrl","providerName","providerUrl","Columns","components","Hashtag","Component","Home","NotificationsLink","notificationLinkRef","NotificationsMenu","NOTIFICATIONS_LIMIT","NOTIFICATIONS_DISPLAY_LIMIT","hasFollowRequests","setHasFollowRequests","statusPostRegexes","getInstanceStatusObject","regex","match","getInstanceStatusURL","HttpRoute","statusObject","statusURL","Lists","instancesListURL","PHANPY_CLIENT_NAME","CLIENT_NAME","SCOPES","registerApplication","registrationParams","client_name","redirect_uris","origin","scopes","website","method","headers","toString","json","getAuthorizationURL","registrationJSON","client_id","authorizationParams","scope","redirect_uri","authorizationURL","client_secret","PHANPY_DEFAULT_INSTANCE","DEFAULT_INSTANCE","Login","instanceURLRef","cachedInstanceURL","submit","instanceText","setInstanceText","instancesList","setInstancesList","searcher","Fuse","submitInstance","vapid_key","session","cleanInstanceText","instanceTextLooksLikeDomain","instancesSuggestions","instance2","selectedInstanceText","textAlign","SUBCOMMENTS_OPEN_ALL_LIMIT","MAX_WEIGHT","cachedRepliesToggle","cachedStatusesMap","scrollPositions","resetScrollPosition","STATUSES_SELECTOR","STATUS_URL_REGEX","StatusPage","mediaParam","mediaOnlyParam","mediaIndex","mediaStatusID","mediaStatus","getStatus","showMediaOnly","heroStatus","setHeroStatus","closeLink","matchStatusPath","matchPath","handleMediaClose","delete","$carousel","$deckContainers","$deckContainer","StatusParent","linkable","restProps","StatusThread","navigation","translate","setStatuses","heroStatusRef","totalDescendants","debounce","scrollOffsets","lastInitContextTS","reloadHero","heroTimer","cachedStatuses","reallyCachedStatuses","heroFetch","pRetry","contextFetch","hasStatus","heroStatus2","_replies","_r","expandReplies","weight","descendants","missingStatuses","ancestors2","ancestors","ancestorsIsThread","nestedDescendants","__replies","ancestor","allStatuses","offsetTop","setLimit","showRefresh","setShowRefresh","interval","scrollPosition","newScrollOffsets","setInterval","newScrollTop","contextURL","initContext","statusWeightCache","div","apiCache","heroDisplayName","heroContentText","postInstance","hasDescendants","innerHTML","postSameInstance","activeStatus","activeStatusRect","activeStatusIndex","nextStatus","heroInView","heroPointer","statusLinkRect","topmostStatusLink","allStatusLinks","prevStatus","details","reachTopPost","initialPageState","handleMediaClick","renderStatus","descendant","isHero","requestAnimationFrame","setHeroInView","setReachTopPost","isLinkable","SubComments","handleStatusLinkClick","enableTranslate","showActionsBar","prevEntry","level","openAll","parentLink","getIDs","spoilerButton","viewMode","moreStatusesKeys","arr","setViewMode","button","buttons","statusesList","diveDeep","replies2","replies3","totalComments","totalWeight","accWeight","hasParentThread","calcStatusWeight","openBefore","detailsRef","sameCount","open2","shortReply","dataset","MEDIA_VIRTUAL_LENGTH","cachedWeight","mediaLength","pollLength","POLL_VIRTUAL_LENGTH","cardLength","WEIGHT_SEGMENT","StatusRoute","boostsCarouselUrl","groupedNotificationsUrl","multiHashtagTimelineUrl","nestedCommentsThreadUrl","logoText","PHANPY_DEFAULT_INSTANCE_REGISTRATION_URL","DEFAULT_INSTANCE_REGISTRATION_URL","appSite","Welcome","marginBlockEnd","nativeAlert","__nativeAlert","Toastify","gravity","y","__STATES__","__STATES_STATS__","counts","unmountedPosts","unfurledLinks","$post","postInNotifications","unfurled","keysCount","ICONS","nonIdleEvents","setIdle","debouncedSetIdle","onNonIdle","isIOS","$meta","tempColor","colorScheme","themeDarkColor","textSize","$app","$body","setIsLoggedIn","decodeURIComponent","clientID","clientSecret","initPreferences","client","initInstance","initStates","PrimaryRoutes","Routes","Route","nonRootLocation","element","backgroundLocation","getPrevLocation","isModalPage","timeout","AbortSignal","controller","AbortController","abort","signal","HashRouter","App","localStorage","removeItem","sessionStorage","__CLOAK__"],"mappings":"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"}